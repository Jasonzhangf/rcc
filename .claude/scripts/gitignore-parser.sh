#!/bin/bash

# Gitignore 解析器
# 解析 .gitignore 文件并生成排除模式

set -e

# 配置
PROJECT_ROOT="${PWD}"
GITIGNORE_FILE="${PROJECT_ROOT}/.gitignore"
EXCLUDE_FILE="${PROJECT_ROOT}/.claude/scan-exclude.txt"
SCAN_CACHE_DIR="${PROJECT_ROOT}/.claude/cache"

# 创建必要的目录
mkdir -p "$(dirname "$EXCLUDE_FILE")"
mkdir -p "$SCAN_CACHE_DIR"

# 日志函数
log_message() {
    local level="$1"
    local message="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message" >&2
}

# 解析 .gitignore 文件
parse_gitignore() {
    local gitignore_file="$1"
    local exclude_file="$2"
    
    if [ ! -f "$gitignore_file" ]; then
        log_message "INFO" "No .gitignore file found, using default exclusions"
        return 1
    fi
    
    log_message "INFO" "Parsing .gitignore file: $gitignore_file"
    
    # 清空输出文件（保留头部注释）
    cat > "$exclude_file" << 'EOF'
# Scan Exclude Patterns (Auto-generated from .gitignore)
# This file is automatically generated from .gitignore
# Do not edit manually

# Default exclusions
*.test.ts
*.spec.ts
*.mock.ts
*.fixture.ts
tmp/
.tmp/
.claude/cache/
.claude/scan-reports/

EOF
    
    # 解析 .gitignore 并转换为扫描排除模式
    while IFS= read -r pattern; do
        # 跳过注释和空行
        [[ "$pattern" =~ ^[[:space:]]*# ]] && continue
        [[ -z "$pattern" ]] && continue
        
        # 移除前后空格
        pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        [ -z "$pattern" ] && continue
        
        # 处理否定模式（以 ! 开头）
        if [[ "$pattern" == !* ]]; then
            # 跳过否定模式，因为我们的排除逻辑不支持
            continue
        fi
        
        # 转换 .gitignore 模式为我们的排除模式
        local exclude_pattern=""
        
        # 处理目录模式（以 / 结尾）
        if [[ "$pattern" == */ ]]; then
            exclude_pattern="$pattern*"
        # 处理根目录模式（以 / 开头）
        elif [[ "$pattern" == /* ]]; then
            exclude_pattern="${pattern#/}*"
        # 处理通配符模式
        elif [[ "$pattern" == *"*"* ]]; then
            # 将 .gitignore 通配符转换为类 glob 模式
            exclude_pattern="$pattern"
        # 处理普通文件名
        else
            exclude_pattern="$pattern"
        fi
        
        # 添加到排除文件
        if [ -n "$exclude_pattern" ]; then
            echo "$exclude_pattern" >> "$exclude_file"
        fi
        
    done < "$gitignore_file"
    
    log_message "INFO" "Generated scan exclude patterns from .gitignore"
    return 0
}

# 检查文件是否应该被排除
should_exclude() {
    local file_path="$1"
    local project_root="$2"
    local exclude_file="$3"
    
    # 转换为相对路径
    local relative_path="${file_path#$project_root/}"
    relative_path="${relative_path#./}"
    
    # 检查标准排除模式
    local standard_excludes=(
        "node_modules/*"
        "dist/*"
        ".git/*"
        "*.test.ts"
        "*.spec.ts"
        "tmp/*"
        ".tmp/*"
        ".claude/cache/*"
        ".claude/scan-reports/*"
    )
    
    for pattern in "${standard_excludes[@]}"; do
        if [[ "$relative_path" == $pattern ]]; then
            return 0
        fi
    done
    
    # 检查 .gitignore 生成的排除模式
    if [ -f "$exclude_file" ]; then
        while IFS= read -r pattern; do
            [[ "$pattern" =~ ^#.*$ ]] && continue
            [[ -z "$pattern" ]] && continue
            
            pattern=$(echo "$pattern" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            [ -z "$pattern" ] && continue
            
            # 检查模式匹配
            if [[ "$relative_path" == $pattern ]] || \
               [[ "$relative_path" == $pattern* ]] || \
               [[ "$relative_path" == */$pattern ]] || \
               [[ "$relative_path" == */$pattern/* ]]; then
                return 0
            fi
        done < "$exclude_file"
    fi
    
    return 1
}

# 生成排除规则缓存
generate_exclude_cache() {
    local project_root="$1"
    local exclude_file="$2"
    local cache_file="$3"
    
    log_message "INFO" "Generating exclude cache..."
    
    # 查找所有应该被排除的文件和目录
    find "$project_root" -type d \( -name "node_modules" -o -name "dist" -o -name ".git" \) 2>/dev/null | \
    while read -r dir; do
        echo "${dir#$project_root/}/"
    done > "$cache_file"
    
    log_message "INFO" "Exclude cache generated: $cache_file"
}

# 主函数
main() {
    local action="$1"
    shift
    
    case "$action" in
        "parse")
            parse_gitignore "$GITIGNORE_FILE" "$EXCLUDE_FILE"
            ;;
        "check")
            local file_path="$1"
            if [ -z "$file_path" ]; then
                log_message "ERROR" "Usage: $0 check <file_path>"
                exit 1
            fi
            if should_exclude "$file_path" "$PROJECT_ROOT" "$EXCLUDE_FILE"; then
                echo "EXCLUDE"
                exit 0
            else
                echo "INCLUDE"
                exit 1
            fi
            ;;
        "cache")
            generate_exclude_cache "$PROJECT_ROOT" "$EXCLUDE_FILE" "$SCAN_CACHE_DIR/exclude_patterns.cache"
            ;;
        "list")
            if [ -f "$EXCLUDE_FILE" ]; then
                echo "Generated exclude patterns:"
                echo "=========================="
                grep -v '^#' "$EXCLUDE_FILE" | grep -v '^$'
            else
                log_message "ERROR" "No exclude file found. Run 'parse' first."
                exit 1
            fi
            ;;
        "clean")
            rm -f "$EXCLUDE_FILE"
            rm -f "$SCAN_CACHE_DIR/exclude_patterns.cache"
            log_message "INFO" "Cleaned exclude files and cache"
            ;;
        "update")
            parse_gitignore "$GITIGNORE_FILE" "$EXCLUDE_FILE"
            generate_exclude_cache "$PROJECT_ROOT" "$EXCLUDE_FILE" "$SCAN_CACHE_DIR/exclude_patterns.cache"
            ;;
        *)
            echo "Gitignore Parser for Scanner"
            echo "==========================="
            echo "Usage: $0 {parse|check|cache|list|clean|update} [args]"
            echo ""
            echo "Commands:"
            echo "  parse          Parse .gitignore and generate exclude patterns"
            echo "  check <path>   Check if a path should be excluded"
            echo "  cache          Generate exclude cache for faster scanning"
            echo "  list           List current exclude patterns"
            echo "  clean          Clean generated exclude files"
            echo "  update         Parse .gitignore and generate cache"
            echo ""
            echo "Files:"
            echo "  .gitignore          Source ignore patterns"
            echo "  .claude/scan-exclude.txt  Generated scan exclusions"
            echo "  .claude/cache/exclude_patterns.cache  Exclude cache"
            exit 1
            ;;
    esac
}

# 执行主函数
main "$@"