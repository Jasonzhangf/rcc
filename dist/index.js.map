{"version":3,"file":"index.js","sources":["../src/commands/stop.ts","../src/commands/code.ts","../src/commands/restart.ts","../src/index.ts"],"sourcesContent":["import { CLICommand } from '../types/cli-types';\n\nconst stopCommand: CLICommand = {\n  name: 'stop',\n  description: 'Stop RCC services',\n  options: [\n    {\n      name: 'port',\n      alias: 'p',\n      description: 'Port number to stop',\n      type: 'number',\n      required: false,\n    },\n  ],\n  examples: ['rcc stop --port 4008', 'rcc stop -p 4008'],\n  async execute({ args, options, logger }) {\n    const port = options.port || 4008; // Default port 4008\n\n    try {\n      // Check if PID file exists for this port\n      const pidFile = `.rcc/pid-${port}.json`;\n      const fs = await import('fs/promises');\n\n      if (await fs.access(pidFile).catch(() => false)) {\n        const pidData = JSON.parse(await fs.readFile(pidFile, 'utf-8'));\n        const pid = pidData.pid;\n\n        // Kill the process\n        process.kill(pid, 'SIGTERM');\n\n        // Remove PID file\n        await fs.unlink(pidFile);\n\n        logger.info(`Successfully stopped RCC service on port ${port}`);\n      } else {\n        logger.warn(`No RCC service found running on port ${port}`);\n      }\n    } catch (error) {\n      logger.error(`Failed to stop RCC service on port ${port}:`, error);\n      throw error;\n    }\n  },\n};\n\nexport default stopCommand;\n","import { CLICommand } from '../types/cli-types';\n\nconst codeCommand: CLICommand = {\n  name: 'code',\n  description: 'Configure local environment and call Claude',\n  options: [\n    {\n      name: 'port',\n      alias: 'p',\n      description: 'Port number to use',\n      type: 'number',\n      required: false,\n    },\n    {\n      name: 'config',\n      alias: 'c',\n      description: 'Configuration file path',\n      type: 'string',\n      required: false,\n    },\n  ],\n  examples: [\n    'rcc code',\n    'rcc code --port 4008',\n    'rcc code --config ~/.route-claudecode/config/v4/single-provider/lmstudio-v4-4008.json',\n  ],\n  async execute({ args, options, logger }) {\n    const port = options.port || 4008; // Default port 4008\n    const configPath =\n      options.config || `~/.route-claudecode/config/v4/single-provider/lmstudio-v4-${port}.json`;\n\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n      const { spawn } = await import('child_process');\n\n      // Check if service is already running\n      const pidFile = `.rcc/pid-${port}.json`;\n      let serviceRunning = false;\n\n      if (await fs.access(pidFile).catch(() => false)) {\n        try {\n          const pidData = JSON.parse(await fs.readFile(pidFile, 'utf-8'));\n          process.kill(pidData.pid, 0); // Check if process is running\n          serviceRunning = true;\n          logger.info(`RCC service already running on port ${port}`);\n        } catch (error) {\n          // Process not running, remove stale PID file\n          await fs.unlink(pidFile);\n        }\n      }\n\n      // Start service if not running\n      if (!serviceRunning) {\n        logger.info(`Starting RCC service on port ${port}...`);\n\n        // Ensure .rcc directory exists\n        await fs.mkdir('.rcc', { recursive: true });\n\n        // Start the service\n        const child = spawn(\n          'node',\n          ['start-rcc-system.mjs', '--config', configPath, '--port', port],\n          {\n            detached: true,\n            stdio: 'ignore',\n          }\n        );\n\n        // Create PID file\n        const pidData = {\n          pid: child.pid,\n          configPath,\n          startTime: new Date().toISOString(),\n        };\n        await fs.writeFile(pidFile, JSON.stringify(pidData, null, 2));\n\n        child.unref();\n        logger.info(`RCC service started on port ${port} with PID ${child.pid}`);\n\n        // Wait a moment for service to start\n        await new Promise((resolve) => setTimeout(resolve, 2000));\n      }\n\n      // Configure environment and call Claude\n      logger.info('Configuring local environment for Claude...');\n\n      // Set environment variables\n      process.env.ANTHROPIC_BASE_URL = `http://localhost:${port}`;\n      process.env.ANTHROPIC_API_KEY = 'rcc4-proxy-key';\n\n      // Execute Claude command\n      const claudeArgs = args.length > 0 ? args : ['--print', '列出本目录中所有文件夹'];\n\n      logger.info(`Executing Claude with args: ${claudeArgs.join(' ')}`);\n\n      const claudeProcess = spawn('claude', claudeArgs, {\n        stdio: 'inherit',\n        env: {\n          ...process.env,\n          ANTHROPIC_BASE_URL: `http://localhost:${port}`,\n          ANTHROPIC_API_KEY: 'rcc4-proxy-key',\n        },\n      });\n\n      // Wait for Claude to complete\n      await new Promise((resolve, reject) => {\n        claudeProcess.on('exit', (code) => {\n          if (code === 0) {\n            resolve(code);\n          } else {\n            reject(new Error(`Claude exited with code ${code}`));\n          }\n        });\n\n        claudeProcess.on('error', reject);\n      });\n\n      logger.info('Claude execution completed');\n    } catch (error) {\n      logger.error('Failed to execute code command:', error);\n      throw error;\n    }\n  },\n};\n\nexport default codeCommand;\n","import { CLICommand } from '../types/cli-types';\n\nconst restartCommand: CLICommand = {\n  name: 'restart',\n  description: 'Restart all running RCC services',\n  options: [],\n  examples: ['rcc restart'],\n  async execute({ args, options, logger }) {\n    try {\n      const fs = await import('fs/promises');\n      const path = await import('path');\n\n      // Find all PID files in .rcc directory\n      const pidDir = '.rcc';\n      const restartTasks = [];\n\n      if (await fs.access(pidDir).catch(() => false)) {\n        const files = await fs.readdir(pidDir);\n        const pidFiles = files.filter((file) => file.startsWith('pid-') && file.endsWith('.json'));\n\n        logger.info(`Found ${pidFiles.length} running services to restart`);\n\n        for (const pidFile of pidFiles) {\n          const port = pidFile.replace('pid-', '').replace('.json', '');\n          const pidFilePath = path.join(pidDir, pidFile);\n\n          restartTasks.push(async () => {\n            try {\n              // Read PID file\n              const pidData = JSON.parse(await fs.readFile(pidFilePath, 'utf-8'));\n              const pid = pidData.pid;\n              const configPath = pidData.configPath;\n\n              // Stop the service\n              process.kill(pid, 'SIGTERM');\n\n              // Remove old PID file\n              await fs.unlink(pidFilePath);\n\n              logger.info(`Stopped service on port ${port}`);\n\n              // Restart the service\n              const { spawn } = await import('child_process');\n              const child = spawn(\n                'node',\n                ['start-rcc-system.mjs', '--config', configPath, '--port', port],\n                {\n                  detached: true,\n                  stdio: 'ignore',\n                }\n              );\n\n              // Create new PID file\n              const newPidData = {\n                pid: child.pid,\n                configPath,\n                startTime: new Date().toISOString(),\n              };\n              await fs.writeFile(pidFilePath, JSON.stringify(newPidData, null, 2));\n\n              child.unref();\n              logger.info(`Restarted service on port ${port} with PID ${child.pid}`);\n            } catch (error) {\n              logger.error(`Failed to restart service on port ${port}:`, error);\n            }\n          });\n        }\n\n        // Execute restart tasks in parallel\n        await Promise.all(restartTasks.map((task) => task()));\n\n        logger.info('All services have been restarted');\n      } else {\n        logger.info('No running services found to restart');\n      }\n    } catch (error) {\n      logger.error('Failed to restart services:', error);\n      throw error;\n    }\n  },\n};\n\nexport default restartCommand;\n","import stopCommand from './commands/stop';\nimport codeCommand from './commands/code';\nimport restartCommand from './commands/restart';\nimport * as CLI_TYPES from './types/cli-types';\n\nexport { stopCommand, codeCommand, restartCommand, CLI_TYPES };\n\n// Default CLI engine configuration\nexport const defaultCLIConfig = {\n  name: 'rcc',\n  version: '1.0.0',\n  description: 'RCC Command Line Interface Framework',\n  commandDiscovery: {\n    commandDirs: [\n      // Built-in commands\n      import.meta.url + '/commands',\n      // Project-specific commands\n      process.cwd() + '/commands',\n      process.cwd() + '/src/commands',\n    ],\n    modulePatterns: ['rcc-command-*', '@rcc/command-*'],\n    autoLoad: true,\n    watchForChanges: process.env.NODE_ENV === 'development',\n  },\n  defaultCommand: 'help',\n};\n"],"names":[],"mappings":"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"}