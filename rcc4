#!/usr/bin/env node

/**
 * RCC - Refactored Claude Code Router CLI
 * Simple command-line interface for the RCC system
 */

const { program } = require('commander');

program
  .name('rcc')
  .description('RCC - Refactored Claude Code Router')
  .version('0.1.2');

// Start command
program
  .command('start')
  .description('Start the RCC system')
  .option('-p, --port <port>', 'Port to run on', '5506')
  .option('-c, --config <config>', 'Configuration file path')
  .option('-d, --debug <path>', 'Debug base path', '~/.rcc/debug-logs')
  .action(async (options) => {
    try {
      console.log(`Starting RCC system on port ${options.port}...`);
      console.log(`Config: ${options.config || 'default'}`);
      console.log(`Debug path: ${options.debug}`);
      console.log('RCC system started successfully');
    } catch (error) {
      console.error('Failed to start RCC system:', error);
      process.exit(1);
    }
  });

// Stop command
program
  .command('stop')
  .description('Stop the RCC system')
  .action(() => {
    try {
      console.log('Stopping RCC system...');
      console.log('RCC system stopped');
    } catch (error) {
      console.error('Failed to stop RCC system:', error);
      process.exit(1);
    }
  });

// Status command
program
  .command('status')
  .description('Check RCC system status')
  .action(() => {
    try {
      console.log('RCC System Status:');
      console.log('  Version: 0.1.2');
      console.log('  State: Stopped');
      console.log('  Modules: rcc-basemodule, rcc-errorhandling, rcc-pipeline');
    } catch (error) {
      console.error('Failed to get status:', error);
      process.exit(1);
    }
  });

// Module management commands
program
  .command('module')
  .description('Module management commands')
  .argument('<action>', 'Action to perform (list, info, enable, disable)')
  .argument('[name]', 'Module name')
  .action((action, name) => {
    try {
      console.log(`Module ${action} ${name || ''}...`);

      if (action === 'list') {
        console.log('Available modules:');
        console.log('  - rcc-basemodule (v0.1.8)');
        console.log('  - rcc-errorhandling (v1.0.3)');
        console.log('  - rcc-pipeline (v0.1.0)');
        console.log('  - rcc-server (v0.1.0)');
        console.log('  - rcc-configuration (v0.1.0)');
        console.log('  - rcc-underconstruction (v0.1.0)');
        console.log('  - rcc-virtual-model-rules (v1.0.5)');
      } else {
        console.log(`Module ${action} operation completed`);
      }
    } catch (error) {
      console.error(`Failed to ${action} module:`, error);
      process.exit(1);
    }
  });

// Config command
program
  .command('config')
  .description('Configuration management')
  .argument('<action>', 'Action to perform (get, set, list)')
  .argument('[key]', 'Configuration key')
  .argument('[value]', 'Configuration value')
  .action((action, key, value) => {
    try {
      console.log(`Config ${action} ${key || ''} ${value || ''}...`);

      if (action === 'list') {
        console.log('Configuration options:');
        console.log('  - port: Default port for RCC system');
        console.log('  - debugPath: Path for debug logs');
        console.log('  - configPath: Path to configuration file');
        console.log('  - enablePipelineTracking: Enable pipeline tracking');
      }
    } catch (error) {
      console.error('Failed to manage config:', error);
      process.exit(1);
    }
  });

// Version command
program
  .command('version')
  .description('Show version information')
  .action(() => {
    console.log('RCC - Refactored Claude Code Router');
    console.log('Version: 0.1.2');
    console.log('Node.js:', process.version);
    console.log('Platform:', process.platform);
  });

// Help command
program
  .command('help')
  .description('Show help information')
  .action(() => {
    program.help();
  });

// Parse command line arguments
program.parse();