{"version":3,"file":"index.esm.js","sources":["../src/interfaces/Debug.ts","../src/interfaces/SharedTypes.ts","../src/recording/RecordingManager.ts","../src/recording/CycleRecorder.ts","../src/recording/ErrorRecorder.ts","../src/recording/FieldTruncator.ts","../src/recording/RequestContextManager.ts","../src/recording/GlobalConfigManager.ts","../src/recording/ConfigValidator.ts","../src/recording/PathResolver.ts","../src/MessageCenter.ts","../src/debug/DebugEventBus.ts","../src/BaseModule.ts"],"sourcesContent":["/**\n * Interface for debug module\n */\nexport interface IDebugModule {\n  /**\n   * Log a message\n   * @param message - Message to log\n   * @param level - Log level (optional)\n   * @param moduleInfo - Module information (optional)\n   */\n  log(message: string, level?: number, moduleInfo?: any): void;\n\n  /**\n   * Record data flow between modules\n   * @param sourceModuleId - Source module ID\n   * @param targetModuleId - Target module ID\n   * @param data - Data being transferred\n   */\n  recordDataFlow(sourceModuleId: string, targetModuleId: string, data: any): void;\n\n  /**\n   * Add module connection\n   * @param moduleId - Module ID\n   * @param connectionType - Connection type\n   */\n  addModuleConnection(moduleId: string, connectionType: 'input' | 'output'): void;\n\n  /**\n   * Remove module connection\n   * @param moduleId - Module ID\n   */\n  removeModuleConnection(moduleId: string): void;\n}\n\n/**\n * Debug level enumeration\n */\nexport enum DebugLevel {\n  ERROR = 0,\n  WARN = 1,\n  INFO = 2,\n  DEBUG = 3,\n  TRACE = 4,\n}\n\n/**\n * Debug log entry interface\n */\nexport interface DebugLogEntry {\n  message: string;\n  level: DebugLevel;\n  timestamp: number;\n  moduleId?: string;\n  metadata?: any;\n}\n\n/**\n * Debug configuration interface\n */\nexport interface DebugConfig {\n  enabled: boolean;\n  level: DebugLevel;\n  maxEntries: number;\n  includeTimestamps: boolean;\n  includeModuleInfo: boolean;\n}\n","// Shared type definitions to avoid circular dependencies\n\n// Error type alias for consistency\nexport type AppError = Error;\n\nexport interface ModuleSource {\n  moduleId: string;\n  moduleName: string;\n  version: string;\n  fileName?: string;\n  lineNumber?: number;\n  stackTrace?: string;\n}\n\nexport interface ErrorClassification {\n  source: ErrorSource;\n  type: ErrorType;\n  severity: ErrorSeverity;\n  impact: ErrorImpact;\n  recoverability: ErrorRecoverability;\n}\n\nexport interface ErrorHandlingConfig {\n  queueSize?: number;\n  flushInterval?: number;\n  enableBatchProcessing?: boolean;\n  maxBatchSize?: number;\n  enableCompression?: boolean;\n  enableMetrics?: boolean;\n  enableLogging?: boolean;\n  logLevel?: string;\n  retryPolicy?: RetryPolicy;\n  circuitBreaker?: CircuitBreakerConfig;\n}\n\nexport interface RetryPolicy {\n  maxRetries: number;\n  retryDelay: number;\n  backoffMultiplier: number;\n  maxRetryDelay: number;\n}\n\nexport interface CircuitBreakerConfig {\n  failureThreshold: number;\n  recoveryTime: number;\n  requestVolumeThreshold: number;\n}\n\nexport interface HandlingResult {\n  status: HandlingStatus;\n  message: string;\n  details: string;\n  code: string;\n  metrics?: HandlingMetrics;\n}\n\nexport interface HandlingMetrics {\n  retryCount: number;\n  processingStartTime: number;\n  processingEndTime: number;\n  memoryUsage: number;\n  cpuUsage?: number;\n  networkCalls?: number;\n}\n\nexport interface ResponseData {\n  moduleName: string;\n  moduleId: string;\n  response: any;\n  config: ErrorHandlingConfig;\n  metadata: Record<string, any>;\n}\n\nexport interface RelatedInfo {\n  errorId?: string;\n  moduleIds?: string[];\n  componentIds?: string[];\n  dependencies?: string[];\n  customFields?: Record<string, any>;\n}\n\nexport interface ErrorContext {\n  errorId: string;\n  error: AppError;\n  timestamp: Date;\n  source: ModuleSource;\n  classification: ErrorClassification;\n  data: Record<string, any>;\n  config: ErrorHandlingConfig;\n  callback?: (response: ErrorResponse) => void;\n}\n\nexport interface ErrorResponse {\n  responseId: string;\n  errorId: string;\n  result: HandlingResult;\n  timestamp: Date;\n  processingTime: number;\n  data: ResponseData;\n  actions: Action[];\n  annotations: ModuleAnnotation[];\n}\n\nexport interface ModuleResponse {\n  responseId: string;\n  moduleId: string;\n  moduleName: string;\n  timestamp: Date;\n  status: ResponseStatus;\n  data: ModuleResponseData;\n  actions: ResponseAction[];\n  annotations: ResponseAnnotation[];\n  metadata: ResponseMetadata;\n}\n\nexport interface ModuleResponseData {\n  message: string;\n  details?: string;\n  result?: any;\n  error?: any;\n  config?: Record<string, any>;\n  context?: Record<string, any>;\n}\n\nexport interface ResponseAction {\n  actionId: string;\n  type: ResponseActionType;\n  description: string;\n  parameters: Record<string, any>;\n  priority: ActionPriority;\n  status: ResponseStatus;\n  executionTime: number;\n  timestamp: Date;\n}\n\nexport interface ResponseAnnotation {\n  annotationId: string;\n  type: AnnotationType;\n  content: string;\n  timestamp: Date;\n  moduleRef: string;\n  context?: Record<string, any>;\n}\n\nexport interface ResponseMetadata {\n  processingTime: number;\n  retryCount: number;\n  attempts: number;\n  memoryUsed: number;\n  cpuUsed?: number;\n  version: string;\n  environment: string;\n}\n\nexport interface Action {\n  actionId: string;\n  type: ActionType;\n  target: string;\n  payload: Record<string, any>;\n  priority: ActionPriority;\n  status: ActionStatus;\n  timestamp: Date;\n}\n\nexport interface ModuleRegistration {\n  moduleId: string;\n  moduleName: string;\n  moduleType: string;\n  version: string;\n  config: ErrorHandlingConfig;\n  capabilities: string[];\n  dependencies?: string[];\n  metadata?: Record<string, any>;\n  errorPolicies?: any[];\n  customRules?: any[];\n  responseHandler?: ResponseHandler;\n}\n\nexport interface ResponseHandler {\n  handleId: string;\n  name: string;\n  priority: number;\n  isEnabled: boolean;\n  conditions: RouteCondition[];\n  execute: (context: ErrorContext) => Promise<ErrorResponse>;\n  config?: Record<string, any>;\n}\n\nexport interface RouteCondition {\n  moduleIds?: string[];\n  errorTypes?: ErrorType[];\n  severities?: ErrorSeverity[];\n  priorities?: ActionPriority[];\n  custom?: Record<string, any>;\n}\n\nexport interface ModuleAnnotation {\n  annotationId: string;\n  moduleInfo: any; // Using any to avoid circular dependency\n  type: AnnotationType;\n  content: string;\n  createdAt: Date;\n  createdBy: string;\n  related: RelatedInfo;\n}\n\n// Enums\nexport enum ErrorSource {\n  MODULE = 'module',\n  SYSTEM = 'system',\n  EXTERNAL = 'external',\n  NETWORK = 'network',\n  UNKNOWN = 'unknown',\n}\n\nexport enum ErrorType {\n  BUSINESS = 'business',\n  TECHNICAL = 'technical',\n  CONFIGURATION = 'configuration',\n  RESOURCE = 'resource',\n  DEPENDENCY = 'dependency',\n}\n\nexport enum ErrorSeverity {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low',\n}\n\nexport enum ErrorImpact {\n  SINGLE_MODULE = 'single_module',\n  MULTIPLE_MODULE = 'multiple_module',\n  SYSTEM_WIDE = 'system_wide',\n}\n\nexport enum ErrorRecoverability {\n  RECOVERABLE = 'recoverable',\n  NON_RECOVERABLE = 'non_recoverable',\n  AUTO_RECOVERABLE = 'auto_recoverable',\n}\n\nexport enum ResponseStatus {\n  PENDING = 'pending',\n  IN_PROGRESS = 'in_progress',\n  SUCCESS = 'success',\n  FAILURE = 'failure',\n  RETRY = 'retry',\n  FALLENBACK = 'fallback',\n  CANCELLED = 'cancelled',\n}\n\nexport enum ResponseActionType {\n  RETRY = 'retry',\n  FALLBACK = 'fallback',\n  LOG = 'log',\n  NOTIFY = 'notify',\n  ISOLATE = 'isolate',\n  RESTART = 'restart',\n  CUSTOM = 'custom',\n}\n\n// ResponsePriority removed - use ActionPriority instead\n\nexport enum PolicyType {\n  RETRY = 'retry',\n  FALLBACK = 'fallback',\n  ISOLATION = 'isolation',\n  NOTIFICATION = 'notification',\n  CUSTOM = 'custom',\n}\n\nexport enum RuleType {\n  ROUTING = 'routing',\n  FILTERING = 'filtering',\n  TRANSFORMATION = 'transformation',\n  CUSTOM = 'custom',\n}\n\nexport enum ConditionOperator {\n  EQUALS = 'equals',\n  NOT_EQUALS = 'not_equals',\n  CONTAINS = 'contains',\n  NOT_CONTAINS = 'not_contains',\n  GREATER_THAN = 'greater_than',\n  LESS_THAN = 'less_than',\n  IN = 'in',\n  NOT_IN = 'not_in',\n  REGEX = 'regex',\n  CUSTOM = 'custom',\n}\n\nexport enum LogicalOperator {\n  AND = 'and',\n  OR = 'or',\n}\n\nexport enum ActionType {\n  RETRY = 'retry',\n  FALLBACK = 'fallback',\n  LOG = 'log',\n  NOTIFY = 'notify',\n  ISOLATE = 'isolate',\n  RESTART = 'restart',\n  CUSTOM = 'custom',\n}\n\nexport enum AnnotationType {\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n  DEBUG = 'debug',\n  CUSTOM = 'custom',\n}\n\nexport enum HandlingStatus {\n  SUCCESS = 'success',\n  FAILURE = 'failure',\n  PARTIAL = 'partial',\n  RETRY = 'retry',\n  FALLENBACK = 'fallback',\n}\n\nexport enum ActionStatus {\n  PENDING = 'pending',\n  IN_PROGRESS = 'in_progress',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled',\n}\n\nexport enum ActionPriority {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low',\n}\n\n// Re-export ModuleInfo at the end to avoid circular dependencies\nexport type { ModuleInfo } from './ModuleInfo';\n","import {\n  BaseModuleRecordingConfig,\n  GlobalRecordingConfig,\n  RequestContext,\n  CycleHandle,\n  ErrorRecord,\n  TruncationReport,\n  ConfigUpdateResult,\n  ConfigSyncResult,\n  ConsistencyValidationResult,\n  BaseModuleOptions,\n  ModuleRecordingConfig\n} from '../interfaces/Recording';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DebugLevel } from '../interfaces/Debug';\n\n/**\n * Core recording manager that coordinates all recording components\n */\nexport class RecordingManager {\n  private config: BaseModuleRecordingConfig;\n  private globalConfig: GlobalRecordingConfig | null = null;\n  private activeRequests: Map<string, RequestContext> = new Map();\n  private activeCycles: Map<string, CycleHandle> = new Map();\n  private errorRecords: Map<string, ErrorRecord> = new Map();\n  private configChangeCallbacks: Set<(config: BaseModuleRecordingConfig) => Promise<void> | void> = new Set();\n  private truncationStats: Map<string, number> = new Map();\n\n  constructor(config: BaseModuleRecordingConfig = {}) {\n    this.config = this.validateConfig(config);\n    this.initializeGlobalConfig();\n  }\n\n  // ========================================\n  // Configuration Management\n  // ========================================\n\n  /**\n   * Update recording configuration\n   */\n  async updateConfig(newConfig: Partial<BaseModuleRecordingConfig>, force = false): Promise<ConfigUpdateResult> {\n    try {\n      const oldConfig = { ...this.config };\n\n      // Validate configuration before applying\n      const validationError = this.validateConfiguration({ ...this.config, ...newConfig });\n      if (validationError && !force) {\n        return {\n          success: false,\n          errors: [validationError],\n          requiresForce: true\n        };\n      }\n\n      this.config = this.validateConfig({ ...this.config, ...newConfig });\n\n      // Validate consistency\n      const consistencyResult = this.validateConfigurationConsistency();\n      if (!consistencyResult.valid && !force) {\n        return {\n          success: false,\n          errors: consistencyResult.errors,\n          requiresForce: true\n        };\n      }\n\n      // Update global config if needed\n      if (newConfig.globalConfig) {\n        this.globalConfig = {\n          ...this.globalConfig!,\n          ...newConfig.globalConfig\n        };\n      }\n\n      // Notify all callbacks\n      await this.notifyConfigChange(this.config);\n\n      return {\n        success: true,\n        configVersion: this.globalConfig?.configVersion\n      };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n\n  /**\n   * Synchronize configuration across modules\n   */\n  async syncConfiguration(moduleConfigs: Record<string, BaseModuleRecordingConfig>): Promise<ConfigSyncResult> {\n    const moduleResults: Record<string, boolean> = {};\n\n    for (const [moduleId, config] of Object.entries(moduleConfigs)) {\n      try {\n        const result = await this.updateConfig(config, true);\n        moduleResults[moduleId] = result.success;\n      } catch (error) {\n        moduleResults[moduleId] = false;\n      }\n    }\n\n    return {\n      success: Object.values(moduleResults).every(success => success),\n      moduleResults\n    };\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): BaseModuleRecordingConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Get global configuration\n   */\n  getGlobalConfig(): GlobalRecordingConfig | null {\n    return this.globalConfig ? { ...this.globalConfig } : null;\n  }\n\n  // ========================================\n  // Request Context Management\n  // ========================================\n\n  /**\n   * Create new request context\n   */\n  createRequestContext(options: {\n    customConfig?: Partial<BaseModuleRecordingConfig>;\n    inheritContext?: string;\n    createNewContext?: boolean;\n  } = {}): RequestContext {\n    const requestId = options.inheritContext || uuidv4();\n    const sessionId = this.globalConfig?.sessionId || uuidv4();\n    const traceId = uuidv4();\n    const chainId = options.inheritContext ? this.getRequestContext(options.inheritContext)?.chainId || uuidv4() : uuidv4();\n\n    let context: RequestContext;\n\n    if (options.inheritContext && this.activeRequests.has(options.inheritContext)) {\n      // Inherit from existing context\n      const existing = this.activeRequests.get(options.inheritContext)!;\n      context = {\n        ...existing,\n        currentModule: this.extractModuleName(options.customConfig?.module) || 'unknown',\n        moduleStack: [...existing.moduleStack, this.extractModuleName(options.customConfig?.module) || 'unknown']\n      };\n    } else {\n      // Create new context\n      const basePath = this.resolveBasePath(options.customConfig);\n      context = {\n        requestId,\n        sessionId,\n        traceId,\n        chainId,\n        startModule: this.extractModuleName(options.customConfig?.module) || 'unknown',\n        startTime: Date.now(),\n        basePath,\n        currentPath: basePath,\n        pathHistory: [],\n        configSnapshot: this.createConfigSnapshot(options.customConfig),\n        sharedData: new Map(),\n        status: 'active',\n        currentModule: this.extractModuleName(options.customConfig?.module) || 'unknown',\n        moduleStack: [this.extractModuleName(options.customConfig?.module) || 'unknown']\n      };\n    }\n\n    this.activeRequests.set(requestId, context);\n    return context;\n  }\n\n  /**\n   * Get request context\n   */\n  getRequestContext(requestId: string): RequestContext | undefined {\n    return this.activeRequests.get(requestId);\n  }\n\n  /**\n   * Update request context\n   */\n  updateRequestContext(requestId: string, updates: Partial<RequestContext>): boolean {\n    const context = this.activeRequests.get(requestId);\n    if (!context) return false;\n\n    // Store original path for history tracking\n    const originalPath = context.currentPath;\n\n    // Apply updates\n    Object.assign(context, updates);\n\n    // Update path history if path changed\n    if (updates.currentPath && updates.currentPath !== originalPath) {\n      context.pathHistory.push({\n        moduleId: updates.currentModule || context.currentModule,\n        path: updates.currentPath,\n        timestamp: Date.now()\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * Complete request context\n   */\n  completeRequestContext(requestId: string, status: 'completed' | 'error' = 'completed'): boolean {\n    const context = this.activeRequests.get(requestId);\n    if (!context) return false;\n\n    context.status = status;\n    context.moduleStack = context.moduleStack.filter(module => module !== context.currentModule);\n\n    // Generate trace report\n    const report = this.generateTraceReport(context);\n    this.saveTraceReport(report);\n\n    this.activeRequests.delete(requestId);\n    return true;\n  }\n\n  // ========================================\n  // Cycle Recording Management\n  // ========================================\n\n  /**\n   * Start cycle recording\n   */\n  startCycleRecording(requestId: string, operation: string, module: string): CycleHandle | null {\n    if (!this.config.cycle?.enabled) return null;\n\n    const context = this.getRequestContext(requestId);\n    if (!context) return null;\n\n    const cycleId = uuidv4();\n    const basePath = this.resolveCyclePath(context, cycleId);\n    const format = this.config.cycle.format || 'json';\n\n    const handle: CycleHandle = {\n      cycleId,\n      operation,\n      startTime: Date.now(),\n      module,\n      basePath,\n      format\n    };\n\n    this.activeCycles.set(cycleId, handle);\n\n    // Create initial cycle record\n    this.recordCycleEvent(handle, {\n      index: 0,\n      type: 'start',\n      module,\n      operation,\n      timestamp: Date.now(),\n      cycleId,\n      traceId: context.traceId,\n      requestId\n    });\n\n    return handle;\n  }\n\n  /**\n   * Record cycle event\n   */\n  recordCycleEvent(handle: CycleHandle, event: {\n    index: number;\n    type: 'start' | 'middle' | 'end';\n    module: string;\n    operation?: string;\n    phase?: string;\n    data?: any;\n    result?: any;\n    error?: string;\n    timestamp: number;\n    cycleId: string;\n    traceId?: string;\n    requestId?: string;\n  }): boolean {\n    if (!this.config.cycle?.enabled) return false;\n\n    try {\n      // Apply field truncation if enabled\n      let eventData = { ...event };\n      if (this.config.truncation?.enabled) {\n        eventData = this.truncateFields(eventData, 'cycle');\n      }\n\n      // Save to file based on format\n      const filePath = this.resolveCycleFilePath(handle, event.type);\n      this.writeCycleRecord(filePath, eventData, handle.format);\n\n      return true;\n    } catch (error) {\n      this.logError('Failed to record cycle event', error);\n      return false;\n    }\n  }\n\n  /**\n   * End cycle recording\n   */\n  endCycleRecording(handle: CycleHandle, result?: any, error?: string): boolean {\n    if (!this.activeCycles.has(handle.cycleId)) return false;\n\n    try {\n      const context = handle.requestId ? this.getRequestContext(handle.requestId) : undefined;\n      this.recordCycleEvent(handle, {\n        index: -1,\n        type: 'end',\n        module: handle.module,\n        operation: handle.operation,\n        result,\n        error,\n        timestamp: Date.now(),\n        cycleId: handle.cycleId,\n        traceId: context?.traceId,\n        requestId: handle.requestId\n      });\n\n      // Generate summary\n      this.generateCycleSummary(handle);\n\n      this.activeCycles.delete(handle.cycleId);\n      return true;\n    } catch (error) {\n      this.logError('Failed to end cycle recording', error);\n      return false;\n    }\n  }\n\n  // ========================================\n  // Error Recording Management\n  // ========================================\n\n  /**\n   * Record error\n   */\n  recordError(errorData: {\n    error: Error | string;\n    level?: 'trace' | 'debug' | 'info' | 'warning' | 'error' | 'fatal';\n    category?: 'network' | 'validation' | 'processing' | 'system' | 'security' | 'business';\n    operation?: string;\n    context?: Record<string, any>;\n    recoverable?: boolean;\n    cycleId?: string;\n  }): string {\n    if (!this.config.error?.enabled) return '';\n\n    const errorId = uuidv4();\n    const context = this.findRequestContext(errorData.cycleId);\n\n    const record: ErrorRecord = {\n      errorId,\n      cycleId: errorData.cycleId,\n      module: errorData.context?.module || 'unknown',\n      category: errorData.category || 'system',\n      level: errorData.level || 'error',\n      timestamp: Date.now(),\n      message: typeof errorData.error === 'string' ? errorData.error : errorData.error.message,\n      stack: typeof errorData.error === 'object' ? errorData.error.stack : undefined,\n      context: errorData.context,\n      operation: errorData.operation,\n      recoverable: errorData.recoverable ?? true,\n      resolved: false,\n      filePath: this.resolveErrorPath(errorId)\n    };\n\n    this.errorRecords.set(errorId, record);\n    this.writeErrorRecord(record);\n\n    return errorId;\n  }\n\n  /**\n   * Get error records\n   */\n  getErrorRecords(filters?: {\n    level?: ('trace' | 'debug' | 'info' | 'warning' | 'error' | 'fatal')[];\n    category?: ('network' | 'validation' | 'processing' | 'system' | 'security' | 'business')[];\n    module?: string;\n    resolved?: boolean;\n    timeRange?: { start: number; end: number };\n    operation?: string;\n  }): ErrorRecord[] {\n    let records = Array.from(this.errorRecords.values());\n\n    if (filters) {\n      records = records.filter(record => {\n        if (filters.level && !filters.level.includes(record.level)) return false;\n        if (filters.category && !filters.category.includes(record.category)) return false;\n        if (filters.module && record.module !== filters.module) return false;\n        if (filters.resolved !== undefined && record.resolved !== filters.resolved) return false;\n        if (filters.timeRange) {\n          if (record.timestamp < filters.timeRange.start || record.timestamp > filters.timeRange.end) return false;\n        }\n        if (filters.operation && record.operation !== filters.operation) return false;\n        return true;\n      });\n    }\n\n    return records.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  /**\n   * Resolve error\n   */\n  resolveError(errorId: string, resolution: string): boolean {\n    const record = this.errorRecords.get(errorId);\n    if (!record) return false;\n\n    record.resolved = true;\n    record.resolution = resolution;\n    this.writeErrorRecord(record);\n\n    return true;\n  }\n\n  // ========================================\n  // Field Truncation Management\n  // ========================================\n\n  /**\n   * Truncate fields in data object\n   */\n  truncateFields(data: any, context: string): any {\n    if (!this.config.truncation?.enabled) return data;\n\n    const truncationConfig = this.config.truncation;\n    const stats = {\n      totalProcessed: 0,\n      totalTruncated: 0,\n      totalReplaced: 0,\n      totalHidden: 0,\n      fieldStats: new Map<string, { processed: number; truncated: number; replaced: number; hidden: number }>()\n    };\n\n    const result = this.truncateFieldsRecursive(data, '', truncationConfig, stats, context);\n\n    // Update truncation statistics\n    this.updateTruncationStats(stats);\n\n    return result;\n  }\n\n  /**\n   * Get truncation statistics\n   */\n  getTruncationStats(): TruncationReport {\n    const totalProcessed = this.truncationStats.get('totalProcessed') || 0;\n    const totalTruncated = this.truncationStats.get('totalTruncated') || 0;\n    const totalReplaced = this.truncationStats.get('totalReplaced') || 0;\n    const totalHidden = this.truncationStats.get('totalHidden') || 0;\n\n    return {\n      totalProcessed,\n      totalTruncated,\n      totalReplaced,\n      totalHidden,\n      savingsPercentage: totalProcessed > 0 ? ((totalTruncated + totalReplaced + totalHidden) / totalProcessed) * 100 : 0,\n      fieldDetails: [] // TODO: Implement field details tracking\n    };\n  }\n\n  // ========================================\n  // Helper Methods\n  // ========================================\n\n  private validateConfig(config: BaseModuleRecordingConfig): BaseModuleRecordingConfig {\n    const defaultBasePath = './recording-logs';\n\n    // Basic validation\n    const validatedConfig: BaseModuleRecordingConfig = {\n      enabled: config.enabled ?? false,\n      basePath: config.basePath || defaultBasePath,\n      port: config.port,\n      cycle: {\n        enabled: config.cycle?.enabled ?? false,\n        mode: config.cycle?.mode || 'single',\n        basePath: config.cycle?.basePath || config.basePath || defaultBasePath,\n        cycleDirTemplate: config.cycle?.cycleDirTemplate || 'cycles/${cycleId}',\n        mainFileTemplate: config.cycle?.mainFileTemplate || 'main.${format}',\n        summaryFileTemplate: config.cycle?.summaryFileTemplate || 'summary.json',\n        format: config.cycle?.format || 'json',\n        includeIndex: config.cycle?.includeIndex ?? true,\n        includeTimestamp: config.cycle?.includeTimestamp ?? true,\n        autoCreateDirectory: config.cycle?.autoCreateDirectory ?? true,\n        autoCloseOnComplete: config.cycle?.autoCloseOnComplete ?? true,\n        maxCyclesRetained: config.cycle?.maxCyclesRetained || 100\n      },\n      error: {\n        enabled: config.error?.enabled ?? false,\n        levels: config.error?.levels || ['error', 'fatal'],\n        categories: config.error?.categories || ['system', 'processing'],\n        basePath: config.error?.basePath || config.basePath || defaultBasePath,\n        indexFileTemplate: config.error?.indexFileTemplate || 'errors/index.jsonl',\n        detailFileTemplate: config.error?.detailFileTemplate || 'errors/${errorId}.json',\n        summaryFileTemplate: config.error?.summaryFileTemplate || 'errors/summary.json',\n        dailyDirTemplate: config.error?.dailyDirTemplate || 'errors/${date}',\n        indexFormat: config.error?.indexFormat || 'jsonl',\n        detailFormat: config.error?.detailFormat || 'json',\n        autoRecoveryTracking: config.error?.autoRecoveryTracking ?? true,\n        maxErrorsRetained: config.error?.maxErrorsRetained || 1000,\n        enableStatistics: config.error?.enableStatistics ?? true\n      },\n      truncation: config.truncation,\n      file: {\n        autoCleanup: config.file?.autoCleanup ?? true,\n        maxFileAge: config.file?.maxFileAge || 7 * 24 * 60 * 60 * 1000, // 7 days\n        maxFileSize: config.file?.maxFileSize || 10 * 1024 * 1024, // 10MB\n        atomicWrites: config.file?.atomicWrites ?? true,\n        backupOnWrite: config.file?.backupOnWrite ?? true,\n        compressionEnabled: config.file?.compressionEnabled ?? false\n      }\n    };\n\n    // Validate configuration dependencies\n    if (validatedConfig.cycle?.enabled && !validatedConfig.cycle?.basePath) {\n      throw new Error('Cycle recording requires basePath to be specified');\n    }\n\n    return validatedConfig;\n  }\n\n  private initializeGlobalConfig(): void {\n    this.globalConfig = {\n      sessionId: uuidv4(),\n      environment: process.env.NODE_ENV as any || 'development',\n      version: '1.0.0',\n      baseConfig: this.config,\n      moduleOverrides: new Map(),\n      configVersion: '1.0.0',\n      lastUpdated: Date.now(),\n      consistency: {\n        enforced: true,\n        validationInterval: 60000, // 1 minute\n        allowedDeviations: []\n      }\n    };\n  }\n\n  private createConfigSnapshot(customConfig?: Partial<BaseModuleRecordingConfig>) {\n    return {\n      enabled: customConfig?.enabled ?? this.config.enabled ?? false,\n      basePath: customConfig?.basePath ?? this.config.basePath ?? '',\n      port: customConfig?.port ?? this.config.port,\n      cycleConfig: customConfig?.cycle ?? (this.config.cycle || {}),\n      errorConfig: customConfig?.error ?? (this.config.error || {}),\n      truncationConfig: customConfig?.truncation ?? (this.config.truncation || {}),\n      timestamp: Date.now()\n    };\n  }\n\n  private resolveBasePath(customConfig?: Partial<BaseModuleRecordingConfig>): string {\n    const basePath = customConfig?.basePath || this.config.basePath || './recording-logs';\n    return this.resolvePathTemplate(basePath, {});\n  }\n\n  private resolveCyclePath(context: RequestContext, cycleId: string): string {\n    const template = this.config.cycle?.cycleDirTemplate || 'cycles/${cycleId}';\n    const variables = {\n      cycleId,\n      requestId: context.requestId,\n      sessionId: context.sessionId,\n      timestamp: Date.now(),\n      date: new Date().toISOString().split('T')[0]\n    };\n\n    return this.resolvePathTemplate(template, variables);\n  }\n\n  private resolveCycleFilePath(handle: CycleHandle, type: 'start' | 'middle' | 'end'): string {\n    const template = this.config.cycle?.mainFileTemplate || 'main.${format}';\n    const variables = {\n      cycleId: handle.cycleId,\n      format: handle.format,\n      type,\n      timestamp: Date.now()\n    };\n\n    return this.resolvePathTemplate(template, variables);\n  }\n\n  private resolveErrorPath(errorId: string): string {\n    const template = this.config.error?.detailFileTemplate || 'errors/${errorId}.json';\n    const variables = {\n      errorId,\n      timestamp: Date.now(),\n      date: new Date().toISOString().split('T')[0]\n    };\n\n    return this.resolvePathTemplate(template, variables);\n  }\n\n  private resolvePathTemplate(template: string, variables: Record<string, any>): string {\n    let result = template;\n\n    for (const [key, value] of Object.entries(variables)) {\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), String(value));\n    }\n\n    return result;\n  }\n\n  private validateConfiguration(config: BaseModuleRecordingConfig): string | null {\n    // Check for specific validation failures\n    if (config.cycle?.enabled === true && !config.cycle?.basePath) {\n      return 'Cycle recording enabled but basePath is required';\n    }\n    return null;\n  }\n\n  private validateConfigurationConsistency(): ConsistencyValidationResult {\n    // TODO: Implement consistency validation\n    return {\n      valid: true,\n      errors: [],\n      warnings: [],\n      details: {}\n    };\n  }\n\n  private async notifyConfigChange(config: BaseModuleRecordingConfig): Promise<void> {\n    const promises = Array.from(this.configChangeCallbacks).map(callback => {\n      try {\n        return callback(config);\n      } catch (error) {\n        this.logError('Config change callback error', error);\n        return Promise.resolve();\n      }\n    });\n\n    await Promise.all(promises);\n  }\n\n  private findRequestContext(cycleId?: string): RequestContext | undefined {\n    if (!cycleId) return undefined;\n\n    for (const context of Array.from(this.activeRequests.values())) {\n      if (context.sharedData.has(`cycle_${cycleId}`)) {\n        return context;\n      }\n    }\n\n    return undefined;\n  }\n\n  private generateTraceReport(context: RequestContext) {\n    // TODO: Implement trace report generation\n    return {\n      traceId: context.traceId,\n      requestId: context.requestId,\n      sessionId: context.sessionId,\n      chainId: context.chainId,\n      duration: Date.now() - context.startTime,\n      startModule: context.startModule,\n      moduleStack: context.moduleStack,\n      pathHistory: context.pathHistory,\n      status: context.status,\n      summary: 'Trace report generated',\n      performance: {\n        totalDuration: Date.now() - context.startTime,\n        moduleTimings: {},\n        pathChanges: context.pathHistory.length\n      },\n      errors: []\n    };\n  }\n\n  private saveTraceReport(report: any): void {\n    // TODO: Implement trace report saving\n  }\n\n  private writeCycleRecord(filePath: string, data: any, format: string): void {\n    // TODO: Implement cycle record writing\n  }\n\n  private generateCycleSummary(handle: CycleHandle): void {\n    // TODO: Implement cycle summary generation\n  }\n\n  private writeErrorRecord(record: ErrorRecord): void {\n    // TODO: Implement error record writing\n  }\n\n  private truncateFieldsRecursive(\n    data: any,\n    path: string,\n    config: any,\n    stats: any,\n    context: string\n  ): any {\n    if (!this.config.truncation?.enabled) {\n      return data;\n    }\n\n    stats.totalProcessed++;\n\n    // Handle primitive types\n    if (typeof data !== 'object' || data === null) {\n      if (typeof data === 'string' && data.length > this.config.truncation.defaultMaxLength!) {\n        stats.totalTruncated++;\n        return data.substring(0, this.config.truncation.defaultMaxLength!) + '...';\n      }\n      return data;\n    }\n\n    // Handle arrays\n    if (Array.isArray(data)) {\n      if (!this.config.truncation.truncateArrays) {\n        return data;\n      }\n\n      const newArray = [];\n      const limit = Math.min(data.length, this.config.truncation.arrayTruncateLimit!);\n\n      for (let i = 0; i < limit; i++) {\n        newArray.push(this.truncateFieldsRecursive(data[i], `${path}.${i}`, config, stats, context));\n      }\n\n      if (data.length > limit) {\n        newArray.push(`[Array truncated from ${data.length} to ${limit} elements]`);\n        stats.totalTruncated++;\n      }\n\n      return newArray;\n    }\n\n    // Handle objects\n    const result: any = {};\n    for (const [key, value] of Object.entries(data)) {\n      const fieldPath = path ? `${path}.${key}` : key;\n      result[key] = this.truncateFieldsRecursive(value, fieldPath, config, stats, context);\n    }\n\n    return result;\n  }\n\n  private updateTruncationStats(stats: any): void {\n    this.truncationStats.set('totalProcessed', (this.truncationStats.get('totalProcessed') || 0) + stats.totalProcessed);\n    this.truncationStats.set('totalTruncated', (this.truncationStats.get('totalTruncated') || 0) + stats.totalTruncated);\n    this.truncationStats.set('totalReplaced', (this.truncationStats.get('totalReplaced') || 0) + stats.totalReplaced);\n    this.truncationStats.set('totalHidden', (this.truncationStats.get('totalHidden') || 0) + stats.totalHidden);\n  }\n\n  private extractModuleName(module: string | ModuleRecordingConfig | undefined): string | undefined {\n    if (!module) return undefined;\n    if (typeof module === 'string') return module;\n    return module.enabled ? 'module-config' : 'unknown';\n  }\n\n  private logError(message: string, error: any): void {\n    console.error(`[RecordingManager] ${message}:`, error);\n  }\n}","import {\n  CycleRecordingConfig,\n  CycleRecord,\n  CycleHandle,\n  CycleInfo,\n  FieldTruncationConfig\n} from '../interfaces/Recording';\nimport { v4 as uuidv4 } from 'uuid';\nimport { promises as fs } from 'fs';\nimport { join, dirname } from 'path';\n\n/**\n * Circular recording component that manages request-response cycle recording\n */\nexport class CycleRecorder {\n  private config: CycleRecordingConfig;\n  private activeCycles: Map<string, CycleInfo> = new Map();\n  private cycleRecords: Map<string, CycleRecord[]> = new Map();\n  private truncationConfig: FieldTruncationConfig | null = null;\n\n  constructor(config: CycleRecordingConfig, truncationConfig?: FieldTruncationConfig) {\n    this.config = this.validateConfig(config);\n    this.truncationConfig = truncationConfig || null;\n  }\n\n  // ========================================\n  // Cycle Management\n  // ========================================\n\n  /**\n   * Start a new recording cycle\n   */\n  async startCycle(operation: string, module: string, options: {\n    requestId?: string;\n    basePath?: string;\n    customConfig?: Partial<CycleRecordingConfig>;\n  } = {}): Promise<CycleHandle> {\n    const cycleId = uuidv4();\n    const startTime = Date.now();\n    const basePath = options.basePath || this.resolveCycleBasePath(cycleId, options);\n\n    const handle: CycleHandle = {\n      cycleId,\n      operation,\n      startTime,\n      module,\n      basePath,\n      format: options.customConfig?.format || this.config.format || 'json'\n    };\n\n    const cycleInfo: CycleInfo = {\n      cycleId,\n      operation,\n      module,\n      startTime,\n      status: 'active',\n      recordCount: 0,\n      basePath,\n      format: handle.format\n    };\n\n    this.activeCycles.set(cycleId, cycleInfo);\n    this.cycleRecords.set(cycleId, []);\n\n    // Create start record\n    await this.recordCycleEvent(handle, {\n      index: 0,\n      type: 'start',\n      module,\n      operation,\n      timestamp: startTime,\n      cycleId,\n      traceId: options.requestId,\n      requestId: options.requestId\n    });\n\n    // Ensure directory exists\n    await this.ensureDirectoryExists(basePath);\n\n    return handle;\n  }\n\n  /**\n   * Record a cycle event\n   */\n  async recordCycleEvent(handle: CycleHandle, event: Omit<CycleRecord, 'data' | 'result'> & {\n    data?: any;\n    result?: any;\n  }): Promise<boolean> {\n    if (!this.activeCycles.has(handle.cycleId)) {\n      return false;\n    }\n\n    try {\n      // Apply field truncation if enabled\n      let processedEvent = { ...event };\n      if (this.truncationConfig?.enabled) {\n        processedEvent = this.truncateFields(processedEvent);\n      }\n\n      const record: CycleRecord = {\n        ...processedEvent,\n        data: processedEvent.data,\n        result: processedEvent.result\n      };\n\n      // Add to memory cache\n      const records = this.cycleRecords.get(handle.cycleId) || [];\n      records.push(record);\n      this.cycleRecords.set(handle.cycleId, records);\n\n      // Update cycle info\n      const cycleInfo = this.activeCycles.get(handle.cycleId)!;\n      cycleInfo.recordCount++;\n\n      // Write to file based on configuration\n      await this.writeCycleRecord(handle, record);\n\n      return true;\n    } catch (error) {\n      console.error(`[CycleRecorder] Failed to record cycle event:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * End a recording cycle\n   */\n  async endCycle(handle: CycleHandle, result?: any, error?: string): Promise<boolean> {\n    if (!this.activeCycles.has(handle.cycleId)) {\n      return false;\n    }\n\n    try {\n      const cycleInfo = this.activeCycles.get(handle.cycleId)!;\n      cycleInfo.endTime = Date.now();\n      cycleInfo.status = error ? 'error' : 'completed';\n\n      // Create end record\n      await this.recordCycleEvent(handle, {\n        index: -1,\n        type: 'end',\n        module: handle.module,\n        operation: handle.operation,\n        result,\n        error,\n        timestamp: Date.now(),\n        cycleId: handle.cycleId\n      });\n\n      // Generate summary if enabled\n      if (this.config.includeIndex) {\n        await this.generateCycleSummary(handle);\n      }\n\n      // Clean up if auto-close is enabled\n      if (this.config.autoCloseOnComplete) {\n        await this.closeCycle(handle.cycleId);\n      }\n\n      return true;\n    } catch (error) {\n      console.error(`[CycleRecorder] Failed to end cycle:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get cycle information\n   */\n  getCycleInfo(cycleId: string): CycleInfo | undefined {\n    return this.activeCycles.get(cycleId);\n  }\n\n  /**\n   * Get all active cycles\n   */\n  getActiveCycles(): CycleInfo[] {\n    return Array.from(this.activeCycles.values());\n  }\n\n  /**\n   * Get cycle records\n   */\n  getCycleRecords(cycleId: string): CycleRecord[] {\n    return this.cycleRecords.get(cycleId) || [];\n  }\n\n  /**\n   * Close and clean up a cycle\n   */\n  async closeCycle(cycleId: string): Promise<boolean> {\n    if (!this.activeCycles.has(cycleId)) {\n      return false;\n    }\n\n    try {\n      // Apply cleanup policies\n      await this.applyCleanupPolicies(cycleId);\n\n      this.activeCycles.delete(cycleId);\n      this.cycleRecords.delete(cycleId);\n\n      return true;\n    } catch (error) {\n      console.error(`[CycleRecorder] Failed to close cycle:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Close all active cycles\n   */\n  async closeAllCycles(): Promise<void> {\n    const cycleIds = Array.from(this.activeCycles.keys());\n\n    for (const cycleId of cycleIds) {\n      await this.closeCycle(cycleId);\n    }\n  }\n\n  // ========================================\n  // Statistics and Reporting\n  // ========================================\n\n  /**\n   * Get cycle statistics\n   */\n  getCycleStatistics(cycleId: string): {\n    totalRecords: number;\n    duration: number;\n    averageRecordInterval: number;\n    recordTypes: Record<string, number>;\n    errorCount: number;\n  } | null {\n    const records = this.cycleRecords.get(cycleId);\n    const info = this.activeCycles.get(cycleId);\n\n    if (!records || !info) {\n      return null;\n    }\n\n    const totalRecords = records.length;\n    const duration = info.endTime ? info.endTime - info.startTime : Date.now() - info.startTime;\n    const averageRecordInterval = totalRecords > 1 ? duration / (totalRecords - 1) : 0;\n\n    const recordTypes = records.reduce((acc, record) => {\n      acc[record.type] = (acc[record.type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const errorCount = records.filter(record => record.error).length;\n\n    return {\n      totalRecords,\n      duration,\n      averageRecordInterval,\n      recordTypes,\n      errorCount\n    };\n  }\n\n  /**\n   * Get all cycle statistics\n   */\n  getAllCycleStatistics(): Record<string, {\n    totalRecords: number;\n    duration: number;\n    averageRecordInterval: number;\n    recordTypes: Record<string, number>;\n    errorCount: number;\n  }> {\n    const result: Record<string, any> = {};\n\n    for (const cycleId of this.activeCycles.keys()) {\n      const stats = this.getCycleStatistics(cycleId);\n      if (stats) {\n        result[cycleId] = stats;\n      }\n    }\n\n    return result;\n  }\n\n  // ========================================\n  // Configuration Management\n  // ========================================\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<CycleRecordingConfig>): void {\n    this.config = this.validateConfig({ ...this.config, ...newConfig });\n  }\n\n  /**\n   * Update truncation configuration\n   */\n  updateTruncationConfig(truncationConfig: FieldTruncationConfig | null): void {\n    this.truncationConfig = truncationConfig;\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): CycleRecordingConfig {\n    return { ...this.config };\n  }\n\n  // ========================================\n  // Helper Methods\n  // ========================================\n\n  private validateConfig(config: CycleRecordingConfig): CycleRecordingConfig {\n    return {\n      enabled: config.enabled ?? false,\n      mode: config.mode || 'single',\n      basePath: config.basePath || './cycle-logs',\n      cycleDirTemplate: config.cycleDirTemplate || 'cycles/${cycleId}',\n      mainFileTemplate: config.mainFileTemplate || 'main.${format}',\n      summaryFileTemplate: config.summaryFileTemplate || 'summary.json',\n      format: config.format || 'json',\n      includeIndex: config.includeIndex ?? true,\n      includeTimestamp: config.includeTimestamp ?? true,\n      autoCreateDirectory: config.autoCreateDirectory ?? true,\n      autoCloseOnComplete: config.autoCloseOnComplete ?? true,\n      maxCyclesRetained: config.maxCyclesRetained || 100\n    };\n  }\n\n  private resolveCycleBasePath(cycleId: string, options: {\n    requestId?: string;\n    customConfig?: Partial<CycleRecordingConfig>;\n  } = {}): string {\n    const template = options.customConfig?.cycleDirTemplate || this.config.cycleDirTemplate || '';\n    const variables = {\n      cycleId,\n      requestId: options.requestId || '',\n      timestamp: Date.now(),\n      date: new Date().toISOString().split('T')[0],\n      time: new Date().toISOString().split('T')[1].split('.')[0]\n    };\n\n    return this.resolvePathTemplate(template, variables);\n  }\n\n  private resolvePathTemplate(template: string, variables: Record<string, any>): string {\n    let result = template;\n\n    for (const [key, value] of Object.entries(variables)) {\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), String(value));\n    }\n\n    return result;\n  }\n\n  private async ensureDirectoryExists(path: string): Promise<void> {\n    if (this.config.autoCreateDirectory) {\n      try {\n        await fs.mkdir(dirname(path), { recursive: true });\n      } catch (error) {\n        // Directory already exists or permission error\n        console.warn(`[CycleRecorder] Failed to create directory ${dirname(path)}:`, error);\n      }\n    }\n  }\n\n  private async writeCycleRecord(handle: CycleHandle, record: CycleRecord): Promise<void> {\n    const filePath = this.resolveRecordFilePath(handle, record);\n    const content = this.formatRecordContent(record, handle.format);\n\n    try {\n      if (handle.format === 'jsonl') {\n        await fs.appendFile(filePath, content + '\\n');\n      } else {\n        await fs.appendFile(filePath, content + ',\\n');\n      }\n    } catch (error) {\n      console.error(`[CycleRecorder] Failed to write record to ${filePath}:`, error);\n      throw error;\n    }\n  }\n\n  private resolveRecordFilePath(handle: CycleHandle, record: CycleRecord): string {\n    const template = this.config.mainFileTemplate || '';\n    const variables = {\n      cycleId: handle.cycleId,\n      format: handle.format,\n      type: record.type,\n      index: record.index,\n      timestamp: record.timestamp,\n      date: new Date(record.timestamp).toISOString().split('T')[0]\n    };\n\n    const fileName = this.resolvePathTemplate(template, variables);\n    return join(handle.basePath, fileName);\n  }\n\n  private formatRecordContent(record: CycleRecord, format: string): string {\n    const content = {\n      index: record.index,\n      type: record.type,\n      module: record.module,\n      operation: record.operation,\n      phase: record.phase,\n      data: record.data,\n      result: record.result,\n      error: record.error,\n      timestamp: this.config.includeTimestamp ? record.timestamp : undefined,\n      cycleId: record.cycleId,\n      traceId: record.traceId,\n      requestId: record.requestId\n    };\n\n    // Remove undefined values\n    Object.keys(content).forEach(key => {\n      if (content[key as keyof typeof content] === undefined) {\n        delete content[key as keyof typeof content];\n      }\n    });\n\n    return JSON.stringify(content);\n  }\n\n  private async generateCycleSummary(handle: CycleHandle): Promise<void> {\n    const records = this.cycleRecords.get(handle.cycleId) || [];\n    const stats = this.getCycleStatistics(handle.cycleId);\n\n    if (!stats) return;\n\n    const summary = {\n      cycleId: handle.cycleId,\n      operation: handle.operation,\n      module: handle.module,\n      startTime: handle.startTime,\n      endTime: Date.now(),\n      duration: stats.duration,\n      status: this.activeCycles.get(handle.cycleId)?.status || 'completed',\n      totalRecords: stats.totalRecords,\n      averageRecordInterval: stats.averageRecordInterval,\n      recordTypes: stats.recordTypes,\n      errorCount: stats.errorCount,\n      config: this.config\n    };\n\n    const summaryPath = join(handle.basePath, this.config.summaryFileTemplate || '');\n    const resolvedPath = this.resolvePathTemplate(summaryPath, {\n      cycleId: handle.cycleId,\n      timestamp: Date.now(),\n      date: new Date().toISOString().split('T')[0]\n    });\n\n    try {\n      await fs.writeFile(resolvedPath, JSON.stringify(summary, null, 2));\n    } catch (error) {\n      console.error(`[CycleRecorder] Failed to write cycle summary:`, error);\n    }\n  }\n\n  private async applyCleanupPolicies(cycleId: string): Promise<void> {\n    // TODO: Implement cleanup policies based on maxCyclesRetained\n    // This would involve cleaning up old cycle directories\n  }\n\n  private truncateFields(data: any): any {\n    if (!this.truncationConfig || !this.truncationConfig.enabled) {\n      return data;\n    }\n\n    // TODO: Implement field truncation logic\n    // This would recursively traverse the data object and apply truncation rules\n    return data;\n  }\n}","import {\n  ErrorRecordingConfig,\n  ErrorRecord,\n  ErrorRecordData,\n  ErrorFilters,\n  ErrorStatistics,\n  ErrorTrendPoint\n} from '../interfaces/Recording';\nimport { v4 as uuidv4 } from 'uuid';\nimport { promises as fs } from 'fs';\nimport { join, dirname } from 'path';\n\n/**\n * Error recording component that manages error tracking and recovery\n */\nexport class ErrorRecorder {\n  private config: ErrorRecordingConfig;\n  private errorRecords: Map<string, ErrorRecord> = new Map();\n  private errorIndex: Map<string, string[]> = new Map(); // date -> errorIds\n  private recoveryTracking: Map<string, { attempts: number; lastAttempt: number }> = new Map();\n\n  constructor(config: ErrorRecordingConfig) {\n    this.config = this.validateConfig(config);\n  }\n\n  // ========================================\n  // Error Recording\n  // ========================================\n\n  /**\n   * Record an error\n   */\n  async recordError(errorData: ErrorRecordData): Promise<string> {\n    const errorId = uuidv4();\n    const timestamp = Date.now();\n\n    const record: ErrorRecord = {\n      errorId,\n      cycleId: errorData.cycleId,\n      module: errorData.context?.module || 'unknown',\n      category: errorData.category || 'system',\n      level: errorData.level || 'error',\n      timestamp,\n      message: typeof errorData.error === 'string' ? errorData.error : errorData.error.message,\n      stack: typeof errorData.error === 'object' ? errorData.error.stack : undefined,\n      context: errorData.context,\n      operation: errorData.operation,\n      recoverable: errorData.recoverable ?? true,\n      resolved: false,\n      filePath: this.resolveErrorFilePath(errorId, timestamp)\n    };\n\n    // Validate against configuration filters\n    if (!this.shouldRecordError(record)) {\n      return errorId;\n    }\n\n    this.errorRecords.set(errorId, record);\n\n    // Update index\n    this.updateErrorIndex(errorId, timestamp);\n\n    // Write to file\n    await this.writeErrorRecord(record);\n\n    // Track recovery if enabled\n    if (this.config.autoRecoveryTracking && record.recoverable) {\n      this.trackRecovery(errorId);\n    }\n\n    // Check cleanup policies\n    await this.applyCleanupPolicies();\n\n    return errorId;\n  }\n\n  /**\n   * Get error record by ID\n   */\n  getError(errorId: string): ErrorRecord | undefined {\n    return this.errorRecords.get(errorId);\n  }\n\n  /**\n   * Get errors with filters\n   */\n  getErrors(filters?: ErrorFilters): ErrorRecord[] {\n    let errors = Array.from(this.errorRecords.values());\n\n    if (filters) {\n      errors = errors.filter(error => this.matchesFilters(error, filters));\n    }\n\n    return errors.sort((a, b) => b.timestamp - a.timestamp);\n  }\n\n  /**\n   * Get errors by category\n   */\n  getErrorsByCategory(category: string): ErrorRecord[] {\n    return this.getErrors({ category: [category as any] });\n  }\n\n  /**\n   * Get errors by level\n   */\n  getErrorsByLevel(level: string): ErrorRecord[] {\n    return this.getErrors({ level: [level as any] });\n  }\n\n  /**\n   * Get errors by module\n   */\n  getErrorsByModule(module: string): ErrorRecord[] {\n    return this.getErrors({ module });\n  }\n\n  // ========================================\n  // Error Resolution\n  // ========================================\n\n  /**\n   * Mark error as resolved\n   */\n  async resolveError(errorId: string, resolution: string): Promise<boolean> {\n    const record = this.errorRecords.get(errorId);\n    if (!record) {\n      return false;\n    }\n\n    record.resolved = true;\n    record.resolution = resolution;\n\n    // Update file\n    await this.writeErrorRecord(record);\n\n    // Remove from recovery tracking\n    this.recoveryTracking.delete(errorId);\n\n    return true;\n  }\n\n  /**\n   * Mark error as unresolved\n   */\n  async unresolveError(errorId: string): Promise<boolean> {\n    const record = this.errorRecords.get(errorId);\n    if (!record) {\n      return false;\n    }\n\n    record.resolved = false;\n    record.resolution = undefined;\n\n    // Update file\n    await this.writeErrorRecord(record);\n\n    // Add back to recovery tracking if recoverable\n    if (record.recoverable) {\n      this.trackRecovery(errorId);\n    }\n\n    return true;\n  }\n\n  /**\n   * Get unresolved errors\n   */\n  getUnresolvedErrors(): ErrorRecord[] {\n    return this.getErrors({ resolved: false });\n  }\n\n  /**\n   * Get resolved errors\n   */\n  getResolvedErrors(): ErrorRecord[] {\n    return this.getErrors({ resolved: true });\n  }\n\n  // ========================================\n  // Recovery Tracking\n  // ========================================\n\n  /**\n   * Track recovery attempt\n   */\n  trackRecoveryAttempt(errorId: string, success: boolean): void {\n    const tracking = this.recoveryTracking.get(errorId);\n    if (!tracking) {\n      return;\n    }\n\n    tracking.attempts++;\n    tracking.lastAttempt = Date.now();\n\n    if (success) {\n      // Auto-resolve on successful recovery\n      this.resolveError(errorId, `Auto-resolved after ${tracking.attempts} recovery attempts`);\n    }\n  }\n\n  /**\n   * Get recovery tracking info\n   */\n  getRecoveryTracking(errorId: string): { attempts: number; lastAttempt: number } | undefined {\n    return this.recoveryTracking.get(errorId);\n  }\n\n  /**\n   * Get all errors needing recovery\n   */\n  getErrorsNeedingRecovery(): ErrorRecord[] {\n    return this.getUnresolvedErrors().filter(error => error.recoverable);\n  }\n\n  // ========================================\n  // Statistics and Analysis\n  // ========================================\n\n  /**\n   * Get error statistics\n   */\n  getErrorStatistics(timeRange?: { start: number; end: number }): ErrorStatistics {\n    let errors = Array.from(this.errorRecords.values());\n\n    if (timeRange) {\n      errors = errors.filter(error =>\n        error.timestamp >= timeRange.start && error.timestamp <= timeRange.end\n      );\n    }\n\n    const totalErrors = errors.length;\n    const errorsByLevel = this.groupBy(errors, 'level');\n    const errorsByCategory = this.groupBy(errors, 'category');\n    const errorsByModule = this.groupBy(errors, 'module');\n    const resolvedCount = errors.filter(error => error.resolved).length;\n    const unresolvedCount = totalErrors - resolvedCount;\n    const recoveryRate = totalErrors > 0 ? resolvedCount / totalErrors : 0;\n\n    return {\n      totalErrors,\n      errorsByLevel,\n      errorsByCategory,\n      errorsByModule,\n      resolvedCount,\n      unresolvedCount,\n      recoveryRate\n    };\n  }\n\n  /**\n   * Get error trend data\n   */\n  getErrorTrend(timeRange: { start: number; end: number }, intervalMs: number = 3600000): ErrorTrendPoint[] {\n    const points: ErrorTrendPoint[] = [];\n    const errors = Array.from(this.errorRecords.values()).filter(error =>\n      error.timestamp >= timeRange.start && error.timestamp <= timeRange.end\n    );\n\n    for (let time = timeRange.start; time <= timeRange.end; time += intervalMs) {\n      const intervalEnd = time + intervalMs;\n      const intervalErrors = errors.filter(error =>\n        error.timestamp >= time && error.timestamp < intervalEnd\n      );\n\n      const errorCount = intervalErrors.length;\n      const resolvedCount = intervalErrors.filter(error => error.resolved).length;\n      const errorRate = intervalErrors.length > 0 ? resolvedCount / intervalErrors.length : 0;\n\n      points.push({\n        timestamp: time,\n        errorCount,\n        resolvedCount,\n        errorRate\n      });\n    }\n\n    return points;\n  }\n\n  /**\n   * Get error summary\n   */\n  getErrorSummary(): {\n    totalErrors: number;\n    unresolvedErrors: number;\n    criticalErrors: number;\n    recentErrors: ErrorRecord[];\n    topErrorCategories: Array<{ category: string; count: number }>;\n  } {\n    const totalErrors = this.errorRecords.size;\n    const unresolvedErrors = this.getUnresolvedErrors().length;\n    const criticalErrors = this.getErrorsByLevel('fatal').length;\n    const recentErrors = this.getErrors().slice(0, 10);\n\n    const categoryCounts = this.groupBy(Array.from(this.errorRecords.values()), 'category');\n    const topErrorCategories = Object.entries(categoryCounts)\n      .map(([category, count]) => ({ category, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      totalErrors,\n      unresolvedErrors,\n      criticalErrors,\n      recentErrors,\n      topErrorCategories\n    };\n  }\n\n  // ========================================\n  // File Management\n  // ========================================\n\n  /**\n   * Write error record to file\n   */\n  private async writeErrorRecord(record: ErrorRecord): Promise<void> {\n    try {\n      if (!record.filePath) {\n        console.error(`[ErrorRecorder] Error record has no file path:`, record);\n        return;\n      }\n      await fs.mkdir(dirname(record.filePath), { recursive: true });\n      await fs.writeFile(record.filePath, JSON.stringify(record, null, 2));\n    } catch (error) {\n      console.error(`[ErrorRecorder] Failed to write error record:`, error);\n    }\n  }\n\n  /**\n   * Write error index to file\n   */\n  private async writeErrorIndex(): Promise<void> {\n    if (!this.config.enableStatistics) {\n      return;\n    }\n\n    try {\n      const indexPath = this.resolveIndexPath();\n      const indexData = Array.from(this.errorIndex.entries()).map(([date, errorIds]) => ({\n        date,\n        errorIds,\n        count: errorIds.length\n      }));\n\n      await fs.mkdir(dirname(indexPath), { recursive: true });\n      await fs.writeFile(indexPath, JSON.stringify(indexData, null, 2));\n    } catch (error) {\n      console.error(`[ErrorRecorder] Failed to write error index:`, error);\n    }\n  }\n\n  /**\n   * Load error records from files\n   */\n  async loadErrorRecords(): Promise<void> {\n    // TODO: Implement loading from persisted files\n    // This would scan the error directory and load existing error records\n  }\n\n  /**\n   * Cleanup old error records\n   */\n  private async applyCleanupPolicies(): Promise<void> {\n    if (this.config.maxErrorsRetained === undefined) {\n      return;\n    }\n\n    const errors = Array.from(this.errorRecords.values())\n      .sort((a, b) => b.timestamp - a.timestamp);\n\n    if (errors.length > this.config.maxErrorsRetained) {\n      const toRemove = errors.slice(this.config.maxErrorsRetained);\n\n      for (const error of toRemove) {\n        this.errorRecords.delete(error.errorId);\n        this.recoveryTracking.delete(error.errorId);\n\n        // Remove from file system\n        try {\n          if (error.filePath) {\n            await fs.unlink(error.filePath);\n          }\n        } catch (err) {\n          // File might not exist or permission error\n          console.warn(`[ErrorRecorder] Failed to delete error file:`, err);\n        }\n      }\n    }\n  }\n\n  // ========================================\n  // Configuration Management\n  // ========================================\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<ErrorRecordingConfig>): void {\n    this.config = this.validateConfig({ ...this.config, ...newConfig });\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): ErrorRecordingConfig {\n    return { ...this.config };\n  }\n\n  // ========================================\n  // Helper Methods\n  // ========================================\n\n  private validateConfig(config: ErrorRecordingConfig): ErrorRecordingConfig {\n    return {\n      enabled: config.enabled ?? false,\n      levels: config.levels || ['error', 'fatal'],\n      categories: config.categories || ['system', 'processing'],\n      basePath: config.basePath || './error-logs',\n      indexFileTemplate: config.indexFileTemplate || 'errors/index.jsonl',\n      detailFileTemplate: config.detailFileTemplate || 'errors/${errorId}.json',\n      summaryFileTemplate: config.summaryFileTemplate || 'errors/summary.json',\n      dailyDirTemplate: config.dailyDirTemplate || 'errors/${date}',\n      indexFormat: config.indexFormat || 'jsonl',\n      detailFormat: config.detailFormat || 'json',\n      autoRecoveryTracking: config.autoRecoveryTracking ?? true,\n      maxErrorsRetained: config.maxErrorsRetained || 1000,\n      enableStatistics: config.enableStatistics ?? true\n    };\n  }\n\n  private shouldRecordError(record: ErrorRecord): boolean {\n    // Check level filter\n    if (this.config.levels && !this.config.levels.includes(record.level)) {\n      return false;\n    }\n\n    // Check category filter\n    if (this.config.categories && !this.config.categories.includes(record.category)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private matchesFilters(error: ErrorRecord, filters: ErrorFilters): boolean {\n    if (filters.level && !filters.level.includes(error.level)) {\n      return false;\n    }\n\n    if (filters.category && !filters.category.includes(error.category)) {\n      return false;\n    }\n\n    if (filters.module && error.module !== filters.module) {\n      return false;\n    }\n\n    if (filters.resolved !== undefined && error.resolved !== filters.resolved) {\n      return false;\n    }\n\n    if (filters.timeRange) {\n      if (error.timestamp < filters.timeRange.start || error.timestamp > filters.timeRange.end) {\n        return false;\n      }\n    }\n\n    if (filters.operation && error.operation !== filters.operation) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private resolveErrorFilePath(errorId: string, timestamp: number): string {\n    const template = this.config.detailFileTemplate || '';\n    const variables = {\n      errorId,\n      timestamp,\n      date: new Date(timestamp).toISOString().split('T')[0],\n      time: new Date(timestamp).toISOString().split('T')[1].split('.')[0]\n    };\n\n    return this.resolvePathTemplate(template, variables);\n  }\n\n  private resolveIndexPath(): string {\n    const template = this.config.indexFileTemplate || '';\n    const variables = {\n      timestamp: Date.now(),\n      date: new Date().toISOString().split('T')[0],\n      time: new Date().toISOString().split('T')[1].split('.')[0]\n    };\n\n    return this.resolvePathTemplate(template, variables);\n  }\n\n  private resolvePathTemplate(template: string, variables: Record<string, any>): string {\n    let result = template;\n\n    for (const [key, value] of Object.entries(variables)) {\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), String(value));\n    }\n\n    return result;\n  }\n\n  private updateErrorIndex(errorId: string, timestamp: number): void {\n    const date = new Date(timestamp).toISOString().split('T')[0];\n\n    if (!this.errorIndex.has(date)) {\n      this.errorIndex.set(date, []);\n    }\n\n    this.errorIndex.get(date)!.push(errorId);\n\n    // Write updated index\n    this.writeErrorIndex();\n  }\n\n  private trackRecovery(errorId: string): void {\n    this.recoveryTracking.set(errorId, {\n      attempts: 0,\n      lastAttempt: Date.now()\n    });\n  }\n\n  private groupBy<T>(array: T[], key: keyof T): Record<string, number> {\n    return array.reduce((groups, item) => {\n      const groupKey = String(item[key]);\n      groups[groupKey] = (groups[groupKey] || 0) + 1;\n      return groups;\n    }, {} as Record<string, number>);\n  }\n}","import {\n  FieldTruncationConfig,\n  FieldTruncationRule,\n  PathPatternRule,\n  TruncationContext,\n  TruncationStatistics,\n  TruncationReport\n} from '../interfaces/Recording';\n\n/**\n * Field truncation component that handles data size optimization\n */\nexport class FieldTruncator {\n  private config: FieldTruncationConfig;\n  private statistics: TruncationStatistics;\n\n  constructor(config: FieldTruncationConfig) {\n    this.config = this.validateConfig(config);\n    this.statistics = this.initializeStatistics();\n  }\n\n  // ========================================\n  // Main Truncation Interface\n  // ========================================\n\n  /**\n   * Truncate fields in data object\n   */\n  truncateFields(data: any, context?: TruncationContext | string): any {\n    if (!this.config.enabled) {\n      return data;\n    }\n\n    const truncationContext = typeof context === 'string' ? { operation: context } : (context || {});\n    const stats = {\n      totalProcessed: 0,\n      totalTruncated: 0,\n      totalReplaced: 0,\n      totalHidden: 0,\n      fieldStats: new Map<string, { processed: number; truncated: number; replaced: number; hidden: number }>(),\n      averageSavings: 0\n    };\n\n    const result = this.truncateFieldsRecursive(data, '', stats, truncationContext);\n\n    // Update statistics\n    this.updateStatistics(stats);\n\n    return result;\n  }\n\n  /**\n   * Truncate a specific field by path\n   */\n  truncateFieldByPath(data: any, fieldPath: string, context?: TruncationContext): any {\n    if (!this.config.enabled) {\n      return data;\n    }\n\n    const pathParts = fieldPath.split('.');\n    let current = data;\n    let parent = data;\n    let key = '';\n\n    // Navigate to the field\n    for (let i = 0; i < pathParts.length - 1; i++) {\n      if (!current || typeof current !== 'object') {\n        return data;\n      }\n      parent = current;\n      key = pathParts[i];\n      current = current[key];\n    }\n\n    if (!current || typeof current !== 'object') {\n      return data;\n    }\n\n    const finalKey = pathParts[pathParts.length - 1];\n    if (!(finalKey in current)) {\n      return data;\n    }\n\n    // Apply truncation to the specific field\n    const fieldValue = current[finalKey];\n    const truncatedValue = this.truncateValue(fieldValue, fieldPath, context || {});\n\n    if (truncatedValue !== fieldValue) {\n      current[finalKey] = truncatedValue;\n    }\n\n    return data;\n  }\n\n  /**\n   * Get truncation statistics\n   */\n  getStatistics(): TruncationStatistics {\n    return { ...this.statistics };\n  }\n\n  /**\n   * Get truncation report\n   */\n  getReport(): TruncationReport {\n    const totalProcessed = this.statistics.totalProcessed;\n    const totalTruncated = this.statistics.totalTruncated;\n    const totalReplaced = this.statistics.totalReplaced;\n    const totalHidden = this.statistics.totalHidden;\n\n    const fieldDetails = Array.from(this.statistics.fieldStats.entries()).map(([field, stats]) => ({\n      field,\n      processed: stats.processed,\n      truncated: stats.truncated,\n      replaced: stats.replaced,\n      hidden: stats.hidden\n    }));\n\n    return {\n      totalProcessed,\n      totalTruncated,\n      totalReplaced,\n      totalHidden,\n      savingsPercentage: totalProcessed > 0 ? ((totalTruncated + totalReplaced + totalHidden) / totalProcessed) * 100 : 0,\n      fieldDetails\n    };\n  }\n\n  /**\n   * Reset statistics\n   */\n  resetStatistics(): void {\n    this.statistics = this.initializeStatistics();\n  }\n\n  // ========================================\n  // Configuration Management\n  // ========================================\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<FieldTruncationConfig>): void {\n    this.config = this.validateConfig({ ...this.config, ...newConfig });\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): FieldTruncationConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Add field truncation rule\n   */\n  addFieldRule(rule: FieldTruncationRule): void {\n    if (!this.config.fields) {\n      this.config.fields = [];\n    }\n\n    // Remove existing rule for the same field path\n    this.config.fields = this.config.fields.filter(f => f.fieldPath !== rule.fieldPath);\n    this.config.fields.push(rule);\n  }\n\n  /**\n   * Remove field truncation rule\n   */\n  removeFieldRule(fieldPath: string): boolean {\n    if (!this.config.fields) {\n      return false;\n    }\n\n    const initialLength = this.config.fields.length;\n    this.config.fields = this.config.fields.filter(f => f.fieldPath !== fieldPath);\n    return this.config.fields.length < initialLength;\n  }\n\n  /**\n   * Add path pattern rule\n   */\n  addPathPatternRule(rule: PathPatternRule): void {\n    if (!this.config.pathPatterns) {\n      this.config.pathPatterns = [];\n    }\n\n    // Remove existing rule for the same pattern\n    this.config.pathPatterns = this.config.pathPatterns.filter(p => p.pattern !== rule.pattern);\n    this.config.pathPatterns.push(rule);\n  }\n\n  /**\n   * Remove path pattern rule\n   */\n  removePathPatternRule(pattern: string): boolean {\n    if (!this.config.pathPatterns) {\n      return false;\n    }\n\n    const initialLength = this.config.pathPatterns.length;\n    this.config.pathPatterns = this.config.pathPatterns.filter(p => p.pattern !== pattern);\n    return this.config.pathPatterns.length < initialLength;\n  }\n\n  // ========================================\n  // Helper Methods\n  // ========================================\n\n  private validateConfig(config: FieldTruncationConfig): FieldTruncationConfig {\n    return {\n      enabled: config.enabled ?? false,\n      defaultStrategy: config.defaultStrategy || 'truncate',\n      defaultMaxLength: config.defaultMaxLength || 1000,\n      defaultReplacementText: config.defaultReplacementText || '[...]',\n      fields: config.fields || [],\n      pathPatterns: config.pathPatterns || [],\n      excludedFields: config.excludedFields || [],\n      preserveStructure: config.preserveStructure ?? true,\n      truncateArrays: config.truncateArrays ?? true,\n      arrayTruncateLimit: config.arrayTruncateLimit || 100,\n      recursiveTruncation: config.recursiveTruncation ?? true\n    };\n  }\n\n  private initializeStatistics(): TruncationStatistics {\n    return {\n      totalProcessed: 0,\n      totalTruncated: 0,\n      totalReplaced: 0,\n      totalHidden: 0,\n      fieldStats: new Map(),\n      averageSavings: 0\n    };\n  }\n\n  private truncateFieldsRecursive(\n    data: any,\n    currentPath: string,\n    stats: TruncationStatistics,\n    context: TruncationContext\n  ): any {\n    if (data === null || data === undefined) {\n      return data;\n    }\n\n    stats.totalProcessed++;\n\n    // Handle primitive types\n    if (typeof data !== 'object') {\n      return this.truncateValue(data, currentPath, context);\n    }\n\n    // Handle arrays\n    if (Array.isArray(data)) {\n      return this.truncateArray(data, currentPath, stats, context);\n    }\n\n    // Handle objects\n    return this.truncateObject(data, currentPath, stats, context);\n  }\n\n  private truncateArray(\n    array: any[],\n    currentPath: string,\n    stats: TruncationStatistics,\n    context: TruncationContext\n  ): any[] {\n    if (!this.config.truncateArrays) {\n      return array;\n    }\n\n    // Apply array length truncation\n    let result = array;\n    if (array.length > this.config.arrayTruncateLimit!) {\n      const originalLength = array.length;\n      result = array.slice(0, this.config.arrayTruncateLimit!);\n\n      // Add truncation indicator\n      if (this.config.preserveStructure) {\n        result.push(`[Array truncated from ${originalLength} to ${result.length} elements]`);\n      }\n\n      this.updateFieldStats(currentPath, stats, 'truncated', 1);\n      stats.totalTruncated++;\n    }\n\n    // Process array elements\n    if (this.config.recursiveTruncation) {\n      result = result.map((item, index) => {\n        const elementPath = currentPath ? `${currentPath}.${index}` : String(index);\n        return this.truncateFieldsRecursive(item, elementPath, stats, context);\n      });\n    }\n\n    return result;\n  }\n\n  private truncateObject(\n    obj: Record<string, any>,\n    currentPath: string,\n    stats: TruncationStatistics,\n    context: TruncationContext\n  ): Record<string, any> {\n    const result: Record<string, any> = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      const fieldPath = currentPath ? `${currentPath}.${key}` : key;\n\n      // Skip excluded fields\n      if (this.isFieldExcluded(fieldPath)) {\n        result[key] = value;\n        continue;\n      }\n\n      // Check if field matches any specific rule\n      const rule = this.findFieldRule(fieldPath);\n      if (rule) {\n        result[key] = this.applyFieldRule(value, fieldPath, rule, stats, context);\n        continue;\n      }\n\n      // Check if field matches any path pattern\n      const patternRule = this.findPathPatternRule(fieldPath);\n      if (patternRule && this.shouldApplyPathPattern(fieldPath, value, patternRule)) {\n        result[key] = this.applyPathPatternRule(value, fieldPath, patternRule, stats, context);\n        continue;\n      }\n\n      // Apply default truncation\n      result[key] = this.truncateFieldsRecursive(value, fieldPath, stats, context);\n    }\n\n    return result;\n  }\n\n  private truncateValue(value: any, fieldPath: string, context: TruncationContext): any {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    // Check if value needs truncation\n    const maxLength = this.getFieldMaxLength(fieldPath);\n    if (value.length <= maxLength) {\n      return value;\n    }\n\n    const strategy = this.getFieldTruncationStrategy(fieldPath);\n    const replacementText = this.getFieldReplacementText(fieldPath);\n\n    switch (strategy) {\n      case 'truncate':\n        return value.substring(0, maxLength) + '...';\n      case 'replace':\n        return replacementText;\n      case 'hide':\n        return '[HIDDEN]';\n      default:\n        return value;\n    }\n  }\n\n  private isFieldExcluded(fieldPath: string): boolean {\n    return this.config.excludedFields?.includes(fieldPath) || false;\n  }\n\n  private findFieldRule(fieldPath: string): FieldTruncationRule | undefined {\n    return this.config.fields?.find(rule => rule.fieldPath === fieldPath);\n  }\n\n  private findPathPatternRule(fieldPath: string): PathPatternRule | undefined {\n    return this.config.pathPatterns?.find(rule => this.pathMatchesPattern(fieldPath, rule.pattern));\n  }\n\n  private shouldApplyPathPattern(fieldPath: string, value: any, rule: PathPatternRule): boolean {\n    if (!rule.condition || rule.condition === 'always') {\n      return true;\n    }\n\n    if (rule.condition === 'if_long' && typeof value === 'string') {\n      return value.length > (rule.maxLength || this.config.defaultMaxLength!);\n    }\n\n    if (rule.condition === 'if_nested') {\n      return fieldPath.split('.').length > 3; // Arbitrary nested threshold\n    }\n\n    return true;\n  }\n\n  private pathMatchesPattern(path: string, pattern: string): boolean {\n    // Convert pattern to regex\n    const regexPattern = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*/g, '.*')\n      .replace(/\\?/g, '.');\n\n    const regex = new RegExp(`^${regexPattern}$`);\n    return regex.test(path);\n  }\n\n  private applyFieldRule(\n    value: any,\n    fieldPath: string,\n    rule: FieldTruncationRule,\n    stats: TruncationStatistics,\n    context: TruncationContext\n  ): any {\n    // Check condition if provided\n    if (rule.condition && !rule.condition(value, context)) {\n      return value;\n    }\n\n    const strategy = rule.strategy || this.config.defaultStrategy!;\n    const maxLength = rule.maxLength || this.config.defaultMaxLength!;\n    const replacementText = rule.replacementText || this.config.defaultReplacementText!;\n\n    return this.applyTruncation(value, fieldPath, strategy, maxLength, replacementText, stats);\n  }\n\n  private applyPathPatternRule(\n    value: any,\n    fieldPath: string,\n    rule: PathPatternRule,\n    stats: TruncationStatistics,\n    context: TruncationContext\n  ): any {\n    const strategy = rule.strategy || this.config.defaultStrategy!;\n    const maxLength = rule.maxLength || this.config.defaultMaxLength!;\n    const replacementText = rule.replacementText || this.config.defaultReplacementText!;\n\n    return this.applyTruncation(value, fieldPath, strategy, maxLength, replacementText, stats);\n  }\n\n  private applyTruncation(\n    value: any,\n    fieldPath: string,\n    strategy: 'truncate' | 'replace' | 'hide',\n    maxLength: number,\n    replacementText: string,\n    stats: TruncationStatistics\n  ): any {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    if (value.length <= maxLength) {\n      return value;\n    }\n\n    let result: string;\n    let actionType: keyof TruncationStatistics;\n\n    switch (strategy) {\n      case 'truncate':\n        result = value.substring(0, maxLength) + '...';\n        actionType = 'totalTruncated';\n        break;\n      case 'replace':\n        result = replacementText;\n        actionType = 'totalReplaced';\n        break;\n      case 'hide':\n        result = '[HIDDEN]';\n        actionType = 'totalHidden';\n        break;\n      default:\n        return value;\n    }\n\n    // Update statistics\n    this.updateFieldStats(fieldPath, stats, actionType.replace('total', '').toLowerCase() as any, 1);\n    stats[actionType]++;\n\n    return result;\n  }\n\n  private getFieldMaxLength(fieldPath: string): number {\n    const rule = this.findFieldRule(fieldPath);\n    if (rule && rule.maxLength) {\n      return rule.maxLength;\n    }\n\n    const patternRule = this.findPathPatternRule(fieldPath);\n    if (patternRule && patternRule.maxLength) {\n      return patternRule.maxLength;\n    }\n\n    return this.config.defaultMaxLength!;\n  }\n\n  private getFieldTruncationStrategy(fieldPath: string): 'truncate' | 'replace' | 'hide' {\n    const rule = this.findFieldRule(fieldPath);\n    if (rule && rule.strategy) {\n      return rule.strategy;\n    }\n\n    const patternRule = this.findPathPatternRule(fieldPath);\n    if (patternRule && patternRule.strategy) {\n      return patternRule.strategy;\n    }\n\n    return this.config.defaultStrategy!;\n  }\n\n  private getFieldReplacementText(fieldPath: string): string {\n    const rule = this.findFieldRule(fieldPath);\n    if (rule && rule.replacementText) {\n      return rule.replacementText;\n    }\n\n    const patternRule = this.findPathPatternRule(fieldPath);\n    if (patternRule && patternRule.replacementText) {\n      return patternRule.replacementText;\n    }\n\n    return this.config.defaultReplacementText!;\n  }\n\n  private updateFieldStats(\n    fieldPath: string,\n    stats: TruncationStatistics,\n    actionType: 'truncated' | 'replaced' | 'hidden',\n    count: number\n  ): void {\n    if (!stats.fieldStats.has(fieldPath)) {\n      stats.fieldStats.set(fieldPath, {\n        processed: 0,\n        truncated: 0,\n        replaced: 0,\n        hidden: 0\n      });\n    }\n\n    const fieldStats = stats.fieldStats.get(fieldPath)!;\n    fieldStats[actionType] += count;\n  }\n\n  private updateStatistics(stats: TruncationStatistics): void {\n    this.statistics.totalProcessed += stats.totalProcessed;\n    this.statistics.totalTruncated += stats.totalTruncated;\n    this.statistics.totalReplaced += stats.totalReplaced;\n    this.statistics.totalHidden += stats.totalHidden;\n\n    // Merge field statistics\n    for (const [field, fieldStats] of stats.fieldStats.entries()) {\n      if (!this.statistics.fieldStats.has(field)) {\n        this.statistics.fieldStats.set(field, { ...fieldStats });\n      } else {\n        const existing = this.statistics.fieldStats.get(field)!;\n        existing.processed += fieldStats.processed;\n        existing.truncated += fieldStats.truncated;\n        existing.replaced += fieldStats.replaced;\n        existing.hidden += fieldStats.hidden;\n      }\n    }\n\n    // Update average savings\n    const totalActions = this.statistics.totalTruncated + this.statistics.totalReplaced + this.statistics.totalHidden;\n    this.statistics.averageSavings = totalActions > 0 ?\n      (this.statistics.totalTruncated + this.statistics.totalReplaced + this.statistics.totalHidden) / this.statistics.totalProcessed : 0;\n  }\n}","import {\n  RequestContext,\n  RequestContextOptions,\n  TraceReport,\n  RecordingConfigSnapshot,\n  ChainStatus,\n  BaseModuleRecordingConfig,\n  ModuleRecordingConfig\n} from '../interfaces/Recording';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Request context manager that handles cross-module chain tracking\n */\nexport class RequestContextManager {\n  private activeContexts: Map<string, RequestContext> = new Map();\n  private contextHistory: Map<string, RequestContext[]> = new Map();\n  private chainBreakpoints: Map<string, { timestamp: number; reason: string; details: string; repairAttempted: boolean }> = new Map();\n  private moduleContexts: Map<string, string[]> = new Map(); // moduleId -> contextIds\n  private globalSessionId: string;\n\n  constructor() {\n    this.globalSessionId = uuidv4();\n  }\n\n  // ========================================\n  // Context Creation and Management\n  // ========================================\n\n  /**\n   * Create new request context\n   */\n  createContext(options: RequestContextOptions = {}): RequestContext {\n    const requestId = uuidv4();\n    const sessionId = this.globalSessionId;\n    const traceId = uuidv4();\n    const chainId = options.inheritContext ?\n      (this.activeContexts.get(options.inheritContext)?.chainId || uuidv4()) :\n      uuidv4();\n\n    let context: RequestContext;\n\n    if (options.inheritContext && this.activeContexts.has(options.inheritContext)) {\n      // Inherit from existing context\n      const existing = this.activeContexts.get(options.inheritContext)!;\n      context = {\n        ...existing,\n        requestId,\n        currentModule: this.extractModuleName(options.customConfig?.module) || 'unknown',\n        moduleStack: [...existing.moduleStack, this.extractModuleName(options.customConfig?.module) || 'unknown'],\n        configSnapshot: this.createConfigSnapshot(options.customConfig || existing.configSnapshot)\n      };\n    } else {\n      // Create new context\n      const basePath = this.resolveBasePath(options.customConfig);\n      context = {\n        requestId,\n        sessionId,\n        traceId,\n        chainId,\n        startModule: this.extractModuleName(options.customConfig?.module) || 'unknown',\n        startTime: Date.now(),\n        basePath,\n        currentPath: basePath,\n        pathHistory: [],\n        configSnapshot: this.createConfigSnapshot(options.customConfig),\n        sharedData: new Map(),\n        status: 'active',\n        currentModule: this.extractModuleName(options.customConfig?.module) || 'unknown',\n        moduleStack: [this.extractModuleName(options.customConfig?.module) || 'unknown']\n      };\n    }\n\n    this.activeContexts.set(requestId, context);\n\n    // Register with module contexts\n    const moduleId = context.currentModule;\n    if (!this.moduleContexts.has(moduleId)) {\n      this.moduleContexts.set(moduleId, []);\n    }\n    this.moduleContexts.get(moduleId)!.push(requestId);\n\n    return context;\n  }\n\n  /**\n   * Get request context\n   */\n  getContext(requestId: string): RequestContext | undefined {\n    return this.activeContexts.get(requestId);\n  }\n\n  /**\n   * Update request context\n   */\n  updateContext(requestId: string, updates: Partial<RequestContext>): boolean {\n    const context = this.activeContexts.get(requestId);\n    if (!context) return false;\n\n    // Detect path changes and record in history\n    if (updates.currentPath && updates.currentPath !== context.currentPath) {\n      context.pathHistory.push({\n        moduleId: updates.currentModule || context.currentModule,\n        path: updates.currentPath,\n        timestamp: Date.now()\n      });\n\n      // Check for chain breakpoints due to path changes\n      this.detectChainBreakpoint(context, 'path_change', `Path changed from ${context.currentPath} to ${updates.currentPath}`);\n    }\n\n    // Update context\n    Object.assign(context, updates);\n\n    // Update module registration if module changed\n    if (updates.currentModule && updates.currentModule !== context.currentModule) {\n      this.updateModuleRegistration(context.requestId, context.currentModule, updates.currentModule);\n    }\n\n    return true;\n  }\n\n  /**\n   * Complete request context\n   */\n  completeContext(requestId: string, status: 'completed' | 'error' = 'completed'): boolean {\n    const context = this.activeContexts.get(requestId);\n    if (!context) return false;\n\n    context.status = status;\n\n    // Generate trace report\n    const report = this.generateTraceReport(context);\n\n    // Move to history\n    if (!this.contextHistory.has(context.sessionId)) {\n      this.contextHistory.set(context.sessionId, []);\n    }\n    this.contextHistory.get(context.sessionId)!.push(context);\n\n    // Remove from active contexts\n    this.activeContexts.delete(requestId);\n\n    // Remove from module contexts\n    this.removeFromModuleContexts(requestId, context.currentModule);\n\n    return true;\n  }\n\n  /**\n   * Get all active contexts\n   */\n  getActiveContexts(): RequestContext[] {\n    return Array.from(this.activeContexts.values());\n  }\n\n  /**\n   * Get contexts by session\n   */\n  getContextsBySession(sessionId: string): RequestContext[] {\n    const active = Array.from(this.activeContexts.values()).filter(ctx => ctx.sessionId === sessionId);\n    const history = this.contextHistory.get(sessionId) || [];\n    return [...active, ...history];\n  }\n\n  /**\n   * Get contexts by module\n   */\n  getContextsByModule(moduleId: string): RequestContext[] {\n    const contextIds = this.moduleContexts.get(moduleId) || [];\n    return contextIds.map(id => this.activeContexts.get(id)).filter(Boolean) as RequestContext[];\n  }\n\n  // ========================================\n  // Chain Management\n  // ========================================\n\n  /**\n   * Get chain status\n   */\n  getChainStatus(chainId: string): ChainStatus | undefined {\n    const contexts = Array.from(this.activeContexts.values()).filter(ctx => ctx.chainId === chainId);\n    if (contexts.length === 0) return undefined;\n\n    const primaryContext = contexts[0];\n    const duration = Date.now() - primaryContext.startTime;\n\n    return {\n      traceId: primaryContext.traceId,\n      requestId: primaryContext.requestId,\n      currentModule: primaryContext.currentModule,\n      moduleStack: primaryContext.moduleStack,\n      pathHistory: primaryContext.pathHistory,\n      status: primaryContext.status,\n      duration\n    };\n  }\n\n  /**\n   * Detect chain breakpoint\n   */\n  private detectChainBreakpoint(context: RequestContext, reason: string, details: string): void {\n    const breakpoint = {\n      timestamp: Date.now(),\n      reason,\n      details,\n      repairAttempted: false\n    };\n\n    this.chainBreakpoints.set(context.chainId, breakpoint);\n\n    // Attempt auto-repair if needed\n    this.attemptChainRepair(context, reason);\n  }\n\n  /**\n   * Attempt chain repair\n   */\n  private attemptChainRepair(context: RequestContext, reason: string): void {\n    const breakpoint = this.chainBreakpoints.get(context.chainId);\n    if (!breakpoint || breakpoint.repairAttempted) return;\n\n    breakpoint.repairAttempted = true;\n\n    // Simple repair strategies\n    switch (reason) {\n      case 'path_change':\n        // Add path change to shared data for tracking\n        context.sharedData.set('path_change_repair', {\n          timestamp: Date.now(),\n          oldPath: context.pathHistory[context.pathHistory.length - 2]?.path,\n          newPath: context.currentPath\n        });\n        break;\n\n      case 'module_timeout':\n        // Extend timeout and retry\n        context.sharedData.set('timeout_repair', {\n          timestamp: Date.now(),\n          extendedTimeout: true\n        });\n        break;\n\n      default:\n        // Log breakpoint for manual intervention\n        context.sharedData.set('breakpoint_logged', {\n          timestamp: Date.now(),\n          reason,\n          requiresManualIntervention: true\n        });\n    }\n  }\n\n  /**\n   * Get chain breakpoints\n   */\n  getChainBreakpoints(chainId?: string): Array<{\n    chainId: string;\n    timestamp: number;\n    reason: string;\n    details: string;\n    repairAttempted: boolean;\n  }> {\n    if (chainId) {\n      const breakpoint = this.chainBreakpoints.get(chainId);\n      return breakpoint ? [{\n        chainId,\n        timestamp: breakpoint.timestamp,\n        reason: breakpoint.reason,\n        details: breakpoint.details,\n        repairAttempted: breakpoint.repairAttempted\n      }] : [];\n    }\n\n    return Array.from(this.chainBreakpoints.entries()).map(([chainId, breakpoint]) => ({\n      chainId,\n      timestamp: breakpoint.timestamp,\n      reason: breakpoint.reason,\n      details: breakpoint.details,\n      repairAttempted: breakpoint.repairAttempted\n    }));\n  }\n\n  /**\n   * Clear chain breakpoints\n   */\n  clearChainBreakpoints(chainId?: string): void {\n    if (chainId) {\n      this.chainBreakpoints.delete(chainId);\n    } else {\n      this.chainBreakpoints.clear();\n    }\n  }\n\n  // ========================================\n  // Shared Data Management\n  // ========================================\n\n  /**\n   * Set shared data\n   */\n  setSharedData(requestId: string, key: string, value: any): boolean {\n    const context = this.activeContexts.get(requestId);\n    if (!context) return false;\n\n    context.sharedData.set(key, value);\n    return true;\n  }\n\n  /**\n   * Get shared data\n   */\n  getSharedData(requestId: string, key: string): any | undefined {\n    const context = this.activeContexts.get(requestId);\n    return context?.sharedData.get(key);\n  }\n\n  /**\n   * Get all shared data\n   */\n  getAllSharedData(requestId: string): Map<string, any> | undefined {\n    const context = this.activeContexts.get(requestId);\n    return context?.sharedData;\n  }\n\n  /**\n   * Share data across chain\n   */\n  shareDataAcrossChain(chainId: string, key: string, value: any): number {\n    const contexts = Array.from(this.activeContexts.values()).filter(ctx => ctx.chainId === chainId);\n    let count = 0;\n\n    for (const context of contexts) {\n      context.sharedData.set(key, value);\n      count++;\n    }\n\n    return count;\n  }\n\n  // ========================================\n  // Trace Reporting\n  // ========================================\n\n  /**\n   * Generate trace report\n   */\n  generateTraceReport(context: RequestContext): TraceReport {\n    const duration = Date.now() - context.startTime;\n    const moduleTimings = this.calculateModuleTimings(context);\n    const errors = this.extractErrors(context);\n\n    return {\n      traceId: context.traceId,\n      requestId: context.requestId,\n      sessionId: context.sessionId,\n      chainId: context.chainId,\n      duration,\n      startModule: context.startModule,\n      moduleStack: context.moduleStack,\n      pathHistory: context.pathHistory,\n      status: context.status,\n      summary: this.generateTraceSummary(context),\n      performance: {\n        totalDuration: duration,\n        moduleTimings,\n        pathChanges: context.pathHistory.length\n      },\n      errors\n    };\n  }\n\n  /**\n   * Get trace reports for session\n   */\n  getTraceReports(sessionId?: string): TraceReport[] {\n    const targetSessionId = sessionId || this.globalSessionId;\n    const contexts = this.getContextsBySession(targetSessionId);\n\n    return contexts\n      .filter(ctx => ctx.status !== 'active') // Only completed contexts\n      .map(ctx => this.generateTraceReport(ctx));\n  }\n\n  // ========================================\n  // Module Management\n  // ========================================\n\n  /**\n   * Update module registration\n   */\n  private updateModuleRegistration(requestId: string, oldModule: string, newModule: string): void {\n    // Remove from old module\n    this.removeFromModuleContexts(requestId, oldModule);\n\n    // Add to new module\n    if (!this.moduleContexts.has(newModule)) {\n      this.moduleContexts.set(newModule, []);\n    }\n    this.moduleContexts.get(newModule)!.push(requestId);\n  }\n\n  /**\n   * Remove from module contexts\n   */\n  private removeFromModuleContexts(requestId: string, moduleId: string): void {\n    const contextIds = this.moduleContexts.get(moduleId);\n    if (contextIds) {\n      const index = contextIds.indexOf(requestId);\n      if (index > -1) {\n        contextIds.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Get active modules\n   */\n  getActiveModules(): string[] {\n    return Array.from(this.moduleContexts.keys()).filter(moduleId => {\n      const contextIds = this.moduleContexts.get(moduleId);\n      return contextIds && contextIds.length > 0;\n    });\n  }\n\n  /**\n   * Get module context count\n   */\n  getModuleContextCount(moduleId: string): number {\n    return this.moduleContexts.get(moduleId)?.length || 0;\n  }\n\n  // ========================================\n  // Helper Methods\n  // ========================================\n\n  private createConfigSnapshot(customConfig?: Partial<BaseModuleRecordingConfig>): RecordingConfigSnapshot {\n    // This would be populated with actual config data\n    return {\n      enabled: customConfig?.enabled ?? false,\n      basePath: customConfig?.basePath || './recording-logs',\n      port: customConfig?.port,\n      cycleConfig: customConfig?.cycle || {},\n      errorConfig: customConfig?.error || {},\n      truncationConfig: customConfig?.truncation || {},\n      timestamp: Date.now()\n    };\n  }\n\n  private resolveBasePath(customConfig?: Partial<BaseModuleRecordingConfig>): string {\n    return customConfig?.basePath || './recording-logs';\n  }\n\n  private calculateModuleTimings(context: RequestContext): Record<string, number> {\n    // Simple module timing calculation based on path history\n    const timings: Record<string, number> = {};\n    const pathChanges = context.pathHistory;\n\n    for (let i = 0; i < pathChanges.length; i++) {\n      const current = pathChanges[i];\n      const next = pathChanges[i + 1];\n\n      if (next) {\n        const duration = next.timestamp - current.timestamp;\n        timings[current.moduleId] = (timings[current.moduleId] || 0) + duration;\n      }\n    }\n\n    return timings;\n  }\n\n  private extractErrors(context: RequestContext): Array<{\n    moduleId: string;\n    error: string;\n    timestamp: number;\n  }> {\n    const errors: Array<{ moduleId: string; error: string; timestamp: number }> = [];\n\n    // Extract errors from shared data\n    for (const [key, value] of Array.from(context.sharedData.entries())) {\n      if (key.startsWith('error_') && typeof value === 'object') {\n        errors.push({\n          moduleId: value.moduleId || 'unknown',\n          error: value.message || String(value),\n          timestamp: value.timestamp || Date.now()\n        });\n      }\n    }\n\n    return errors;\n  }\n\n  private generateTraceSummary(context: RequestContext): string {\n    const pathChanges = context.pathHistory.length;\n    const moduleCount = new Set(context.moduleStack).size;\n    const duration = Date.now() - context.startTime;\n\n    return `Trace completed: ${moduleCount} modules, ${pathChanges} path changes, ${duration}ms duration`;\n  }\n\n  /**\n   * Cleanup old contexts\n   */\n  cleanup(maxAge: number = 24 * 60 * 60 * 1000): number {\n    const cutoffTime = Date.now() - maxAge;\n    let cleanedCount = 0;\n\n    // Clean history\n    for (const [sessionId, contexts] of Array.from(this.contextHistory.entries())) {\n      const filtered = contexts.filter((ctx: RequestContext) => ctx.startTime > cutoffTime);\n      if (filtered.length !== contexts.length) {\n        this.contextHistory.set(sessionId, filtered);\n        cleanedCount += contexts.length - filtered.length;\n      }\n    }\n\n    // Clean breakpoints\n    for (const [chainId, breakpoint] of Array.from(this.chainBreakpoints.entries())) {\n      if (breakpoint.timestamp < cutoffTime) {\n        this.chainBreakpoints.delete(chainId);\n        cleanedCount++;\n      }\n    }\n\n    return cleanedCount;\n  }\n\n  /**\n   * Get statistics\n   */\n  getStatistics(): {\n    activeContexts: number;\n    totalContexts: number;\n    chainBreakpoints: number;\n    activeModules: number;\n    sessionCount: number;\n  } {\n    return {\n      activeContexts: this.activeContexts.size,\n      totalContexts: this.activeContexts.size + Array.from(this.contextHistory.values()).reduce((sum, ctxs) => sum + ctxs.length, 0),\n      chainBreakpoints: this.chainBreakpoints.size,\n      activeModules: this.getActiveModules().length,\n      sessionCount: this.contextHistory.size + 1 // +1 for current session\n    };\n  }\n\n  private extractModuleName(module: string | ModuleRecordingConfig | undefined): string | undefined {\n    if (!module) return undefined;\n    if (typeof module === 'string') return module;\n    return module.enabled ? 'module-config' : 'unknown';\n  }\n}","import {\n  GlobalRecordingConfig,\n  BaseModuleRecordingConfig,\n  ConfigUpdateResult,\n  ConfigSyncResult,\n  ConsistencyValidationResult,\n  ConfigChangeCallback,\n  ValidatedRecordingConfig\n} from '../interfaces/Recording';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Global configuration manager that ensures consistent configuration across modules\n */\nexport class GlobalConfigManager {\n  private globalConfig: GlobalRecordingConfig;\n  private configSubscribers: Map<string, ConfigChangeCallback> = new Map();\n  private validationHistory: Map<string, ConsistencyValidationResult> = new Map();\n  private consistencyInterval: NodeJS.Timeout | null = null;\n  private moduleConfigs: Map<string, BaseModuleRecordingConfig> = new Map();\n\n  constructor(baseConfig: BaseModuleRecordingConfig = {}) {\n    this.globalConfig = this.initializeGlobalConfig(baseConfig);\n    this.startConsistencyValidation();\n  }\n\n  // ========================================\n  // Global Configuration Management\n  // ========================================\n\n  /**\n   * Get global configuration\n   */\n  getGlobalConfig(): GlobalRecordingConfig {\n    return { ...this.globalConfig };\n  }\n\n  /**\n   * Update global configuration\n   */\n  async updateGlobalConfig(updates: Partial<GlobalRecordingConfig>): Promise<ConfigUpdateResult> {\n    try {\n      const oldConfig = { ...this.globalConfig };\n\n      // Update configuration\n      this.globalConfig = {\n        ...this.globalConfig,\n        ...updates,\n        lastUpdated: Date.now()\n      };\n\n      // Generate new version\n      this.globalConfig.configVersion = this.generateConfigVersion();\n\n      // Validate consistency\n      const validationResult = this.validateGlobalConsistency();\n      if (!validationResult.valid) {\n        this.globalConfig = oldConfig; // Rollback\n        return {\n          success: false,\n          errors: validationResult.errors,\n          requiresForce: true\n        };\n      }\n\n      // Notify subscribers\n      await this.notifySubscribers(this.globalConfig.baseConfig);\n\n      return {\n        success: true,\n        configVersion: this.globalConfig.configVersion\n      };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n\n  /**\n   * Register module configuration\n   */\n  registerModuleConfig(moduleId: string, config: BaseModuleRecordingConfig): ConfigUpdateResult {\n    try {\n      const validatedConfig = this.validateModuleConfig(config);\n      if (!validatedConfig.isValid) {\n        return {\n          success: false,\n          errors: validatedConfig.errors\n        };\n      }\n\n      this.moduleConfigs.set(moduleId, config);\n\n      // Update global overrides\n      this.globalConfig.moduleOverrides.set(moduleId, config);\n\n      // Update timestamp\n      this.globalConfig.lastUpdated = Date.now();\n\n      return {\n        success: true,\n        configVersion: this.globalConfig.configVersion\n      };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n\n  /**\n   * Unregister module configuration\n   */\n  unregisterModuleConfig(moduleId: string): boolean {\n    const removed = this.moduleConfigs.delete(moduleId);\n    if (removed) {\n      this.globalConfig.moduleOverrides.delete(moduleId);\n      this.globalConfig.lastUpdated = Date.now();\n    }\n    return removed;\n  }\n\n  /**\n   * Get module configuration\n   */\n  getModuleConfig(moduleId: string): BaseModuleRecordingConfig | undefined {\n    return this.moduleConfigs.get(moduleId);\n  }\n\n  /**\n   * Get all module configurations\n   */\n  getAllModuleConfigs(): Record<string, BaseModuleRecordingConfig> {\n    const result: Record<string, BaseModuleRecordingConfig> = {};\n    for (const [moduleId, config] of this.moduleConfigs.entries()) {\n      result[moduleId] = { ...config };\n    }\n    return result;\n  }\n\n  // ========================================\n  // Configuration Synchronization\n  // ========================================\n\n  /**\n   * Synchronize configuration across modules\n   */\n  async syncConfiguration(moduleConfigs: Record<string, BaseModuleRecordingConfig>): Promise<ConfigSyncResult> {\n    const moduleResults: Record<string, boolean> = {};\n\n    for (const [moduleId, config] of Object.entries(moduleConfigs)) {\n      try {\n        const result = this.registerModuleConfig(moduleId, config);\n        moduleResults[moduleId] = result.success;\n      } catch (error) {\n        moduleResults[moduleId] = false;\n      }\n    }\n\n    // Notify all subscribers about the sync\n    await this.notifySubscribers(this.globalConfig.baseConfig);\n\n    return {\n      success: Object.values(moduleResults).every(success => success),\n      moduleResults\n    };\n  }\n\n  /**\n   * Force synchronization\n   */\n  async forceSync(): Promise<ConfigSyncResult> {\n    const allConfigs = this.getAllModuleConfigs();\n    return await this.syncConfiguration(allConfigs);\n  }\n\n  // ========================================\n  // Configuration Validation\n  // ========================================\n\n  /**\n   * Validate global configuration consistency\n   */\n  validateGlobalConsistency(): ConsistencyValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check base configuration validity\n    const baseValidation = this.validateModuleConfig(this.globalConfig.baseConfig);\n    if (!baseValidation.isValid) {\n      errors.push(...baseValidation.errors);\n    }\n\n    // Check module override consistency\n    for (const [moduleId, config] of this.moduleConfigs.entries()) {\n      const moduleValidation = this.validateModuleConfig(config);\n      if (!moduleValidation.isValid) {\n        errors.push(`Module ${moduleId}: ${moduleValidation.errors.join(', ')}`);\n      }\n\n      // Check compatibility with global base config\n      const compatibilityResult = this.checkModuleCompatibility(config, this.globalConfig.baseConfig);\n      if (!compatibilityResult.valid) {\n        warnings.push(`Module ${moduleId}: ${compatibilityResult.warnings.join(', ')}`);\n      }\n    }\n\n    // Check for conflicts between modules\n    const conflictCheck = this.checkModuleConflicts();\n    if (conflictCheck.conflicts.length > 0) {\n      errors.push(...conflictCheck.conflicts);\n    }\n\n    // Store validation result\n    const result: ConsistencyValidationResult = {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      details: {\n        modulesValidated: this.moduleConfigs.size,\n        conflictsFound: conflictCheck.conflicts.length,\n        lastChecked: Date.now()\n      }\n    };\n\n    this.validationHistory.set(this.globalConfig.configVersion, result);\n\n    return result;\n  }\n\n  /**\n   * Validate module configuration\n   */\n  validateModuleConfig(config: BaseModuleRecordingConfig): ValidatedRecordingConfig {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check required fields\n    if (config.enabled === undefined) {\n      warnings.push('Configuration does not specify enabled state');\n    }\n\n    // Check cycle configuration consistency\n    if (config.cycle?.enabled && !config.basePath) {\n      errors.push('Cycle recording requires basePath to be specified');\n    }\n\n    // Check error configuration consistency\n    if (config.error?.enabled && !config.error.basePath) {\n      warnings.push('Error recording enabled but no basePath specified');\n    }\n\n    // Check truncation configuration\n    if (config.truncation?.enabled) {\n      if (config.truncation.defaultMaxLength && config.truncation.defaultMaxLength <= 0) {\n        errors.push('Truncation maxLength must be positive');\n      }\n    }\n\n    return {\n      ...config,\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Check module compatibility with global config\n   */\n  private checkModuleCompatibility(\n    moduleConfig: BaseModuleRecordingConfig,\n    globalBaseConfig: BaseModuleRecordingConfig\n  ): { valid: boolean; warnings: string[] } {\n    const warnings: string[] = [];\n\n    // Check enabled state compatibility\n    if (globalBaseConfig.enabled && !moduleConfig.enabled) {\n      warnings.push('Module configuration disabled while global config is enabled');\n    }\n\n    // Check path compatibility\n    if (globalBaseConfig.basePath && moduleConfig.basePath &&\n        !moduleConfig.basePath.startsWith(globalBaseConfig.basePath)) {\n      warnings.push('Module basePath is not within global basePath');\n    }\n\n    // Check truncation compatibility\n    if (globalBaseConfig.truncation?.enabled && !moduleConfig.truncation?.enabled) {\n      warnings.push('Global truncation enabled but module has truncation disabled');\n    }\n\n    return {\n      valid: true, // Compatibility issues are warnings, not errors\n      warnings\n    };\n  }\n\n  /**\n   * Check for conflicts between modules\n   */\n  private checkModuleConflicts(): { conflicts: string[] } {\n    const conflicts: string[] = [];\n    const moduleEntries = Array.from(this.moduleConfigs.entries());\n\n    // Check for path conflicts\n    const paths = new Map<string, string[]>();\n    for (const [moduleId, config] of moduleEntries) {\n      if (config.basePath) {\n        if (!paths.has(config.basePath)) {\n          paths.set(config.basePath, []);\n        }\n        paths.get(config.basePath)!.push(moduleId);\n      }\n    }\n\n    for (const [path, modules] of paths.entries()) {\n      if (modules.length > 1) {\n        conflicts.push(`Path conflict: ${modules.join(', ')} all using path '${path}'`);\n      }\n    }\n\n    return { conflicts };\n  }\n\n  // ========================================\n  // Subscription Management\n  // ========================================\n\n  /**\n   * Subscribe to configuration changes\n   */\n  subscribe(moduleId: string, callback: ConfigChangeCallback): void {\n    this.configSubscribers.set(moduleId, callback);\n\n    // Send current configuration immediately\n    try {\n      callback(this.globalConfig.baseConfig);\n    } catch (error) {\n      console.error(`[GlobalConfigManager] Error sending initial config to ${moduleId}:`, error);\n    }\n  }\n\n  /**\n   * Unsubscribe from configuration changes\n   */\n  unsubscribe(moduleId: string): boolean {\n    return this.configSubscribers.delete(moduleId);\n  }\n\n  /**\n   * Notify all subscribers of configuration changes\n   */\n  private async notifySubscribers(config: BaseModuleRecordingConfig): Promise<void> {\n    const promises = Array.from(this.configSubscribers.entries()).map(async ([moduleId, callback]) => {\n      try {\n        await callback(config);\n      } catch (error) {\n        console.error(`[GlobalConfigManager] Error notifying ${moduleId} of config change:`, error);\n      }\n    });\n\n    await Promise.allSettled(promises);\n  }\n\n  // ========================================\n  // Consistency Validation\n  // ========================================\n\n  /**\n   * Start consistency validation interval\n   */\n  private startConsistencyValidation(): void {\n    if (this.consistencyInterval) {\n      clearInterval(this.consistencyInterval);\n    }\n\n    this.consistencyInterval = setInterval(() => {\n      if (this.globalConfig.consistency.enforced) {\n        const result = this.validateGlobalConsistency();\n        if (!result.valid) {\n          console.warn('[GlobalConfigManager] Consistency validation failed:', result.errors);\n        }\n      }\n    }, this.globalConfig.consistency.validationInterval);\n  }\n\n  /**\n   * Stop consistency validation\n   */\n  stopConsistencyValidation(): void {\n    if (this.consistencyInterval) {\n      clearInterval(this.consistencyInterval);\n      this.consistencyInterval = null;\n    }\n  }\n\n  /**\n   * Get validation history\n   */\n  getValidationHistory(version?: string): ConsistencyValidationResult[] {\n    if (version) {\n      const result = this.validationHistory.get(version);\n      return result ? [result] : [];\n    }\n\n    return Array.from(this.validationHistory.values());\n  }\n\n  /**\n   * Get latest validation result\n   */\n  getLatestValidation(): ConsistencyValidationResult | undefined {\n    const versions = Array.from(this.validationHistory.keys()).sort();\n    if (versions.length === 0) return undefined;\n    return this.validationHistory.get(versions[versions.length - 1]);\n  }\n\n  // ========================================\n  // Configuration Export/Import\n  // ========================================\n\n  /**\n   * Export configuration\n   */\n  exportConfiguration(): {\n    globalConfig: GlobalRecordingConfig;\n    moduleConfigs: Record<string, BaseModuleRecordingConfig>;\n    exportTime: number;\n    version: string;\n  } {\n    return {\n      globalConfig: this.getGlobalConfig(),\n      moduleConfigs: this.getAllModuleConfigs(),\n      exportTime: Date.now(),\n      version: this.globalConfig.configVersion\n    };\n  }\n\n  /**\n   * Import configuration\n   */\n  async importConfiguration(\n    data: {\n      globalConfig: GlobalRecordingConfig;\n      moduleConfigs: Record<string, BaseModuleRecordingConfig>;\n    },\n    force = false\n  ): Promise<ConfigUpdateResult> {\n    try {\n      // Import global config\n      const globalResult = await this.updateGlobalConfig(data.globalConfig);\n      if (!globalResult.success && !force) {\n        return globalResult;\n      }\n\n      // Import module configs\n      const syncResult = await this.syncConfiguration(data.moduleConfigs);\n      if (!syncResult.success && !force) {\n        return {\n          success: false,\n          errors: ['Module configuration synchronization failed']\n        };\n      }\n\n      return {\n        success: true,\n        configVersion: this.globalConfig.configVersion\n      };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [error instanceof Error ? error.message : String(error)]\n      };\n    }\n  }\n\n  // ========================================\n  // Helper Methods\n  // ========================================\n\n  private initializeGlobalConfig(baseConfig: BaseModuleRecordingConfig): GlobalRecordingConfig {\n    return {\n      sessionId: uuidv4(),\n      environment: process.env.NODE_ENV as any || 'development',\n      version: '1.0.0',\n      baseConfig,\n      moduleOverrides: new Map(),\n      configVersion: '1.0.0',\n      lastUpdated: Date.now(),\n      consistency: {\n        enforced: true,\n        validationInterval: 60000, // 1 minute\n        allowedDeviations: []\n      }\n    };\n  }\n\n  private generateConfigVersion(): string {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substring(2, 8);\n    return `${timestamp}-${random}`;\n  }\n\n  /**\n   * Get statistics\n   */\n  getStatistics(): {\n    moduleCount: number;\n    subscriberCount: number;\n    validationCount: number;\n    lastValidation: ConsistencyValidationResult | undefined;\n    configVersion: string;\n    uptime: number;\n  } {\n    const latestValidation = this.getLatestValidation();\n    const uptime = Date.now() - this.globalConfig.lastUpdated;\n\n    return {\n      moduleCount: this.moduleConfigs.size,\n      subscriberCount: this.configSubscribers.size,\n      validationCount: this.validationHistory.size,\n      lastValidation: latestValidation,\n      configVersion: this.globalConfig.configVersion,\n      uptime\n    };\n  }\n\n  /**\n   * Cleanup\n   */\n  destroy(): void {\n    this.stopConsistencyValidation();\n    this.configSubscribers.clear();\n    this.moduleConfigs.clear();\n    this.validationHistory.clear();\n  }\n}","import {\n  BaseModuleRecordingConfig,\n  ValidatedRecordingConfig,\n  CycleRecordingConfig,\n  ErrorRecordingConfig,\n  FieldTruncationConfig,\n  FileManagementConfig,\n  GlobalRecordingConfig,\n  ChainConfigValidationResult,\n  GlobalConsistencyResult\n} from '../interfaces/Recording';\n\n/**\n * Configuration validator that ensures all recording configurations are valid\n */\nexport class ConfigValidator {\n  private validationRules: Map<string, (config: any) => string[]> = new Map();\n\n  constructor() {\n    this.initializeValidationRules();\n  }\n\n  // ========================================\n  // Main Validation Methods\n  // ========================================\n\n  /**\n   * Validate complete recording configuration\n   */\n  validateRecordingConfig(config: BaseModuleRecordingConfig): ValidatedRecordingConfig {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate top-level configuration\n    errors.push(...this.validateTopLevelConfig(config));\n\n    // Validate sub-configurations if enabled\n    if (config.cycle?.enabled) {\n      errors.push(...this.validateCycleConfig(config.cycle));\n    }\n\n    if (config.error?.enabled) {\n      errors.push(...this.validateErrorConfig(config.error));\n    }\n\n    if (config.truncation?.enabled) {\n      errors.push(...this.validateTruncationConfig(config.truncation));\n    }\n\n    if (config.file) {\n      errors.push(...this.validateFileConfig(config.file));\n    }\n\n    // Check cross-configuration dependencies\n    errors.push(...this.validateConfigDependencies(config));\n\n    return {\n      ...config,\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * Validate global recording configuration\n   */\n  validateGlobalConfig(config: GlobalRecordingConfig): GlobalConsistencyResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate base configuration\n    const baseValidation = this.validateRecordingConfig(config.baseConfig);\n    if (!baseValidation.isValid) {\n      errors.push(...baseValidation.errors);\n    }\n\n    // Validate module overrides\n    for (const [moduleId, moduleConfig] of config.moduleOverrides.entries()) {\n      const moduleValidation = this.validateRecordingConfig(moduleConfig);\n      if (!moduleValidation.isValid) {\n        errors.push(`Module ${moduleId}: ${moduleValidation.errors.join(', ')}`);\n      }\n    }\n\n    // Validate consistency settings\n    errors.push(...this.validateConsistencySettings(config.consistency));\n\n    // Check version compatibility\n    if (!this.isValidVersion(config.version)) {\n      warnings.push(`Invalid version format: ${config.version}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      details: {\n        modulesValidated: config.moduleOverrides.size,\n        baseConfigValid: baseValidation.isValid,\n        consistencySettingsValid: errors.filter(e => e.includes('consistency')).length === 0\n      }\n    };\n  }\n\n  /**\n   * Validate chain configuration (multiple related modules)\n   */\n  validateChainConfig(moduleConfigs: Record<string, BaseModuleRecordingConfig>): ChainConfigValidationResult {\n    const moduleIssues: Record<string, string[]> = {};\n    const globalErrors: string[] = [];\n    const globalWarnings: string[] = [];\n\n    // Validate each module individually\n    for (const [moduleId, config] of Object.entries(moduleConfigs)) {\n      const validation = this.validateRecordingConfig(config);\n      if (!validation.isValid) {\n        moduleIssues[moduleId] = validation.errors;\n      }\n      if (validation.warnings.length > 0) {\n        if (!moduleIssues[moduleId]) {\n          moduleIssues[moduleId] = [];\n        }\n        moduleIssues[moduleId].push(...validation.warnings);\n      }\n    }\n\n    // Validate cross-module consistency\n    const crossModuleIssues = this.validateCrossModuleConsistency(moduleConfigs);\n    globalErrors.push(...crossModuleIssues.errors);\n    globalWarnings.push(...crossModuleIssues.warnings);\n\n    return {\n      valid: globalErrors.length === 0 && Object.keys(moduleIssues).length === 0,\n      errors: globalErrors,\n      warnings: globalWarnings,\n      moduleIssues\n    };\n  }\n\n  // ========================================\n  // Configuration Section Validators\n  // ========================================\n\n  private validateTopLevelConfig(config: BaseModuleRecordingConfig): string[] {\n    const errors: string[] = [];\n\n    // Check required fields\n    if (config.enabled === undefined) {\n      errors.push('enabled field is required');\n    }\n\n    if (config.enabled && !config.basePath) {\n      errors.push('basePath is required when recording is enabled');\n    }\n\n    // Validate basePath format\n    if (config.basePath) {\n      errors.push(...this.validatePath(config.basePath, 'basePath'));\n    }\n\n    // Validate port if specified\n    if (config.port !== undefined) {\n      if (!Number.isInteger(config.port) || config.port < 1 || config.port > 65535) {\n        errors.push('port must be an integer between 1 and 65535');\n      }\n    }\n\n    return errors;\n  }\n\n  private validateCycleConfig(config: CycleRecordingConfig): string[] {\n    const errors: string[] = [];\n\n    // Check required fields\n    if (!config.mode || !['disabled', 'single', 'cyclic'].includes(config.mode)) {\n      errors.push('cycle mode must be one of: disabled, single, cyclic');\n    }\n\n    // Validate path templates\n    if (config.cycleDirTemplate) {\n      errors.push(...this.validateTemplate(config.cycleDirTemplate, 'cycleDirTemplate'));\n    }\n\n    if (config.mainFileTemplate) {\n      errors.push(...this.validateTemplate(config.mainFileTemplate, 'mainFileTemplate'));\n    }\n\n    // Validate format\n    if (config.format && !['json', 'jsonl', 'csv'].includes(config.format)) {\n      errors.push('cycle format must be one of: json, jsonl, csv');\n    }\n\n    // Validate numeric values\n    if (config.maxCyclesRetained !== undefined && config.maxCyclesRetained < 1) {\n      errors.push('maxCyclesRetained must be at least 1');\n    }\n\n    return errors;\n  }\n\n  private validateErrorConfig(config: ErrorRecordingConfig): string[] {\n    const errors: string[] = [];\n\n    // Validate levels\n    if (config.levels) {\n      const validLevels = ['trace', 'debug', 'info', 'warning', 'error', 'fatal'];\n      const invalidLevels = config.levels.filter(level => !validLevels.includes(level));\n      if (invalidLevels.length > 0) {\n        errors.push(`Invalid error levels: ${invalidLevels.join(', ')}`);\n      }\n    }\n\n    // Validate categories\n    if (config.categories) {\n      const validCategories = ['network', 'validation', 'processing', 'system', 'security', 'business'];\n      const invalidCategories = config.categories.filter(cat => !validCategories.includes(cat));\n      if (invalidCategories.length > 0) {\n        errors.push(`Invalid error categories: ${invalidCategories.join(', ')}`);\n      }\n    }\n\n    // Validate path templates\n    if (config.indexFileTemplate) {\n      errors.push(...this.validateTemplate(config.indexFileTemplate, 'indexFileTemplate'));\n    }\n\n    if (config.detailFileTemplate) {\n      errors.push(...this.validateTemplate(config.detailFileTemplate, 'detailFileTemplate'));\n    }\n\n    // Validate formats\n    if (config.indexFormat && !['jsonl', 'csv'].includes(config.indexFormat)) {\n      errors.push('error indexFormat must be jsonl or csv');\n    }\n\n    if (config.detailFormat && !['json', 'pretty'].includes(config.detailFormat)) {\n      errors.push('error detailFormat must be json or pretty');\n    }\n\n    // Validate numeric values\n    if (config.maxErrorsRetained !== undefined && config.maxErrorsRetained < 1) {\n      errors.push('maxErrorsRetained must be at least 1');\n    }\n\n    return errors;\n  }\n\n  private validateTruncationConfig(config: FieldTruncationConfig): string[] {\n    const errors: string[] = [];\n\n    // Validate default strategy\n    if (config.defaultStrategy && !['truncate', 'replace', 'hide'].includes(config.defaultStrategy)) {\n      errors.push('defaultStrategy must be one of: truncate, replace, hide');\n    }\n\n    // Validate default max length\n    if (config.defaultMaxLength !== undefined && config.defaultMaxLength < 1) {\n      errors.push('defaultMaxLength must be at least 1');\n    }\n\n    // Validate field rules\n    if (config.fields) {\n      for (let i = 0; i < config.fields.length; i++) {\n        const rule = config.fields[i];\n        errors.push(...this.validateFieldRule(rule, `fields[${i}]`));\n      }\n    }\n\n    // Validate path patterns\n    if (config.pathPatterns) {\n      for (let i = 0; i < config.pathPatterns.length; i++) {\n        const pattern = config.pathPatterns[i];\n        errors.push(...this.validatePathPattern(pattern, `pathPatterns[${i}]`));\n      }\n    }\n\n    // Validate array truncation limit\n    if (config.arrayTruncateLimit !== undefined && config.arrayTruncateLimit < 1) {\n      errors.push('arrayTruncateLimit must be at least 1');\n    }\n\n    return errors;\n  }\n\n  private validateFileConfig(config: FileManagementConfig): string[] {\n    const errors: string[] = [];\n\n    // Validate numeric values\n    if (config.maxFileAge !== undefined && config.maxFileAge < 0) {\n      errors.push('maxFileAge must be non-negative');\n    }\n\n    if (config.maxFileSize !== undefined && config.maxFileSize < 1) {\n      errors.push('maxFileSize must be at least 1');\n    }\n\n    return errors;\n  }\n\n  // ========================================\n  // Cross-Validation Methods\n  // ========================================\n\n  private validateConfigDependencies(config: BaseModuleRecordingConfig): string[] {\n    const errors: string[] = [];\n\n    // Check that cycle recording has proper base path\n    if (config.cycle?.enabled && !config.basePath) {\n      errors.push('Cycle recording requires basePath to be specified');\n    }\n\n    // Check that error recording has proper base path\n    if (config.error?.enabled && !config.basePath) {\n      errors.push('Error recording requires basePath to be specified');\n    }\n\n    // Check truncation dependencies\n    if (config.truncation?.enabled && (!config.cycle?.enabled && !config.error?.enabled)) {\n      errors.push('Truncation requires either cycle or error recording to be enabled');\n    }\n\n    return errors;\n  }\n\n  private validateCrossModuleConsistency(moduleConfigs: Record<string, BaseModuleRecordingConfig>): {\n    errors: string[];\n    warnings: string[];\n  } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    const configs = Object.values(moduleConfigs);\n\n    // Check for consistent enabled states\n    const enabledStates = configs.map(c => c.enabled);\n    if (new Set(enabledStates).size > 1) {\n      warnings.push('Modules have inconsistent enabled states');\n    }\n\n    // Check for path conflicts\n    const basePaths = configs.map(c => c.basePath).filter(Boolean);\n    if (new Set(basePaths).size !== basePaths.length) {\n      errors.push('Multiple modules are using the same basePath');\n    }\n\n    // Check for format consistency\n    const cycleFormats = configs.map(c => c.cycle?.format).filter(Boolean);\n    if (new Set(cycleFormats).size > 1) {\n      warnings.push('Modules have inconsistent cycle recording formats');\n    }\n\n    // Check for port conflicts\n    const ports = configs.map(c => c.port).filter(Boolean);\n    const uniquePorts = new Set(ports);\n    if (uniquePorts.size !== ports.length) {\n      errors.push('Multiple modules are configured to use the same port');\n    }\n\n    return { errors, warnings };\n  }\n\n  private validateConsistencySettings(consistency: any): string[] {\n    const errors: string[] = [];\n\n    if (consistency.validationInterval !== undefined && consistency.validationInterval < 1000) {\n      errors.push('validationInterval must be at least 1000ms');\n    }\n\n    if (consistency.allowedDeviations && !Array.isArray(consistency.allowedDeviations)) {\n      errors.push('allowedDeviations must be an array');\n    }\n\n    return errors;\n  }\n\n  // ========================================\n  // Helper Validators\n  // ========================================\n\n  private validatePath(path: string, fieldName: string): string[] {\n    const errors: string[] = [];\n\n    if (typeof path !== 'string' || path.trim() === '') {\n      errors.push(`${fieldName} must be a non-empty string`);\n      return errors;\n    }\n\n    // Check for invalid characters\n    const invalidChars = ['<', '>', ':', '\"', '|', '?', '*'];\n    if (invalidChars.some(char => path.includes(char))) {\n      errors.push(`${fieldName} contains invalid characters: ${invalidChars.join(', ')}`);\n    }\n\n    // Check path length\n    if (path.length > 260) {\n      errors.push(`${fieldName} is too long (max 260 characters)`);\n    }\n\n    return errors;\n  }\n\n  private validateTemplate(template: string, fieldName: string): string[] {\n    const errors: string[] = [];\n\n    if (typeof template !== 'string' || template.trim() === '') {\n      errors.push(`${fieldName} must be a non-empty string`);\n      return errors;\n    }\n\n    // Check for invalid template variables\n    const invalidVariables = template.match(/\\$\\{([^}]+)\\}/g);\n    if (invalidVariables) {\n      const validVariables = ['cycleId', 'requestId', 'sessionId', 'timestamp', 'date', 'time', 'format', 'type', 'index', 'errorId'];\n      const invalidVars = invalidVariables.filter(v => {\n        const varName = v.replace(/[${}]/g, '');\n        return !validVariables.includes(varName);\n      });\n\n      if (invalidVars.length > 0) {\n        errors.push(`${fieldName} contains invalid template variables: ${invalidVars.join(', ')}`);\n      }\n    }\n\n    return errors;\n  }\n\n  private validateFieldRule(rule: any, fieldPath: string): string[] {\n    const errors: string[] = [];\n\n    if (!rule.fieldPath || typeof rule.fieldPath !== 'string') {\n      errors.push(`${fieldPath}.fieldPath is required and must be a string`);\n    }\n\n    if (rule.strategy && !['truncate', 'replace', 'hide'].includes(rule.strategy)) {\n      errors.push(`${fieldPath}.strategy must be one of: truncate, replace, hide`);\n    }\n\n    if (rule.maxLength !== undefined && rule.maxLength < 1) {\n      errors.push(`${fieldPath}.maxLength must be at least 1`);\n    }\n\n    if (rule.priority !== undefined && (!Number.isInteger(rule.priority) || rule.priority < 0)) {\n      errors.push(`${fieldPath}.priority must be a non-negative integer`);\n    }\n\n    return errors;\n  }\n\n  private validatePathPattern(pattern: any, fieldPath: string): string[] {\n    const errors: string[] = [];\n\n    if (!pattern.pattern || typeof pattern.pattern !== 'string') {\n      errors.push(`${fieldPath}.pattern is required and must be a string`);\n    }\n\n    if (pattern.condition && !['always', 'if_long', 'if_nested'].includes(pattern.condition)) {\n      errors.push(`${fieldPath}.condition must be one of: always, if_long, if_nested`);\n    }\n\n    if (pattern.strategy && !['truncate', 'replace', 'hide'].includes(pattern.strategy)) {\n      errors.push(`${fieldPath}.strategy must be one of: truncate, replace, hide`);\n    }\n\n    if (pattern.maxLength !== undefined && pattern.maxLength < 1) {\n      errors.push(`${fieldPath}.maxLength must be at least 1`);\n    }\n\n    return errors;\n  }\n\n  private isValidVersion(version: string): boolean {\n    // Simple version validation (semantic versioning pattern)\n    const versionRegex = /^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?(\\+[a-zA-Z0-9-]+)?$/;\n    return versionRegex.test(version);\n  }\n\n  // ========================================\n  // Validation Rules Management\n  // ========================================\n\n  private initializeValidationRules(): void {\n    // Add custom validation rules if needed\n    this.validationRules.set('customPathRule', (config: any) => {\n      const errors: string[] = [];\n      // Custom validation logic\n      return errors;\n    });\n  }\n\n  /**\n   * Add custom validation rule\n   */\n  addValidationRule(name: string, rule: (config: any) => string[]): void {\n    this.validationRules.set(name, rule);\n  }\n\n  /**\n   * Remove custom validation rule\n   */\n  removeValidationRule(name: string): boolean {\n    return this.validationRules.delete(name);\n  }\n\n  /**\n   * Get all validation rules\n   */\n  getValidationRules(): Array<{ name: string; description: string }> {\n    return Array.from(this.validationRules.keys()).map(name => ({\n      name,\n      description: `Custom validation rule: ${name}`\n    }));\n  }\n}","import {\n  RecordingTemplates,\n  CycleRecordingConfig,\n  ErrorRecordingConfig,\n  BaseModuleRecordingConfig\n} from '../interfaces/Recording';\n\n/**\n * Path resolver that handles template-based path resolution with variable substitution\n */\nexport class PathResolver {\n  private globalVariables: Map<string, string> = new Map();\n  private customTemplates: Map<string, string> = new Map();\n\n  constructor() {\n    this.initializeGlobalVariables();\n  }\n\n  // ========================================\n  // Template Resolution Methods\n  // ========================================\n\n  /**\n   * Resolve a path template with variables\n   */\n  resolveTemplate(template: string, variables: Record<string, any> = {}): string {\n    if (!template || typeof template !== 'string') {\n      return template || '';\n    }\n\n    let result = template;\n\n    // Apply global variables first\n    for (const [key, value] of this.globalVariables.entries()) {\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), value);\n    }\n\n    // Apply custom templates\n    for (const [key, value] of this.customTemplates.entries()) {\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), value);\n    }\n\n    // Apply provided variables\n    for (const [key, value] of Object.entries(variables)) {\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), String(value));\n    }\n\n    // Apply built-in functions\n    result = this.applyBuiltInFunctions(result);\n\n    // Clean up unresolved variables\n    result = result.replace(/\\$\\{[^}]+\\}/g, '');\n\n    return result;\n  }\n\n  /**\n   * Resolve cycle recording path\n   */\n  resolveCyclePath(config: CycleRecordingConfig, variables: {\n    cycleId: string;\n    requestId?: string;\n    sessionId?: string;\n    timestamp: number;\n  }): string {\n    const basePath = config.basePath || './cycle-logs';\n    const template = config.cycleDirTemplate || 'cycles/${cycleId}';\n\n    const extendedVariables = {\n      ...variables,\n      date: new Date(variables.timestamp).toISOString().split('T')[0],\n      time: new Date(variables.timestamp).toISOString().split('T')[1].split('.')[0],\n      timestamp: variables.timestamp,\n      year: new Date(variables.timestamp).getFullYear(),\n      month: String(new Date(variables.timestamp).getMonth() + 1).padStart(2, '0'),\n      day: String(new Date(variables.timestamp).getDate()).padStart(2, '0'),\n      hour: String(new Date(variables.timestamp).getHours()).padStart(2, '0'),\n      minute: String(new Date(variables.timestamp).getMinutes()).padStart(2, '0'),\n      second: String(new Date(variables.timestamp).getSeconds()).padStart(2, '0'),\n      millisecond: String(new Date(variables.timestamp).getMilliseconds()).padStart(3, '0')\n    };\n\n    const resolvedPath = this.resolveTemplate(template, extendedVariables);\n\n    // Combine with base path\n    return this.joinPaths(basePath, resolvedPath);\n  }\n\n  /**\n   * Resolve error recording path\n   */\n  resolveErrorPath(config: ErrorRecordingConfig, variables: {\n    errorId: string;\n    timestamp: number;\n    level?: string;\n    category?: string;\n  }): string {\n    const basePath = config.basePath || './error-logs';\n    const template = config.detailFileTemplate || 'errors/${errorId}.json';\n\n    const extendedVariables = {\n      ...variables,\n      date: new Date(variables.timestamp).toISOString().split('T')[0],\n      time: new Date(variables.timestamp).toISOString().split('T')[1].split('.')[0],\n      timestamp: variables.timestamp,\n      year: new Date(variables.timestamp).getFullYear(),\n      month: String(new Date(variables.timestamp).getMonth() + 1).padStart(2, '0'),\n      day: String(new Date(variables.timestamp).getDate()).padStart(2, '0'),\n      hour: String(new Date(variables.timestamp).getHours()).padStart(2, '0'),\n      minute: String(new Date(variables.timestamp).getMinutes()).padStart(2, '0'),\n      second: String(new Date(variables.timestamp).getSeconds()).padStart(2, '0'),\n      level: variables.level || 'unknown',\n      category: variables.category || 'system'\n    };\n\n    const resolvedPath = this.resolveTemplate(template, extendedVariables);\n\n    // Combine with base path\n    return this.joinPaths(basePath, resolvedPath);\n  }\n\n  /**\n   * Resolve complete file path for cycle recording\n   */\n  resolveCycleFilePath(config: CycleRecordingConfig, variables: {\n    cycleId: string;\n    type: 'start' | 'middle' | 'end';\n    index: number;\n    format: string;\n    timestamp: number;\n  }): string {\n    const cyclePath = this.resolveCyclePath(config, variables);\n    const fileTemplate = config.mainFileTemplate || 'main.${format}';\n\n    const fileVariables = {\n      ...variables,\n      date: new Date(variables.timestamp).toISOString().split('T')[0],\n      time: new Date(variables.timestamp).toISOString().split('T')[1].split('.')[0],\n      paddedIndex: String(variables.index).padStart(6, '0'),\n      fileType: variables.type,\n      extension: this.getFormatExtension(variables.format)\n    };\n\n    const fileName = this.resolveTemplate(fileTemplate, fileVariables);\n    return this.joinPaths(cyclePath, fileName);\n  }\n\n  /**\n   * Resolve error index file path\n   */\n  resolveErrorIndexPath(config: ErrorRecordingConfig, variables: {\n    date?: string;\n    timestamp: number;\n  }): string {\n    const basePath = config.basePath || './error-logs';\n    const template = config.indexFileTemplate || 'errors/index.jsonl';\n\n    const extendedVariables = {\n      ...variables,\n      date: variables.date || new Date(variables.timestamp).toISOString().split('T')[0],\n      time: new Date(variables.timestamp).toISOString().split('T')[1].split('.')[0],\n      timestamp: variables.timestamp,\n      year: new Date(variables.timestamp).getFullYear(),\n      month: String(new Date(variables.timestamp).getMonth() + 1).padStart(2, '0'),\n      day: String(new Date(variables.timestamp).getDate()).padStart(2, '0')\n    };\n\n    const resolvedPath = this.resolveTemplate(template, extendedVariables);\n\n    // Combine with base path\n    return this.joinPaths(basePath, resolvedPath);\n  }\n\n  // ========================================\n  // Variable Management\n  // ========================================\n\n  /**\n   * Set global variable\n   */\n  setGlobalVariable(name: string, value: string): void {\n    this.globalVariables.set(name, value);\n  }\n\n  /**\n   * Get global variable\n   */\n  getGlobalVariable(name: string): string | undefined {\n    return this.globalVariables.get(name);\n  }\n\n  /**\n   * Remove global variable\n   */\n  removeGlobalVariable(name: string): boolean {\n    return this.globalVariables.delete(name);\n  }\n\n  /**\n   * Get all global variables\n   */\n  getGlobalVariables(): Record<string, string> {\n    const result: Record<string, string> = {};\n    for (const [key, value] of this.globalVariables.entries()) {\n      result[key] = value;\n    }\n    return result;\n  }\n\n  /**\n   * Set custom template\n   */\n  setCustomTemplate(name: string, template: string): void {\n    this.customTemplates.set(name, template);\n  }\n\n  /**\n   * Get custom template\n   */\n  getCustomTemplate(name: string): string | undefined {\n    return this.customTemplates.get(name);\n  }\n\n  /**\n   * Remove custom template\n   */\n  removeCustomTemplate(name: string): boolean {\n    return this.customTemplates.delete(name);\n  }\n\n  /**\n   * Get all custom templates\n   */\n  getCustomTemplates(): Record<string, string> {\n    const result: Record<string, string> = {};\n    for (const [key, value] of this.customTemplates.entries()) {\n      result[key] = value;\n    }\n    return result;\n  }\n\n  // ========================================\n  // Path Validation and Normalization\n  // ========================================\n\n  /**\n   * Validate path template\n   */\n  validateTemplate(template: string): {\n    valid: boolean;\n    errors: string[];\n    variables: string[];\n  } {\n    const errors: string[] = [];\n    const variables: string[] = [];\n\n    if (!template || typeof template !== 'string') {\n      errors.push('Template must be a non-empty string');\n      return { valid: false, errors, variables };\n    }\n\n    // Extract variables\n    const variableMatches = template.match(/\\$\\{([^}]+)\\}/g);\n    if (variableMatches) {\n      for (const match of variableMatches) {\n        const variableName = match.replace(/[${}]/g, '');\n        variables.push(variableName);\n\n        // Validate variable name\n        if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(variableName)) {\n          errors.push(`Invalid variable name: ${variableName}`);\n        }\n      }\n    }\n\n    // Check for recursive templates\n    if (template.includes('${${')) {\n      errors.push('Template contains recursive variable references');\n    }\n\n    // Check for malformed templates\n    if (template.includes('${') && !template.includes('}')) {\n      errors.push('Template contains unclosed variable reference');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      variables\n    };\n  }\n\n  /**\n   * Normalize path\n   */\n  normalizePath(path: string): string {\n    // Replace backslashes with forward slashes\n    path = path.replace(/\\\\/g, '/');\n\n    // Remove redundant slashes\n    path = path.replace(/\\/+/g, '/');\n\n    // Remove leading/trailing slashes (unless it's root)\n    if (path.length > 1) {\n      path = path.replace(/^\\/+|\\/+$/g, '');\n    }\n\n    return path;\n  }\n\n  /**\n   * Join path segments\n   */\n  joinPaths(...segments: string[]): string {\n    const nonEmptySegments = segments.filter(segment => segment && segment.trim() !== '');\n    return this.normalizePath(nonEmptySegments.join('/'));\n  }\n\n  /**\n   * Get absolute path\n   */\n  getAbsolutePath(relativePath: string, basePath: string = process.cwd()): string {\n    if (this.isAbsolutePath(relativePath)) {\n      return this.normalizePath(relativePath);\n    }\n\n    return this.joinPaths(basePath, relativePath);\n  }\n\n  /**\n   * Check if path is absolute\n   */\n  isAbsolutePath(path: string): boolean {\n    return path.startsWith('/') || /^[A-Za-z]:/.test(path);\n  }\n\n  // ========================================\n  // Utility Methods\n  // ========================================\n\n  /**\n   * Extract variables from template\n   */\n  extractVariables(template: string): string[] {\n    if (!template) return [];\n\n    const matches = template.match(/\\$\\{([^}]+)\\}/g);\n    if (!matches) return [];\n\n    return matches.map(match => match.replace(/[${}]/g, '')).filter(Boolean);\n  }\n\n  /**\n   * Check if template contains variable\n   */\n  containsVariable(template: string, variable: string): boolean {\n    if (!template || !variable) return false;\n\n    const regex = new RegExp(`\\\\$\\\\{${variable}\\\\}`, 'g');\n    return regex.test(template);\n  }\n\n  /**\n   * Get format extension\n   */\n  private getFormatExtension(format: string): string {\n    switch (format.toLowerCase()) {\n      case 'json':\n        return 'json';\n      case 'jsonl':\n        return 'jsonl';\n      case 'csv':\n        return 'csv';\n      case 'txt':\n        return 'txt';\n      case 'log':\n        return 'log';\n      default:\n        return format;\n    }\n  }\n\n  /**\n   * Apply built-in functions\n   */\n  private applyBuiltInFunctions(template: string): string {\n    // Date functions\n    template = template.replace(/\\$\\{date:([^}]+)\\}/g, (match, format) => {\n      return this.formatDate(new Date(), format);\n    });\n\n    // Timestamp functions\n    template = template.replace(/\\$\\{timestamp:([^}]+)\\}/g, (match, format) => {\n      return this.formatTimestamp(Date.now(), format);\n    });\n\n    // Random functions\n    template = template.replace(/\\$\\{random:([^}]+)\\}/g, (match, length) => {\n      return this.generateRandomString(parseInt(length) || 8);\n    });\n\n    // UUID functions\n    template = template.replace(/\\$\\{uuid\\}/g, () => {\n      return this.generateUUID();\n    });\n\n    return template;\n  }\n\n  /**\n   * Format date\n   */\n  private formatDate(date: Date, format: string): string {\n    const replacements: Record<string, string> = {\n      'YYYY': String(date.getFullYear()),\n      'YY': String(date.getFullYear()).slice(-2),\n      'MM': String(date.getMonth() + 1).padStart(2, '0'),\n      'DD': String(date.getDate()).padStart(2, '0'),\n      'HH': String(date.getHours()).padStart(2, '0'),\n      'mm': String(date.getMinutes()).padStart(2, '0'),\n      'ss': String(date.getSeconds()).padStart(2, '0'),\n      'SSS': String(date.getMilliseconds()).padStart(3, '0')\n    };\n\n    let result = format;\n    for (const [key, value] of Object.entries(replacements)) {\n      result = result.replace(new RegExp(key, 'g'), value);\n    }\n\n    return result;\n  }\n\n  /**\n   * Format timestamp\n   */\n  private formatTimestamp(timestamp: number, format: string): string {\n    return this.formatDate(new Date(timestamp), format);\n  }\n\n  /**\n   * Generate random string\n   */\n  private generateRandomString(length: number): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  /**\n   * Generate UUID\n   */\n  private generateUUID(): string {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n  }\n\n  /**\n   * Initialize global variables\n   */\n  private initializeGlobalVariables(): void {\n    const now = new Date();\n\n    this.globalVariables.set('hostname', process.env.HOSTNAME || 'localhost');\n    this.globalVariables.set('pid', String(process.pid));\n    this.globalVariables.set('platform', process.platform);\n    this.globalVariables.set('arch', process.arch);\n    this.globalVariables.set('nodeVersion', process.version);\n    this.globalVariables.set('username', process.env.USER || 'unknown');\n    this.globalVariables.set('cwd', process.cwd());\n    this.globalVariables.set('tempDir', process.env.TMPDIR || '/tmp');\n    this.globalVariables.set('homeDir', process.env.HOME || '/home/user');\n\n    // Date/time variables\n    this.globalVariables.set('currentYear', String(now.getFullYear()));\n    this.globalVariables.set('currentMonth', String(now.getMonth() + 1).padStart(2, '0'));\n    this.globalVariables.set('currentDay', String(now.getDate()).padStart(2, '0'));\n    this.globalVariables.set('currentHour', String(now.getHours()).padStart(2, '0'));\n    this.globalVariables.set('currentMinute', String(now.getMinutes()).padStart(2, '0'));\n    this.globalVariables.set('currentSecond', String(now.getSeconds()).padStart(2, '0'));\n    this.globalVariables.set('currentDate', now.toISOString().split('T')[0]);\n    this.globalVariables.set('currentTime', now.toISOString().split('T')[1].split('.')[0]);\n    this.globalVariables.set('currentTimestamp', String(now.getTime()));\n  }\n\n  /**\n   * Get supported variables\n   */\n  getSupportedVariables(): Array<{\n    category: string;\n    variables: Array<{ name: string; description: string }>;\n  }> {\n    return [\n      {\n        category: 'Global Variables',\n        variables: [\n          { name: 'hostname', description: 'System hostname' },\n          { name: 'pid', description: 'Process ID' },\n          { name: 'platform', description: 'Operating system platform' },\n          { name: 'arch', description: 'System architecture' },\n          { name: 'nodeVersion', description: 'Node.js version' },\n          { name: 'username', description: 'Current username' },\n          { name: 'cwd', description: 'Current working directory' },\n          { name: 'tempDir', description: 'Temporary directory' },\n          { name: 'homeDir', description: 'User home directory' }\n        ]\n      },\n      {\n        category: 'Date/Time Variables',\n        variables: [\n          { name: 'currentYear', description: 'Current year (4 digits)' },\n          { name: 'currentMonth', description: 'Current month (2 digits)' },\n          { name: 'currentDay', description: 'Current day (2 digits)' },\n          { name: 'currentHour', description: 'Current hour (2 digits)' },\n          { name: 'currentMinute', description: 'Current minute (2 digits)' },\n          { name: 'currentSecond', description: 'Current second (2 digits)' },\n          { name: 'currentDate', description: 'Current date (YYYY-MM-DD)' },\n          { name: 'currentTime', description: 'Current time (HH:MM:SS)' },\n          { name: 'currentTimestamp', description: 'Current timestamp in milliseconds' }\n        ]\n      },\n      {\n        category: 'Context Variables',\n        variables: [\n          { name: 'cycleId', description: 'Cycle identifier' },\n          { name: 'requestId', description: 'Request identifier' },\n          { name: 'sessionId', description: 'Session identifier' },\n          { name: 'traceId', description: 'Trace identifier' },\n          { name: 'errorId', description: 'Error identifier' },\n          { name: 'timestamp', description: 'Event timestamp' },\n          { name: 'date', description: 'Event date (YYYY-MM-DD)' },\n          { name: 'time', description: 'Event time (HH:MM:SS)' },\n          { name: 'format', description: 'File format' },\n          { name: 'type', description: 'Event type' },\n          { name: 'index', description: 'Event index' },\n          { name: 'level', description: 'Error level' },\n          { name: 'category', description: 'Error category' }\n        ]\n      },\n      {\n        category: 'Built-in Functions',\n        variables: [\n          { name: 'date:format', description: 'Format current date with custom format' },\n          { name: 'timestamp:format', description: 'Format timestamp with custom format' },\n          { name: 'random:length', description: 'Generate random string of specified length' },\n          { name: 'uuid', description: 'Generate UUID' }\n        ]\n      }\n    ];\n  }\n}","import { Message, MessageResponse, MessageCenterStats } from './interfaces/Message';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Message center for module communication\n */\nexport class MessageCenter {\n  private static instance: MessageCenter;\n  private modules: Map<string, any> = new Map(); // Map of module IDs to module instances\n  private pendingRequests: Map<\n    string,\n    {\n      resolve: (response: MessageResponse) => void;\n      reject: (error: any) => void;\n      timeoutId: NodeJS.Timeout;\n    }\n  > = new Map();\n\n  // Statistics tracking\n  private stats = {\n    totalMessages: 0,\n    totalRequests: 0,\n    activeRequests: 0,\n    registeredModules: 0,\n    messagesDelivered: 0,\n    messagesFailed: 0,\n    averageResponseTime: 0,\n    uptime: Date.now(),\n  };\n\n  private responseTimes: number[] = [];\n  private startTime = Date.now();\n\n  /**\n   * Private constructor for singleton pattern\n   */\n  private constructor() {}\n\n  /**\n   * Get the singleton instance of MessageCenter\n   * @returns MessageCenter instance\n   */\n  public static getInstance(): MessageCenter {\n    if (!MessageCenter.instance) {\n      MessageCenter.instance = new MessageCenter();\n    }\n    return MessageCenter.instance;\n  }\n\n  /**\n   * Register a module with the message center\n   * @param moduleId - Module ID\n   * @param moduleInstance - Module instance\n   */\n  public registerModule(moduleId: string, moduleInstance: any): void {\n    this.modules.set(moduleId, moduleInstance);\n    this.stats.registeredModules = this.modules.size;\n\n    // Notify other modules about new registration\n    setImmediate(() => {\n      this.broadcastMessage({\n        id: uuidv4(),\n        type: 'module_registered',\n        source: 'MessageCenter',\n        payload: { moduleId },\n        timestamp: Date.now(),\n      });\n    });\n  }\n\n  /**\n   * Unregister a module from the message center\n   * @param moduleId - Module ID\n   */\n  public unregisterModule(moduleId: string): void {\n    this.modules.delete(moduleId);\n    this.stats.registeredModules = this.modules.size;\n\n    // Clean up any pending requests for this module\n    for (const [correlationId, request] of this.pendingRequests.entries()) {\n      // In a real implementation, you might want to check if this request was to/from the unregistered module\n      // For simplicity, we're just cleaning up all pending requests when any module is unregistered\n      clearTimeout(request.timeoutId);\n      this.pendingRequests.delete(correlationId);\n    }\n\n    // Notify other modules about unregistration\n    setImmediate(() => {\n      this.broadcastMessage({\n        id: uuidv4(),\n        type: 'module_unregistered',\n        source: 'MessageCenter',\n        payload: { moduleId },\n        timestamp: Date.now(),\n      });\n    });\n  }\n\n  /**\n   * Send a one-way message\n   * @param message - Message to send\n   */\n  public sendMessage(message: Message): void {\n    this.stats.totalMessages++;\n\n    setImmediate(() => {\n      this.processMessage(message).catch((error) => {\n        console.error(`Error processing message ${message.id}:`, error);\n        this.stats.messagesFailed++;\n      });\n    });\n  }\n\n  /**\n   * Broadcast a message to all modules\n   * @param message - Message to broadcast\n   */\n  public broadcastMessage(message: Message): void {\n    this.stats.totalMessages++;\n\n    setImmediate(() => {\n      // Send to all registered modules\n      for (const [moduleId, moduleInstance] of this.modules.entries()) {\n        if (moduleId !== message.source) {\n          // Don't send back to sender\n          this.deliverMessage(message, moduleInstance).catch((error) => {\n            console.error(`Error delivering broadcast message to ${moduleId}:`, error);\n            this.stats.messagesFailed++;\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Send a request and wait for response\n   * @param message - Request message\n   * @param timeout - Timeout in milliseconds\n   * @returns Promise that resolves to the response\n   */\n  public sendRequest(message: Message, timeout: number = 30000): Promise<MessageResponse> {\n    this.stats.totalRequests++;\n    this.stats.activeRequests++;\n\n    return new Promise((resolve, reject) => {\n      if (!message.correlationId) {\n        message.correlationId = uuidv4();\n      }\n\n      // Set up timeout\n      const timeoutId = setTimeout(() => {\n        this.pendingRequests.delete(message.correlationId!);\n        this.stats.activeRequests--;\n        reject(new Error(`Request timeout after ${timeout}ms`));\n      }, timeout);\n\n      // Store pending request\n      this.pendingRequests.set(message.correlationId, { resolve, reject, timeoutId });\n\n      // Send the message\n      this.sendMessage(message);\n    });\n  }\n\n  /**\n   * Send a request with callback (non-blocking)\n   * @param message - Request message\n   * @param callback - Callback function for response\n   * @param timeout - Timeout in milliseconds\n   */\n  public sendRequestAsync(\n    message: Message,\n    callback: (response: MessageResponse) => void,\n    timeout: number = 30000\n  ): void {\n    this.stats.totalRequests++;\n    this.stats.activeRequests++;\n\n    if (!message.correlationId) {\n      message.correlationId = uuidv4();\n    }\n\n    // Set up timeout\n    const timeoutId = setTimeout(() => {\n      this.pendingRequests.delete(message.correlationId!);\n      this.stats.activeRequests--;\n      callback({\n        messageId: message.id,\n        correlationId: message.correlationId || '',\n        success: false,\n        error: `Request timeout after ${timeout}ms`,\n        timestamp: Date.now(),\n      });\n    }, timeout);\n\n    // Store pending request\n    this.pendingRequests.set(message.correlationId, {\n      resolve: (response: MessageResponse) => {\n        clearTimeout(timeoutId);\n        this.pendingRequests.delete(message.correlationId!);\n        this.stats.activeRequests--;\n        callback(response);\n      },\n      reject: (error: any) => {\n        clearTimeout(timeoutId);\n        this.pendingRequests.delete(message.correlationId!);\n        this.stats.activeRequests--;\n        callback({\n          messageId: message.id,\n          correlationId: message.correlationId || '',\n          success: false,\n          error: error.message || 'Unknown error',\n          timestamp: Date.now(),\n        });\n      },\n      timeoutId,\n    });\n\n    // Send the message\n    this.sendMessage(message);\n  }\n\n  /**\n   * Process an incoming message\n   * @param message - Message to process\n   */\n  private async processMessage(message: Message): Promise<void> {\n    try {\n      // Check for TTL expiration\n      if (message.ttl && Date.now() - message.timestamp > message.ttl) {\n        throw new Error('Message TTL expired');\n      }\n\n      if (message.target) {\n        // Targeted message\n        const targetModule = this.modules.get(message.target);\n        if (!targetModule) {\n          throw new Error(`Target module ${message.target} not found`);\n        }\n\n        await this.deliverMessage(message, targetModule);\n      } else {\n        // Broadcast message\n        this.broadcastMessage(message);\n      }\n    } catch (error) {\n      this.stats.messagesFailed++;\n\n      // If this was a request, send error response\n      if (message.correlationId && this.pendingRequests.has(message.correlationId)) {\n        const request = this.pendingRequests.get(message.correlationId)!;\n        clearTimeout(request.timeoutId);\n        request.reject(error);\n        this.pendingRequests.delete(message.correlationId);\n        this.stats.activeRequests--;\n      } else {\n        console.error(`Error processing message ${message.id}:`, error);\n      }\n    }\n  }\n\n  /**\n   * Deliver a message to a specific module\n   * @param message - Message to deliver\n   * @param moduleInstance - Target module instance\n   */\n  private async deliverMessage(message: Message, moduleInstance: any): Promise<void> {\n    const startTime = Date.now();\n\n    if (typeof moduleInstance.handleMessage === 'function') {\n      const response = await moduleInstance.handleMessage(message);\n      this.stats.messagesDelivered++;\n\n      // If this was a request with a correlation ID, send response back\n      if (message.correlationId && response && this.pendingRequests.has(message.correlationId)) {\n        const request = this.pendingRequests.get(message.correlationId)!;\n        const responseTime = Date.now() - startTime;\n\n        this.responseTimes.push(responseTime);\n        if (this.responseTimes.length > 1000) {\n          this.responseTimes = this.responseTimes.slice(-100); // Keep only last 100\n        }\n\n        clearTimeout(request.timeoutId);\n        request.resolve(response);\n        this.pendingRequests.delete(message.correlationId);\n        this.stats.activeRequests--;\n      }\n    }\n  }\n\n  /**\n   * Get message center statistics\n   * @returns Statistics object\n   */\n  public getStats(): MessageCenterStats {\n    const avgResponseTime =\n      this.responseTimes.length > 0\n        ? this.responseTimes.reduce((a, b) => a + b, 0) / this.responseTimes.length\n        : 0;\n\n    return {\n      ...this.stats,\n      averageResponseTime: Math.round(avgResponseTime),\n      uptime: Date.now() - this.startTime,\n    };\n  }\n\n  /**\n   * Reset message center statistics\n   */\n  public resetStats(): void {\n    this.stats = {\n      totalMessages: 0,\n      totalRequests: 0,\n      activeRequests: 0,\n      registeredModules: this.modules.size,\n      messagesDelivered: 0,\n      messagesFailed: 0,\n      averageResponseTime: 0,\n      uptime: Date.now(),\n    };\n    this.responseTimes = [];\n    this.startTime = Date.now();\n  }\n}\n","/**\n * Debug Event Bus - 事件驱动的调试通信总线\n * Event-driven debug communication bus\n *\n * Note: This is now a compatibility layer that re-exports from rcc-debugcenter\n * For new development, import DebugEventBus directly from 'rcc-debugcenter'\n */\n\n// Re-export from debugcenter package for backward compatibility\n// In a real implementation, these would be imported from 'rcc-debugcenter'\nexport interface DebugEvent {\n  sessionId: string;\n  moduleId: string;\n  operationId: string;\n  timestamp: number;\n  type: 'start' | 'end' | 'error';\n  position: 'start' | 'middle' | 'end';\n  data?: any;\n}\n\nexport class DebugEventBus {\n  private static instance: DebugEventBus;\n  private subscribers: Map<string, Function[]> = new Map();\n  private eventQueue: DebugEvent[] = [];\n  private maxQueueSize: number = 10000;\n\n  private constructor() {}\n\n  public static getInstance(): DebugEventBus {\n    if (!DebugEventBus.instance) {\n      DebugEventBus.instance = new DebugEventBus();\n    }\n    return DebugEventBus.instance;\n  }\n\n  /**\n   * Publish a debug event\n   * @param event - Debug event to publish\n   */\n  public publish(event: DebugEvent): void {\n    // Add to queue for debugging\n    if (this.eventQueue.length >= this.maxQueueSize) {\n      this.eventQueue.shift(); // Remove oldest event\n    }\n    this.eventQueue.push(event);\n\n    // Notify subscribers\n    const subscribers = this.subscribers.get(event.type) || [];\n    const allSubscribers = this.subscribers.get('*') || [];\n\n    // Notify type-specific subscribers\n    subscribers.forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Error in debug event subscriber:', error);\n      }\n    });\n\n    // Notify wildcard subscribers\n    allSubscribers.forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Error in debug event subscriber:', error);\n      }\n    });\n  }\n\n  /**\n   * Subscribe to debug events\n   * @param eventType - Event type to subscribe to ('*' for all events)\n   * @param callback - Callback function\n   */\n  public subscribe(eventType: string, callback: Function): void {\n    if (!this.subscribers.has(eventType)) {\n      this.subscribers.set(eventType, []);\n    }\n    this.subscribers.get(eventType)!.push(callback);\n  }\n\n  /**\n   * Unsubscribe from debug events\n   * @param eventType - Event type to unsubscribe from\n   * @param callback - Callback function to remove\n   */\n  public unsubscribe(eventType: string, callback: Function): void {\n    const subscribers = this.subscribers.get(eventType);\n    if (subscribers) {\n      const index = subscribers.indexOf(callback);\n      if (index > -1) {\n        subscribers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Get recent events from the queue\n   * @param limit - Maximum number of events to return\n   * @param type - Optional event type filter\n   */\n  public getRecentEvents(limit: number = 100, type?: string): DebugEvent[] {\n    let events = [...this.eventQueue];\n\n    if (type) {\n      events = events.filter(event => event.type === type);\n    }\n\n    return events.slice(-limit);\n  }\n\n  /**\n   * Clear the event queue and subscribers\n   */\n  public clear(): void {\n    this.eventQueue = [];\n    this.subscribers.clear();\n  }\n\n  /**\n   * Get queue statistics\n   */\n  public getStats() {\n    return {\n      queueSize: this.eventQueue.length,\n      subscriberCount: Array.from(this.subscribers.values()).reduce((sum, subs) => sum + subs.length, 0),\n      eventTypes: Array.from(this.subscribers.keys()),\n      maxQueueSize: this.maxQueueSize\n    };\n  }\n\n  /**\n   * Set maximum queue size\n   * @param size - Maximum queue size\n   */\n  public setMaxQueueSize(size: number): void {\n    this.maxQueueSize = Math.max(100, size);\n\n    // Trim queue if necessary\n    if (this.eventQueue.length > this.maxQueueSize) {\n      this.eventQueue = this.eventQueue.slice(-this.maxQueueSize);\n    }\n  }\n}","import { ModuleInfo } from './interfaces/ModuleInfo';\nimport { ConnectionInfo, DataTransfer } from './interfaces/Connection';\nimport { ValidationRule, ValidationResult } from './interfaces/Validation';\nimport { Message, MessageResponse, MessageHandler } from './interfaces/Message';\nimport { MessageCenter } from './MessageCenter';\nimport { DebugEventBus, DebugEvent } from './debug/DebugEventBus';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Debug log levels\n */\nexport type DebugLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error';\n\n/**\n * Debug log entry\n */\nexport interface DebugLogEntry {\n  /**\n   * Timestamp of the log entry\n   */\n  timestamp: number;\n  \n  /**\n   * Log level\n   */\n  level: DebugLevel;\n  \n  /**\n   * Log message\n   */\n  message: string;\n  \n  /**\n   * Additional data associated with the log\n   */\n  data?: any;\n  \n  /**\n   * Call stack information\n   */\n  stack?: string;\n  \n  /**\n   * Module ID that generated the log\n   */\n  moduleId: string;\n\n  /**\n   * Method name where the log was generated\n   */\n  method?: string | undefined;\n}\n/**\n * Debug configuration\n */\nexport interface DebugConfig {\n  enabled: boolean;\n  level: 'trace' | 'debug' | 'info' | 'warn' | 'error';\n  recordStack: boolean;\n  maxLogEntries: number;\n  consoleOutput: boolean;\n  trackDataFlow: boolean;\n  enableFileLogging: boolean;\n  maxFileSize: number;\n  maxLogFiles: number;\n  pipelinePosition?: 'start' | 'middle' | 'end';\n}\n\n/**\n * Abstract base class for all modules\n * Provides foundational functionality for module management, connections, validation, debug, and messaging\n */\nexport abstract class BaseModule implements MessageHandler {\n  /**\n   * Module information\n   */\n  protected info: ModuleInfo;\n  \n  /**\n   * Input connections\n   */\n  protected inputConnections: Map<string, ConnectionInfo> = new Map();\n  \n  /**\n   * Output connections\n   */\n  protected outputConnections: Map<string, ConnectionInfo> = new Map();\n  \n  /**\n   * Validation rules for input data\n   */\n  protected validationRules: ValidationRule[] = [];\n  \n  /**\n   * Whether the module is initialized\n   */\n  protected initialized: boolean = false;\n  \n  /**\n   * Configuration data for the module\n   */\n  protected config: Record<string, any> = {};\n  \n  /**\n   * Whether the module is configured\n   */\n  protected configured: boolean = false;\n  \n  /**\n   * Message center instance\n   */\n  protected messageCenter: MessageCenter;\n  \n  /**\n   * Debug configuration\n   */\n  protected debugConfig: DebugConfig;\n  \n  /**\n   * Debug log entries\n   */\n  protected debugLogs: DebugLogEntry[] = [];\n  \n  /**\n   * Debug event bus\n   */\n  protected eventBus: DebugEventBus;\n\n  /**\n   * Current session ID for pipeline operations\n   */\n  protected currentSessionId?: string;\n\n  /**\n   * Pipeline position of this module\n   */\n  protected pipelinePosition?: 'start' | 'middle' | 'end';\n  \n  /**\n   * Pending message requests\n   */\n  protected pendingRequests: Map<string, {\n    resolve: (response: MessageResponse) => void;\n    reject: (error: any) => void;\n  }> = new Map();\n  \n  /**\n   * Creates an instance of BaseModule\n   * @param info - Module information\n   */\n  constructor(info: ModuleInfo) {\n    this.info = info;\n    this.messageCenter = MessageCenter.getInstance();\n    \n    // Initialize debug configuration with defaults\n    this.debugConfig = {\n      enabled: true,\n      level: 'debug',\n      recordStack: true,\n      maxLogEntries: 1000,\n      consoleOutput: true,\n      trackDataFlow: true,\n      enableFileLogging: false,\n      maxFileSize: 10485760, // 10MB\n      maxLogFiles: 5\n    };\n\n    // Initialize debug event bus\n    this.eventBus = DebugEventBus.getInstance();\n  }\n  \n  /**\n   * Static factory method to create an instance of the module\n   * This ensures static compilation with dynamic instantiation\n   * @param info - Module information\n   * @returns Instance of the module\n   */\n  static createInstance<T extends BaseModule>(this: new (info: ModuleInfo) => T, info: ModuleInfo): T {\n    return new this(info);\n  }\n  \n  /**\n   * Sets the debug configuration\n   * @param config - Debug configuration\n   */\n  public setDebugConfig(config: Partial<DebugConfig>): void {\n    this.debugConfig = { ...this.debugConfig, ...config };\n  }\n\n  /**\n   * Sets the pipeline position for this module\n   * @param position - Pipeline position\n   */\n  public setPipelinePosition(position: 'start' | 'middle' | 'end'): void {\n    this.pipelinePosition = position;\n    this.debugConfig.pipelinePosition = position;\n  }\n\n  /**\n   * Sets the current session ID for pipeline operations\n   * @param sessionId - Session ID\n   */\n  public setCurrentSession(sessionId: string): void {\n    this.currentSessionId = sessionId;\n  }\n\n  /**\n   * Gets the current debug configuration\n   * @returns Debug configuration\n   */\n  public getDebugConfig(): DebugConfig {\n    return { ...this.debugConfig };\n  }\n  \n  /**\n   * Start a pipeline session\n   * @param sessionId - Session ID\n   * @param pipelineConfig - Pipeline configuration\n   */\n  public startPipelineSession(sessionId: string, pipelineConfig: any): void {\n    this.currentSessionId = sessionId;\n\n    const event: DebugEvent = {\n      sessionId,\n      moduleId: this.info.id,\n      operationId: 'session_start',\n      timestamp: Date.now(),\n      type: 'start',\n      position: this.pipelinePosition || 'middle',\n      data: {\n        pipelineConfig,\n        moduleInfo: {\n          id: this.info.id,\n          name: this.info.name,\n          version: this.info.version\n        }\n      }\n    };\n\n    this.eventBus.publish(event);\n\n    // Log locally for backward compatibility\n    this.logInfo('Pipeline session started', {\n      sessionId,\n      pipelinePosition: this.pipelinePosition\n    }, 'startPipelineSession');\n  }\n\n  /**\n   * End a pipeline session\n   * @param sessionId - Session ID\n   * @param success - Whether session was successful\n   */\n  public endPipelineSession(sessionId: string, success: boolean = true): void {\n    const event: DebugEvent = {\n      sessionId,\n      moduleId: this.info.id,\n      operationId: 'session_end',\n      timestamp: Date.now(),\n      type: success ? 'end' : 'error',\n      position: this.pipelinePosition || 'middle',\n      data: {\n        success,\n        moduleInfo: {\n          id: this.info.id,\n          name: this.info.name,\n          version: this.info.version\n        }\n      }\n    };\n\n    this.eventBus.publish(event);\n    this.currentSessionId = undefined;\n\n    // Log locally for backward compatibility\n    this.logInfo('Pipeline session ended', {\n      sessionId,\n      success,\n      pipelinePosition: this.pipelinePosition\n    }, 'endPipelineSession');\n  }\n  \n  /**\n   * Logs a debug message\n   * @param level - Log level\n   * @param message - Log message\n   * @param data - Additional data to log\n   * @param method - Method name where the log was generated\n   */\n  protected debug(level: DebugLevel, message: string, data?: any, method?: string): void {\n    // Check if debug is enabled and level is appropriate\n    if (!this.debugConfig.enabled) return;\n\n    const levelOrder: DebugLevel[] = ['trace', 'debug', 'info', 'warn', 'error'];\n    const currentLevelIndex = levelOrder.indexOf(this.debugConfig.level);\n    const messageLevelIndex = levelOrder.indexOf(level);\n\n    if (messageLevelIndex < currentLevelIndex) return;\n    \n    // Create log entry\n    const logEntry: DebugLogEntry = {\n      timestamp: Date.now(),\n      level,\n      message,\n      moduleId: this.info.id,\n      method\n    };\n    \n    // Add data if provided\n    if (data !== undefined) {\n      logEntry.data = data;\n    }\n    \n    // Record stack trace if enabled\n    if (this.debugConfig.recordStack && level === 'error') {\n      try {\n        throw new Error('Stack trace');\n      } catch (e: unknown) {\n        if (e instanceof Error) {\n          logEntry.stack = e.stack || undefined;\n        }\n      }\n    }\n    \n    // Add to logs\n    this.debugLogs.push(logEntry);\n    \n    // Trim logs if necessary\n    if (this.debugLogs.length > this.debugConfig.maxLogEntries) {\n      this.debugLogs = this.debugLogs.slice(-this.debugConfig.maxLogEntries);\n    }\n    \n    // Output to console if enabled\n    if (this.debugConfig.consoleOutput) {\n      const timestamp = new Date(logEntry.timestamp).toISOString();\n      const prefix = `[${timestamp}] [${this.info.id}] [${level.toUpperCase()}]${method ? ` [${method}]` : ''}`;\n      \n      switch (level) {\n        case 'trace':\n        case 'debug':\n        case 'info':\n          console.log(`${prefix} ${message}`, data || '');\n          break;\n        case 'warn':\n          console.warn(`${prefix} ${message}`, data || '');\n          break;\n        case 'error':\n          console.error(`${prefix} ${message}`, data || '');\n          break;\n      }\n    }\n  }\n  \n  /**\n   * Logs a trace message\n   * @param message - Log message\n   * @param data - Additional data to log\n   * @param method - Method name where the log was generated\n   */\n  protected trace(message: string, data?: any, method?: string): void {\n    this.debug('trace', message, data, method);\n  }\n  \n  /**\n   * Logs a debug message\n   * @param message - Log message\n   * @param data - Additional data to log\n   * @param method - Method name where the log was generated\n   */\n  protected log(message: string, data?: any, method?: string): void {\n    this.debug('debug', message, data, method);\n  }\n  \n  /**\n   * Logs an info message\n   * @param message - Log message\n   * @param data - Additional data to log\n   * @param method - Method name where the log was generated\n   */\n  protected logInfo(message: string, data?: any, method?: string): void {\n    this.debug('info', message, data, method);\n  }\n  \n  /**\n   * Logs a warning message\n   * @param message - Log message\n   * @param data - Additional data to log\n   * @param method - Method name where the log was generated\n   */\n  protected warn(message: string, data?: any, method?: string): void {\n    this.debug('warn', message, data, method);\n  }\n  \n  /**\n   * Logs an error message\n   * @param message - Log message\n   * @param data - Additional data to log\n   * @param method - Method name where the log was generated\n   */\n  protected error(message: string, data?: any, method?: string): void {\n    this.debug('error', message, data, method);\n  }\n  \n  /**\n   * Gets debug logs\n   * @param level - Optional filter by log level\n   * @param limit - Optional limit on number of entries returned\n   * @returns Array of debug log entries\n   */\n  public getDebugLogs(level?: DebugLevel, limit?: number): DebugLogEntry[] {\n    let logs = [...this.debugLogs];\n    \n    // Filter by level if specified\n    if (level) {\n      logs = logs.filter(log => log.level === level);\n    }\n    \n    // Limit results if specified\n    if (limit && limit > 0) {\n      logs = logs.slice(-limit);\n    }\n    \n    return logs;\n  }\n  \n  /**\n   * Clears debug logs\n   */\n  public clearDebugLogs(): void {\n    this.debugLogs = [];\n  }\n  \n  /**\n   * Configures the module with initialization data\n   * This method should be called before initialize()\n   * @param config - Configuration data for the module\n   */\n  public configure(config: Record<string, any>): void {\n    if (this.initialized) {\n      throw new Error('Cannot configure module after initialization');\n    }\n    \n    this.config = { ...config };\n    this.configured = true;\n    \n    // Log configuration\n    this.debug('debug', 'Module configured', config, 'configure');\n  }\n  \n  /**\n   * Gets the module information\n   * @returns Module information\n   */\n  public getInfo(): ModuleInfo {\n    return { ...this.info };\n  }\n  \n  /**\n   * Gets the module configuration\n   * @returns Module configuration\n   */\n  public getConfig(): Record<string, any> {\n    return { ...this.config };\n  }\n  \n  /**\n   * Initializes the module\n   * This method should be overridden by subclasses\n   */\n  public async initialize(): Promise<void> {\n    if (!this.configured) {\n      console.warn(`Module ${this.info.id} is being initialized without configuration`);\n    }\n    \n    // Register with message center\n    this.messageCenter.registerModule(this.info.id, this);\n    \n    // Base initialization logic\n    this.initialized = true;\n    \n    // Log initialization\n    this.logInfo('Module initialized', { configured: this.configured }, 'initialize');\n  }\n  \n  /**\n   * Adds an input connection\n   * @param connection - Connection information\n   */\n  public addInputConnection(connection: ConnectionInfo): void {\n    if (connection.type !== 'input') {\n      throw new Error('Invalid connection type for input');\n    }\n    this.inputConnections.set(connection.id, connection);\n  }\n  \n  /**\n   * Adds an output connection\n   * @param connection - Connection information\n   */\n  public addOutputConnection(connection: ConnectionInfo): void {\n    if (connection.type !== 'output') {\n      throw new Error('Invalid connection type for output');\n    }\n    this.outputConnections.set(connection.id, connection);\n  }\n  \n  /**\n   * Removes an input connection\n   * @param connectionId - Connection ID\n   */\n  public removeInputConnection(connectionId: string): void {\n    this.inputConnections.delete(connectionId);\n  }\n  \n  /**\n   * Removes an output connection\n   * @param connectionId - Connection ID\n   */\n  public removeOutputConnection(connectionId: string): void {\n    this.outputConnections.delete(connectionId);\n  }\n  \n  /**\n   * Gets all input connections\n   * @returns Array of input connections\n   */\n  public getInputConnections(): ConnectionInfo[] {\n    return Array.from(this.inputConnections.values());\n  }\n  \n  /**\n   * Gets all output connections\n   * @returns Array of output connections\n   */\n  public getOutputConnections(): ConnectionInfo[] {\n    return Array.from(this.outputConnections.values());\n  }\n  \n  /**\n   * Validates input data against validation rules\n   * @param data - Data to validate\n   * @returns Validation result\n   */\n  protected validateInput(data: any): ValidationResult {\n    const errors: string[] = [];\n    \n    for (const rule of this.validationRules) {\n      const value = data[rule.field];\n      \n      switch (rule.type) {\n        case 'required':\n          if (value === undefined || value === null) {\n            errors.push(rule.message);\n          }\n          break;\n        case 'string':\n          if (typeof value !== 'string') {\n            errors.push(rule.message);\n          }\n          break;\n        case 'number':\n          if (typeof value !== 'number') {\n            errors.push(rule.message);\n          }\n          break;\n        case 'boolean':\n          if (typeof value !== 'boolean') {\n            errors.push(rule.message);\n          }\n          break;\n        case 'object':\n          if (typeof value !== 'object' || value === null) {\n            errors.push(rule.message);\n          }\n          break;\n        case 'array':\n          if (!Array.isArray(value)) {\n            errors.push(rule.message);\n          }\n          break;\n        case 'custom':\n          if (rule.validator && !rule.validator(value)) {\n            errors.push(rule.message);\n          }\n          break;\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors,\n      data\n    };\n  }\n  \n  /**\n   * Performs handshake with another module\n   * @param targetModule - Target module to handshake with\n   * @returns Whether handshake was successful\n   */\n  public async handshake(targetModule: BaseModule): Promise<boolean> {\n    // Base handshake implementation\n    // This should be overridden by subclasses for specific handshake logic\n    const result = true;\n    \n    // Log handshake\n    this.debug('debug', 'Handshake performed', { targetModule: targetModule.getInfo().id }, 'handshake');\n    \n    return result;\n  }\n  \n  /**\n   * Transfers data to connected modules\n   * @param data - Data to transfer\n   * @param targetConnectionId - Optional target connection ID\n   */\n  protected async transferData(data: any, targetConnectionId?: string): Promise<void> {\n    // Get target connections\n    let targetConnections: ConnectionInfo[];\n    \n    if (targetConnectionId) {\n      // If a specific connection ID is provided, use it\n      const connection = this.outputConnections.get(targetConnectionId);\n      if (!connection) {\n        throw new Error(`Output connection with ID '${targetConnectionId}' not found`);\n      }\n      targetConnections = [connection];\n    } else {\n      // Otherwise, use all output connections\n      targetConnections = Array.from(this.outputConnections.values());\n    }\n    \n    // Create data transfer objects for each target connection\n    const transfers: DataTransfer[] = targetConnections.map(connection => ({\n      id: `${this.info.id}-${connection.id}-${Date.now()}`,\n      sourceConnectionId: connection.id,\n      targetConnectionId: connection.targetModuleId,\n      data,\n      timestamp: Date.now(),\n      metadata: connection.metadata\n    }));\n    \n    // Send data to each target module\n    for (const transfer of transfers) {\n      // In a real implementation, you would send the data to the target module\n      // For now, we'll just log the transfer\n      console.log(`Transferring data from module ${this.info.id} to connection ${transfer.targetConnectionId}:`, data);\n      \n      // Log data transfer if tracking is enabled\n      if (this.debugConfig.trackDataFlow) {\n        this.debug('debug', 'Data transferred', transfer, 'transferData');\n      }\n    }\n  }\n  \n  /**\n   * Receives data from connected modules\n   * This method should be overridden by subclasses\n   * @param dataTransfer - Data transfer information\n   */\n  public async receiveData(dataTransfer: DataTransfer): Promise<void> {\n    // Base receive data implementation\n    // This should be overridden by subclasses for specific receive logic\n    console.log(`Module ${this.info.id} received data:`, dataTransfer.data);\n    \n    // Log data reception if tracking is enabled\n    if (this.debugConfig.trackDataFlow) {\n      this.debug('debug', 'Data received', dataTransfer, 'receiveData');\n    }\n  }\n  \n  /**\n   * Cleans up resources and connections\n   */\n  public async destroy(): Promise<void> {\n    // Log destruction before clearing logs\n    this.logInfo('Module destroyed', {}, 'destroy');\n\n    // Clean up connections\n    this.inputConnections.clear();\n    this.outputConnections.clear();\n    this.initialized = false;\n    this.configured = false;\n    this.config = {};\n\n    // Unregister from message center\n    this.messageCenter.unregisterModule(this.info.id);\n\n    // Clear debug logs\n    this.clearDebugLogs();\n\n    // Clear pending requests\n    this.pendingRequests.clear();\n  }\n  \n  /**\n   * Send a one-way message (fire and forget)\n   * @param type - Message type\n   * @param payload - Message payload\n   * @param target - Target module ID (optional for broadcasts)\n   * @param metadata - Additional metadata\n   * @param ttl - Time to live in milliseconds\n   * @param priority - Message priority (0-9)\n   */\n  protected sendMessage(\n    type: string,\n    payload: any,\n    target?: string,\n    metadata?: Record<string, any>,\n    ttl?: number,\n    priority?: number\n  ): void {\n    const message: Message = {\n      id: uuidv4(),\n      type,\n      source: this.info.id,\n      target,\n      payload,\n      timestamp: Date.now(),\n      metadata,\n      ttl,\n      priority\n    };\n    \n    try {\n      if (target) {\n        this.messageCenter.sendMessage(message);\n        this.debug('debug', 'Message sent', { type, target }, 'sendMessage');\n      } else {\n        this.messageCenter.broadcastMessage(message);\n        this.debug('debug', 'Message broadcast', { type }, 'sendMessage');\n      }\n    } catch (error) {\n      this.debug('error', 'Failed to send message', { error: (error as Error).message }, 'sendMessage');\n      throw error;\n    }\n  }\n  \n  /**\n   * Send a message and wait for response (blocking)\n   * @param type - Message type\n   * @param payload - Message payload\n   * @param target - Target module ID\n   * @param timeout - Timeout in milliseconds\n   * @param metadata - Additional metadata\n   * @param ttl - Time to live in milliseconds\n   * @param priority - Message priority (0-9)\n   * @returns Promise that resolves to the response\n   */\n  protected async sendRequest(\n    type: string,\n    payload: any,\n    target: string,\n    timeout: number = 30000,\n    metadata?: Record<string, any>,\n    ttl?: number,\n    priority?: number\n  ): Promise<MessageResponse> {\n    const message: Message = {\n      id: uuidv4(),\n      type,\n      source: this.info.id,\n      target,\n      payload,\n      timestamp: Date.now(),\n      correlationId: uuidv4(),\n      metadata,\n      ttl,\n      priority\n    };\n    \n    try {\n      this.debug('debug', 'Sending request', { type, target }, 'sendRequest');\n      const response = await this.messageCenter.sendRequest(message, timeout);\n      this.debug('debug', 'Received response', { type, target, success: response.success }, 'sendRequest');\n      return response;\n    } catch (error) {\n      this.debug('error', 'Request failed', { type, target, error: (error as Error).message }, 'sendRequest');\n      throw error;\n    }\n  }\n  \n  /**\n   * Send a message with callback for response (non-blocking)\n   * @param type - Message type\n   * @param payload - Message payload\n   * @param target - Target module ID\n   * @param callback - Callback function for response\n   * @param timeout - Timeout in milliseconds\n   * @param metadata - Additional metadata\n   * @param ttl - Time to live in milliseconds\n   * @param priority - Message priority (0-9)\n   */\n  protected sendRequestAsync(\n    type: string,\n    payload: any,\n    target: string,\n    callback: (response: MessageResponse) => void,\n    timeout: number = 30000,\n    metadata?: Record<string, any>,\n    ttl?: number,\n    priority?: number\n  ): void {\n    const message: Message = {\n      id: uuidv4(),\n      type,\n      source: this.info.id,\n      target,\n      payload,\n      timestamp: Date.now(),\n      correlationId: uuidv4(),\n      metadata,\n      ttl,\n      priority\n    };\n    \n    try {\n      this.debug('debug', 'Sending async request', { type, target }, 'sendRequestAsync');\n      this.messageCenter.sendRequestAsync(message, (response: MessageResponse) => {\n        this.debug('debug', 'Received async response', { type, target, success: response.success }, 'sendRequestAsync');\n        callback(response);\n      }, timeout);\n    } catch (error) {\n      this.debug('error', 'Async request failed', { type, target, error: (error as Error).message }, 'sendRequestAsync');\n      throw error;\n    }\n  }\n  \n  /**\n   * Broadcast a message to all modules\n   * @param type - Message type\n   * @param payload - Message payload\n   * @param metadata - Additional metadata\n   * @param ttl - Time to live in milliseconds\n   * @param priority - Message priority (0-9)\n   */\n  protected broadcastMessage(\n    type: string,\n    payload: any,\n    metadata?: Record<string, any>,\n    ttl?: number,\n    priority?: number\n  ): void {\n    this.sendMessage(type, payload, undefined, metadata, ttl, priority);\n  }\n  \n  /**\n   * Handle incoming messages\n   * This method should be overridden by subclasses\n   * @param message - The incoming message\n   * @returns Promise that resolves to a response or void\n   */\n  public async handleMessage(message: Message): Promise<MessageResponse | void> {\n    this.debug('debug', 'Handling message', { type: message.type, source: message.source }, 'handleMessage');\n    \n    // Base message handling implementation\n    // This should be overridden by subclasses for specific message handling logic\n    switch (message.type) {\n      case 'ping':\n        return {\n          messageId: message.id,\n          correlationId: message.correlationId || '',\n          success: true,\n          data: { pong: true, moduleId: this.info.id },\n          timestamp: Date.now()\n        };\n      default:\n        this.debug('warn', 'Unhandled message type', { type: message.type }, 'handleMessage');\n        return {\n          messageId: message.id,\n          correlationId: message.correlationId || '',\n          success: false,\n          error: `Unhandled message type: ${message.type}`,\n          timestamp: Date.now()\n        };\n    }\n  }\n  \n  /**\n   * Handle module lifecycle events\n   * @param moduleId - The module ID that was registered\n   */\n  public onModuleRegistered(moduleId: string): void {\n    this.logInfo('Module registered', { moduleId }, 'onModuleRegistered');\n  }\n  \n  /**\n   * Handle module lifecycle events\n   * @param moduleId - The module ID that was unregistered\n   */\n  public onModuleUnregistered(moduleId: string): void {\n    this.logInfo('Module unregistered', { moduleId }, 'onModuleUnregistered');\n  }\n\n  // ========================================\n  // I/O Tracking Methods\n  // ========================================\n\n  /**\n   * Record an I/O operation start\n   * @param operationId - Unique identifier for the operation\n   * @param input - Input data\n   * @param method - Method name that performed the operation\n   */\n  public startIOTracking(operationId: string, input: any, method?: string): void {\n    if (!this.currentSessionId || !this.debugConfig.enabled) return;\n\n    const event: DebugEvent = {\n      sessionId: this.currentSessionId,\n      moduleId: this.info.id,\n      operationId,\n      timestamp: Date.now(),\n      type: 'start',\n      position: this.pipelinePosition || 'middle',\n      data: {\n        input,\n        method,\n        pipelinePosition: this.pipelinePosition,\n        moduleInfo: {\n          id: this.info.id,\n          name: this.info.name,\n          version: this.info.version\n        }\n      }\n    };\n\n    this.eventBus.publish(event);\n\n    // Log locally for backward compatibility\n    this.debug('debug', `I/O tracking started: ${operationId}`, {\n      sessionId: this.currentSessionId,\n      input: this.debugConfig.trackDataFlow ? input : '[INPUT_DATA]',\n      method\n    }, 'startIOTracking');\n  }\n\n  /**\n   * Record an I/O operation end\n   * @param operationId - Unique identifier for the operation\n   * @param output - Output data\n   * @param success - Whether the operation was successful\n   * @param error - Error message if operation failed\n   */\n  public endIOTracking(operationId: string, output: any, success: boolean = true, error?: string): void {\n    if (!this.currentSessionId || !this.debugConfig.enabled) return;\n\n    const event: DebugEvent = {\n      sessionId: this.currentSessionId,\n      moduleId: this.info.id,\n      operationId,\n      timestamp: Date.now(),\n      type: success ? 'end' : 'error',\n      position: this.pipelinePosition || 'middle',\n      data: {\n        output,\n        success,\n        error,\n        pipelinePosition: this.pipelinePosition,\n        moduleInfo: {\n          id: this.info.id,\n          name: this.info.name,\n          version: this.info.version\n        }\n      }\n    };\n\n    this.eventBus.publish(event);\n\n    // Log locally for backward compatibility\n    this.debug('debug', `I/O tracking ended: ${operationId}`, {\n      sessionId: this.currentSessionId,\n      output: this.debugConfig.trackDataFlow ? output : '[OUTPUT_DATA]',\n      success,\n      error\n    }, 'endIOTracking');\n  }\n}"],"names":["uuidv4","fs"],"mappings":"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"}