{"version":3,"file":"index.esm.js","sources":["../src/core/DebugEventBus.ts","../src/core/DebugCenter.ts","../src/index.ts"],"sourcesContent":["/**\n * Debug Event Bus - 事件驱动的调试通信总线\n * Event-driven debug communication bus\n */\n\n// DebugEvent interface defined here to avoid circular imports\n// This interface must be compatible with BaseModule's DebugEvent interface\nexport interface DebugEvent {\n  sessionId?: string;  // Optional for compatibility with BaseModule\n  moduleId: string;\n  operationId: string;\n  timestamp: number;\n  type: 'start' | 'end' | 'error';\n  position: 'start' | 'middle' | 'end';\n  data?: any;\n}\n\nexport class DebugEventBus {\n  private static instance: DebugEventBus;\n  private subscribers: Map<string, Function[]> = new Map();\n  private eventQueue: DebugEvent[] = [];\n  private maxQueueSize: number = 10000;\n\n  private constructor() {}\n\n  public static getInstance(): DebugEventBus {\n    if (!DebugEventBus.instance) {\n      DebugEventBus.instance = new DebugEventBus();\n    }\n    return DebugEventBus.instance;\n  }\n\n  /**\n   * Publish a debug event\n   * @param event - Debug event to publish\n   */\n  public publish(event: DebugEvent): void {\n    // Add to queue\n    if (this.eventQueue.length >= this.maxQueueSize) {\n      this.eventQueue.shift(); // Remove oldest event\n    }\n    this.eventQueue.push(event);\n\n    // Process event immediately\n    this.processEvent(event);\n  }\n\n  /**\n   * Process a single event\n   * @param event - Event to process\n   */\n  private processEvent(event: DebugEvent): void {\n    const subscribers = this.subscribers.get(event.type) || [];\n    const allSubscribers = this.subscribers.get('*') || [];\n\n    // Notify type-specific subscribers\n    subscribers.forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Error in debug event subscriber:', error);\n      }\n    });\n\n    // Notify wildcard subscribers\n    allSubscribers.forEach(callback => {\n      try {\n        callback(event);\n      } catch (error) {\n        console.error('Error in debug event subscriber:', error);\n      }\n    });\n  }\n\n  /**\n   * Subscribe to debug events\n   * @param eventType - Event type to subscribe to ('*' for all events)\n   * @param callback - Callback function\n   */\n  public subscribe(eventType: string, callback: Function): void {\n    if (!this.subscribers.has(eventType)) {\n      this.subscribers.set(eventType, []);\n    }\n    this.subscribers.get(eventType)!.push(callback);\n  }\n\n  /**\n   * Unsubscribe from debug events\n   * @param eventType - Event type to unsubscribe from\n   * @param callback - Callback function to remove\n   */\n  public unsubscribe(eventType: string, callback: Function): void {\n    const subscribers = this.subscribers.get(eventType);\n    if (subscribers) {\n      const index = subscribers.indexOf(callback);\n      if (index > -1) {\n        subscribers.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Get recent events from the queue\n   * @param limit - Maximum number of events to return\n   * @param type - Optional event type filter\n   */\n  public getRecentEvents(limit: number = 100, type?: string): DebugEvent[] {\n    let events = [...this.eventQueue];\n    \n    if (type) {\n      events = events.filter(event => event.type === type);\n    }\n    \n    return events.slice(-limit);\n  }\n\n  /**\n   * Clear the event queue\n   */\n  public clear(): void {\n    this.eventQueue = [];\n    this.subscribers.clear();\n  }\n\n  /**\n   * Get queue statistics\n   */\n  public getStats() {\n    return {\n      queueSize: this.eventQueue.length,\n      subscriberCount: Array.from(this.subscribers.values()).reduce((sum, subs) => sum + subs.length, 0),\n      eventTypes: Array.from(this.subscribers.keys()),\n      maxQueueSize: this.maxQueueSize\n    };\n  }\n\n  /**\n   * Set maximum queue size\n   * @param size - Maximum queue size\n   */\n  public setMaxQueueSize(size: number): void {\n    this.maxQueueSize = Math.max(100, size);\n    \n    // Trim queue if necessary\n    if (this.eventQueue.length > this.maxQueueSize) {\n      this.eventQueue = this.eventQueue.slice(-this.maxQueueSize);\n    }\n  }\n}","/**\n * DebugCenter - 调试中心，统一管理流水线会话和记录\n * DebugCenter - Centralized debug management for pipeline sessions and recording\n */\n\nimport { DebugEventBus, DebugEvent } from './DebugEventBus';\n// import { v4 as uuidv4 } from 'uuid'; // Unused import\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface PipelineSession {\n  sessionId: string;\n  pipelineId: string;\n  startTime: number;\n  endTime?: number;\n  status: 'active' | 'completed' | 'failed' | 'terminated';\n  operations: Array<{\n    operationId: string;\n    moduleId: string;\n    position: 'start' | 'middle' | 'end';\n    startTime: number;\n    endTime?: number;\n    status: 'running' | 'completed' | 'failed';\n    input?: any;\n    output?: any;\n    error?: string;\n  }>;\n}\n\nexport interface PipelineConfig {\n  pipelineId: string;\n  startModule: string;\n  middleModules: string[];\n  endModule: string;\n  recordingMode: 'unified' | 'separated';\n}\n\nexport interface DebugCenterConfig {\n  outputDirectory: string;\n  maxSessions: number;\n  retentionDays: number;\n  enableRealTimeUpdates: boolean;\n}\n\nexport class DebugCenter {\n  private activeSessions: Map<string, PipelineSession> = new Map();\n  private eventBus: DebugEventBus;\n  private config: DebugCenterConfig;\n  private cleanupInterval?: NodeJS.Timeout;\n\n  constructor(config: Partial<DebugCenterConfig> = {}) {\n    this.config = {\n      outputDirectory: config.outputDirectory || './debug-logs',\n      maxSessions: config.maxSessions || 1000,\n      retentionDays: config.retentionDays || 7,\n      enableRealTimeUpdates: config.enableRealTimeUpdates !== false\n    };\n\n    this.eventBus = DebugEventBus.getInstance();\n    this.setupEventListeners();\n    this.ensureOutputDirectory();\n    this.startCleanupTimer();\n  }\n\n  private setupEventListeners(): void {\n    this.eventBus.subscribe('start', this.handleOperationStart.bind(this));\n    this.eventBus.subscribe('end', this.handleOperationEnd.bind(this));\n    this.eventBus.subscribe('error', this.handleOperationError.bind(this));\n  }\n\n  private async ensureOutputDirectory(): Promise<void> {\n    try {\n      await fs.promises.mkdir(this.config.outputDirectory, { recursive: true });\n    } catch (error) {\n      console.error('Failed to create debug output directory:', error);\n    }\n  }\n\n  private startCleanupTimer(): void {\n    // Clean up old sessions every hour\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupOldSessions();\n    }, 60 * 60 * 1000);\n  }\n\n  private cleanupOldSessions(): void {\n    const cutoffTime = Date.now() - (this.config.retentionDays * 24 * 60 * 60 * 1000);\n\n    for (const [sessionId, session] of this.activeSessions) {\n      if (session.startTime < cutoffTime) {\n        this.activeSessions.delete(sessionId);\n        this.logDebug(`Cleaned up old session: ${sessionId}`);\n      }\n    }\n  }\n\n  private handleOperationStart(event: DebugEvent): void {\n    if (event.operationId === 'session_start') {\n      this.handleSessionStart(event);\n      return;\n    }\n\n    // Skip processing if no sessionId is provided\n    if (!event.sessionId) {\n      this.logDebug(`Received start event without sessionId: ${event.operationId}`);\n      return;\n    }\n\n    let session = this.activeSessions.get(event.sessionId);\n\n    // If no session exists, create one\n    if (!session) {\n      session = this.createSessionFromEvent(event);\n      this.activeSessions.set(event.sessionId, session);\n    }\n\n    // Add operation to session\n    const operation = {\n      operationId: event.operationId,\n      moduleId: event.moduleId,\n      position: event.position,\n      startTime: event.timestamp,\n      status: 'running' as const,\n      input: event.data?.input\n    };\n\n    session.operations.push(operation);\n    this.updateSessionFile(session);\n\n    this.logDebug(`Operation started: ${event.operationId} in session ${event.sessionId}`);\n  }\n\n  private handleOperationEnd(event: DebugEvent): void {\n    if (event.operationId === 'session_end') {\n      this.handleSessionEnd(event);\n      return;\n    }\n\n    // Skip processing if no sessionId is provided\n    if (!event.sessionId) {\n      this.logDebug(`Received end event without sessionId: ${event.operationId}`);\n      return;\n    }\n\n    const session = this.activeSessions.get(event.sessionId);\n    if (!session) {\n      this.logDebug(`Received end event for unknown session: ${event.sessionId}`);\n      return;\n    }\n\n    // Find and update the operation\n    const operation = session.operations.find(op => op.operationId === event.operationId);\n    if (operation) {\n      operation.endTime = event.timestamp;\n      operation.status = 'completed';\n      operation.output = event.data?.output;\n    }\n\n    this.updateSessionFile(session);\n    this.logDebug(`Operation ended: ${event.operationId} in session ${event.sessionId}`);\n  }\n\n  private handleOperationError(event: DebugEvent): void {\n    // Skip processing if no sessionId is provided\n    if (!event.sessionId) {\n      this.logDebug(`Received error event without sessionId: ${event.operationId}`);\n      return;\n    }\n\n    const session = this.activeSessions.get(event.sessionId);\n    if (!session) {\n      this.logDebug(`Received error event for unknown session: ${event.sessionId}`);\n      return;\n    }\n\n    // Find and update the operation\n    const operation = session.operations.find(op => op.operationId === event.operationId);\n    if (operation) {\n      operation.endTime = event.timestamp;\n      operation.status = 'failed';\n      operation.error = event.data?.error || 'Unknown error';\n    }\n\n    // Mark session as failed\n    session.status = 'failed';\n    session.endTime = event.timestamp;\n\n    this.updateSessionFile(session);\n    this.logDebug(`Operation failed: ${event.operationId} in session ${event.sessionId}`);\n  }\n\n  private handleSessionStart(event: DebugEvent): void {\n    // Skip processing if no sessionId is provided\n    if (!event.sessionId) {\n      this.logDebug(`Received session start event without sessionId`);\n      return;\n    }\n\n    const session = this.createSessionFromEvent(event);\n    this.activeSessions.set(event.sessionId, session);\n    this.createSessionFile(session);\n    this.logDebug(`Session started: ${event.sessionId}`);\n  }\n\n  private handleSessionEnd(event: DebugEvent): void {\n    // Skip processing if no sessionId is provided\n    if (!event.sessionId) {\n      this.logDebug(`Received session end event without sessionId`);\n      return;\n    }\n\n    const session = this.activeSessions.get(event.sessionId);\n    if (!session) {\n      this.logDebug(`Received end event for unknown session: ${event.sessionId}`);\n      return;\n    }\n\n    session.endTime = event.timestamp;\n    session.status = 'completed';\n\n    this.finalizeSessionFile(session);\n    this.activeSessions.delete(event.sessionId);\n    this.logDebug(`Session ended: ${event.sessionId}`);\n  }\n\n  private createSessionFromEvent(event: DebugEvent): PipelineSession {\n    return {\n      sessionId: event.sessionId || `session_${Date.now()}`,\n      pipelineId: event.data?.pipelineId || 'unknown',\n      startTime: event.timestamp,\n      status: 'active',\n      operations: []\n    };\n  }\n\n  private createSessionFile(session: PipelineSession): void {\n    const fileName = `pipeline-session-${session.sessionId}.json`;\n    const filePath = path.join(this.config.outputDirectory, fileName);\n\n    const content = {\n      sessionId: session.sessionId,\n      pipelineId: session.pipelineId,\n      startTime: session.startTime,\n      status: session.status,\n      operations: session.operations\n    };\n\n    this.writeJsonFile(filePath, content);\n  }\n\n  private updateSessionFile(session: PipelineSession): void {\n    const fileName = `pipeline-session-${session.sessionId}.json`;\n    const filePath = path.join(this.config.outputDirectory, fileName);\n\n    const content = {\n      sessionId: session.sessionId,\n      pipelineId: session.pipelineId,\n      startTime: session.startTime,\n      endTime: session.endTime,\n      status: session.status,\n      operations: session.operations\n    };\n\n    this.writeJsonFile(filePath, content);\n  }\n\n  private finalizeSessionFile(session: PipelineSession): void {\n    this.updateSessionFile(session);\n\n    // Generate summary\n    const summary = this.generateSessionSummary(session);\n    const summaryFileName = `pipeline-session-${session.sessionId}-summary.json`;\n    const summaryFilePath = path.join(this.config.outputDirectory, summaryFileName);\n\n    this.writeJsonFile(summaryFilePath, summary);\n  }\n\n  private generateSessionSummary(session: PipelineSession): any {\n    const operations = session.operations;\n    const totalDuration = session.endTime ? session.endTime - session.startTime : 0;\n\n    return {\n      sessionId: session.sessionId,\n      pipelineId: session.pipelineId,\n      totalDuration,\n      operationCount: operations.length,\n      successCount: operations.filter(op => op.status === 'completed').length,\n      failureCount: operations.filter(op => op.status === 'failed').length,\n      runningCount: operations.filter(op => op.status === 'running').length,\n      averageOperationDuration: operations.length > 0\n        ? operations.reduce((sum, op) => sum + (op.endTime ? op.endTime - op.startTime : 0), 0) / operations.length\n        : 0,\n      timeline: operations.map(op => ({\n        moduleId: op.moduleId,\n        operationId: op.operationId,\n        position: op.position,\n        startTime: op.startTime,\n        endTime: op.endTime,\n        duration: op.endTime ? op.endTime - op.startTime : 0,\n        status: op.status\n      }))\n    };\n  }\n\n  private writeJsonFile(filePath: string, content: any): void {\n    try {\n      fs.writeFileSync(filePath, JSON.stringify(content, null, 2));\n    } catch (error) {\n      console.error(`Failed to write debug file ${filePath}:`, error);\n    }\n  }\n\n  private logDebug(message: string, data?: any): void {\n    if (this.config.enableRealTimeUpdates) {\n      console.log(`[DebugCenter] ${message}`, data || '');\n    }\n  }\n\n  // Public API methods\n\n  public getActiveSessions(): PipelineSession[] {\n    return Array.from(this.activeSessions.values());\n  }\n\n  public getSession(sessionId: string): PipelineSession | undefined {\n    return this.activeSessions.get(sessionId);\n  }\n\n  public getSessionCount(): number {\n    return this.activeSessions.size;\n  }\n\n  public updateConfig(newConfig: Partial<DebugCenterConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n\n    if (newConfig.outputDirectory) {\n      this.ensureOutputDirectory();\n    }\n\n    this.logDebug('Configuration updated', { config: this.config });\n  }\n\n  public getConfig(): DebugCenterConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Process debug event from external source (e.g., BaseModule)\n   * This method provides a standardized interface for receiving debug events from other modules\n   * @param event - Debug event from external source\n   */\n  public processDebugEvent(event: DebugEvent): void {\n    if (!this.config.enableRealTimeUpdates) {\n      return;\n    }\n\n    // Validate required fields\n    if (!event.sessionId || !event.moduleId || !event.operationId) {\n      this.logDebug('Invalid debug event received', { event });\n      return;\n    }\n\n    // Convert the external event to internal format and process\n    const internalEvent: DebugEvent = {\n      sessionId: event.sessionId,\n      moduleId: event.moduleId,\n      operationId: event.operationId,\n      timestamp: event.timestamp || Date.now(),\n      type: event.type,\n      position: event.position,\n      data: event.data || {}\n    };\n\n    // Process through the existing event handlers\n    switch (internalEvent.type) {\n      case 'start':\n        this.handleOperationStart(internalEvent);\n        break;\n      case 'end':\n        this.handleOperationEnd(internalEvent);\n        break;\n      case 'error':\n        this.handleOperationError(internalEvent);\n        break;\n      default:\n        this.logDebug('Unknown event type received', { type: internalEvent.type });\n    }\n\n    // Also publish to internal event bus for consistency\n    this.eventBus.publish(internalEvent);\n  }\n\n  /**\n   * Connect BaseModule to this DebugCenter instance\n   * This is a convenience method for easy integration\n   * @param baseModule - BaseModule instance to connect\n   */\n  public connectBaseModule(baseModule: any): void {\n    if (typeof baseModule.setExternalDebugHandler === 'function') {\n      baseModule.setExternalDebugHandler((event: DebugEvent) => {\n        this.processDebugEvent(event);\n      });\n      this.logDebug('BaseModule connected to DebugCenter');\n    } else {\n      this.logDebug('BaseModule does not support external debug handler');\n    }\n  }\n\n  public async destroy(): Promise<void> {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n\n    // Finalize all active sessions\n    for (const session of this.activeSessions.values()) {\n      session.status = 'terminated';\n      session.endTime = Date.now();\n      this.finalizeSessionFile(session);\n    }\n\n    this.activeSessions.clear();\n    this.logDebug('DebugCenter destroyed');\n  }\n}\n","// Core exports\nexport { DebugCenter } from './core/DebugCenter';\nexport { DebugEventBus, type DebugEvent } from './core/DebugEventBus';\n\n// Type exports\nexport type {\n  DebugLevel,\n  PipelineOperationType,\n  PipelinePosition,\n  DebugLogEntry,\n  PipelineIOEntry,\n  PipelineSession,\n  DebugCenterConfig,\n  RecordingStats,\n  ExportFormat,\n  ExportOptions\n} from './types';\n\n// Default export\nimport { DebugCenter } from './core/DebugCenter';\nexport default DebugCenter;\n"],"names":[],"mappings":"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"}