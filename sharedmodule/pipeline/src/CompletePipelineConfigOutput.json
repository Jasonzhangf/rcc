{
  "version": "1.0.0",
  "metadata": {
    "createdAt": "2024-01-01T00:00:00Z",
    "updatedAt": "2024-01-01T00:00:00Z",
    "description": "Complete pipeline system configuration for LLM API processing",
    "author": "RCC System"
  },
  "routingRules": [
    {
      "ruleId": "llm-chat-routing",
      "name": "LLM对话路由",
      "priority": 1,
      "enabled": true,
      "conditions": [
        {
          "field": "request.path",
          "operator": "equals",
          "value": "/api/v1/chat"
        },
        {
          "field": "request.method",
          "operator": "equals",
          "value": "POST"
        }
      ],
      "pipelineSelection": {
        "strategy": "weighted",
        "weights": {
          "llm-chat-primary": 80,
          "llm-chat-backup": 20
        }
      },
      "moduleFilters": [],
      "dynamicConfig": {
        "enableAdaptiveRouting": true,
        "performanceThresholds": {
          "maxResponseTime": 5000,
          "minSuccessRate": 0.95,
          "maxErrorRate": 0.05
        }
      }
    },
    {
      "ruleId": "llm-completion-routing",
      "name": "LLM补全路由",
      "priority": 2,
      "enabled": true,
      "conditions": [
        {
          "field": "request.path",
          "operator": "equals",
          "value": "/api/v1/completion"
        },
        {
          "field": "request.method",
          "operator": "equals",
          "value": "POST"
        }
      ],
      "pipelineSelection": {
        "strategy": "weighted",
        "weights": {
          "llm-completion-primary": 70,
          "llm-completion-backup": 30
        }
      },
      "moduleFilters": [],
      "dynamicConfig": {
        "enableAdaptiveRouting": true,
        "performanceThresholds": {
          "maxResponseTime": 10000,
          "minSuccessRate": 0.9,
          "maxErrorRate": 0.1
        }
      }
    }
  ],
  "pipelineTemplates": [
    {
      "templateId": "llm-chat-primary",
      "name": "LLM对话主流水线",
      "description": "主要的大语言模型对话处理流水线",
      "version": "1.0.0",
      "baseConfig": {
        "timeout": 120000,
        "maxConcurrentRequests": 100,
        "priority": 1,
        "enabled": true
      },
      "moduleAssembly": {
        "moduleInstances": [
          {
            "instanceId": "protocol-adapter",
            "moduleId": "llm-switch-module",
            "name": "协议适配器",
            "initialization": {
              "config": {
                "inputProtocol": "openai",
                "outputProtocol": "native",
                "enableFieldMapping": true,
                "customMappings": {
                  "model": "target_model",
                  "messages": "conversation"
                }
              },
              "dependencies": [],
              "startupOrder": 1,
              "required": true
            },
            "execution": {
              "timeout": 10000,
              "retryPolicy": {
                "maxRetries": 2,
                "baseDelay": 1000,
                "maxDelay": 5000,
                "backoffMultiplier": 2,
                "jitter": true
              },
              "circuitBreaker": {
                "failureThreshold": 5,
                "recoveryTime": 60000,
                "requestVolumeThreshold": 10,
                "timeout": 5000
              },
              "healthCheck": {
                "enabled": true,
                "interval": 30000,
                "timeout": 5000
              }
            },
            "conditions": {
              "enableConditions": [],
              "skipConditions": []
            }
          },
          {
            "instanceId": "model-router",
            "moduleId": "model-router-module",
            "name": "模型路由器",
            "initialization": {
              "config": {
                "strategy": "cost_optimized",
                "models": {
                  "gpt-4": {
                    "cost": 0.03,
                    "priority": 1
                  },
                  "claude-3": {
                    "cost": 0.015,
                    "priority": 2
                  }
                },
                "fallbackModels": ["gpt-3.5-turbo"]
              },
              "dependencies": ["protocol-adapter"],
              "startupOrder": 2,
              "required": true
            },
            "execution": {
              "timeout": 60000,
              "retryPolicy": {
                "maxRetries": 3,
                "baseDelay": 1000,
                "maxDelay": 10000,
                "backoffMultiplier": 2,
                "jitter": true
              },
              "circuitBreaker": {
                "failureThreshold": 5,
                "recoveryTime": 60000,
                "requestVolumeThreshold": 10,
                "timeout": 5000
              }
            },
            "conditions": {
              "enableConditions": [],
              "skipConditions": []
            }
          },
          {
            "instanceId": "response-processor",
            "moduleId": "response-processor-module",
            "name": "响应处理器",
            "initialization": {
              "config": {
                "format": "openai",
                "enableStreaming": true,
                "includeUsage": true
              },
              "dependencies": ["model-router"],
              "startupOrder": 3,
              "required": true
            },
            "execution": {
              "timeout": 30000
            },
            "conditions": {
              "enableConditions": [],
              "skipConditions": []
            }
          }
        ],
        "connections": [
          {
            "id": "adapter-to-router",
            "from": "protocol-adapter",
            "to": "model-router",
            "type": "success",
            "dataMapping": {
              "sourcePath": "protocol-adapter.output",
              "targetPath": "model-router.input",
              "required": true
            }
          },
          {
            "id": "router-to-response",
            "from": "model-router",
            "to": "response-processor",
            "type": "success",
            "dataMapping": {
              "sourcePath": "model-router.output",
              "targetPath": "response-processor.input",
              "required": true
            }
          }
        ],
        "dataMappings": [
          {
            "sourcePath": "request.body",
            "targetPath": "protocol-adapter.input",
            "required": true
          }
        ],
        "conditions": []
      },
      "executionStrategy": {
        "mode": "sequential",
        "timeout": 120000,
        "retryPolicy": {
          "maxRetries": 1,
          "baseDelay": 1000,
          "maxDelay": 5000,
          "backoffMultiplier": 2,
          "jitter": true
        }
      },
      "dataFlow": {
        "inputSchema": {
          "type": "object",
          "properties": {
            "model": {
              "type": "string"
            },
            "messages": {
              "type": "array"
            }
          },
          "required": ["model", "messages"]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "choices": {
              "type": "array"
            },
            "usage": {
              "type": "object"
            }
          }
        },
        "validation": {
          "enabled": true,
          "strict": true
        }
      }
    },
    {
      "templateId": "llm-completion-primary",
      "name": "LLM补全主流水线",
      "description": "主要的大语言模型补全处理流水线",
      "version": "1.0.0",
      "baseConfig": {
        "timeout": 120000,
        "maxConcurrentRequests": 50,
        "priority": 1,
        "enabled": true
      },
      "moduleAssembly": {
        "moduleInstances": [
          {
            "instanceId": "completion-adapter",
            "moduleId": "llm-switch-module",
            "name": "补全协议适配器",
            "initialization": {
              "config": {
                "inputProtocol": "openai",
                "outputProtocol": "native",
                "enableFieldMapping": true
              },
              "dependencies": [],
              "startupOrder": 1,
              "required": true
            },
            "execution": {
              "timeout": 10000
            },
            "conditions": {
              "enableConditions": [],
              "skipConditions": []
            }
          },
          {
            "instanceId": "completion-router",
            "moduleId": "model-router-module",
            "name": "补全模型路由器",
            "initialization": {
              "config": {
                "strategy": "performance",
                "models": {
                  "gpt-3.5-turbo": {
                    "latency": 500,
                    "priority": 1
                  },
                  "llama-2": {
                    "latency": 800,
                    "priority": 2
                  }
                }
              },
              "dependencies": ["completion-adapter"],
              "startupOrder": 2,
              "required": true
            },
            "execution": {
              "timeout": 30000
            },
            "conditions": {
              "enableConditions": [],
              "skipConditions": []
            }
          }
        ],
        "connections": [
          {
            "id": "completion-adapter-to-router",
            "from": "completion-adapter",
            "to": "completion-router",
            "type": "success"
          }
        ],
        "dataMappings": [
          {
            "sourcePath": "request.body",
            "targetPath": "completion-adapter.input",
            "required": true
          }
        ],
        "conditions": []
      },
      "executionStrategy": {
        "mode": "sequential",
        "timeout": 120000
      },
      "dataFlow": {
        "inputSchema": {
          "type": "object",
          "properties": {
            "model": {
              "type": "string"
            },
            "prompt": {
              "type": "string"
            }
          },
          "required": ["model", "prompt"]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "choices": {
              "type": "array"
            }
          }
        },
        "validation": {
          "enabled": true,
          "strict": true
        }
      }
    }
  ],
  "moduleRegistry": [
    {
      "moduleId": "llm-switch-module",
      "name": "LLM协议转换模块",
      "version": "1.0.0",
      "type": "protocol-adapter",
      "description": "在不同LLM API协议间转换",
      "capabilities": ["protocol-conversion", "field-mapping", "validation"],
      "dependencies": [],
      "configSchema": {
        "type": "object",
        "properties": {
          "inputProtocol": {
            "type": "string",
            "enum": ["openai", "anthropic", "native"]
          },
          "outputProtocol": {
            "type": "string",
            "enum": ["openai", "anthropic", "native"]
          },
          "enableFieldMapping": {
            "type": "boolean"
          },
          "customMappings": {
            "type": "object"
          }
        },
        "required": ["inputProtocol", "outputProtocol"]
      },
      "initializationConfig": {
        "setupFunction": "initializeAdapter",
        "validationFunction": "validateConfiguration",
        "dependencies": []
      },
      "tags": ["protocol", "adapter"],
      "metadata": {
        "supportedProtocols": ["openai", "anthropic", "native"]
      }
    },
    {
      "moduleId": "model-router-module",
      "name": "模型路由模块",
      "version": "1.0.0",
      "type": "model-selector",
      "description": "根据策略选择最佳模型",
      "capabilities": ["model-selection", "cost-optimization", "performance-routing"],
      "dependencies": [],
      "configSchema": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "enum": ["cost_optimized", "performance", "availability"]
          },
          "models": {
            "type": "object"
          },
          "fallbackModels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["strategy", "models"]
      },
      "initializationConfig": {
        "setupFunction": "initializeRouter",
        "validationFunction": "validateRouterConfig"
      },
      "tags": ["routing", "model-selection"],
      "metadata": {
        "supportedStrategies": ["cost_optimized", "performance", "availability"]
      }
    },
    {
      "moduleId": "response-processor-module",
      "name": "响应处理器模块",
      "version": "1.0.0",
      "type": "response-handler",
      "description": "处理和格式化模型响应",
      "capabilities": ["response-formatting", "streaming", "usage-tracking"],
      "dependencies": [],
      "configSchema": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "enableStreaming": {
            "type": "boolean"
          },
          "includeUsage": {
            "type": "boolean"
          }
        },
        "required": ["format"]
      },
      "initializationConfig": {
        "setupFunction": "initializeProcessor",
        "validationFunction": "validateProcessorConfig"
      },
      "tags": ["response", "formatting"],
      "metadata": {}
    }
  ],
  "assemblyStrategies": [
    {
      "strategyId": "performance-based-assembly",
      "name": "基于性能的组装策略",
      "description": "根据模块性能指标动态组装流水线",
      "algorithm": "dynamic",
      "config": {
        "performanceMetrics": ["latency", "errorRate", "throughput"],
        "weighting": {
          "latency": 0.5,
          "errorRate": 0.3,
          "throughput": 0.2
        }
      },
      "selectionCriteria": {
        "performance": true,
        "cost": false,
        "reliability": true
      }
    },
    {
      "strategyId": "cost-based-assembly",
      "name": "基于成本的组装策略",
      "description": "根据运行成本动态组装流水线",
      "algorithm": "dynamic",
      "config": {
        "costMetrics": ["perRequestCost", "modelCost", "infrastructureCost"],
        "optimizationTarget": "minimizeCost"
      },
      "selectionCriteria": {
        "performance": false,
        "cost": true,
        "reliability": true
      }
    }
  ]
}