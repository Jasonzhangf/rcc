{"version":3,"file":"index.esm.js","sources":["../src/components/HttpServer.ts","../src/components/VirtualModelRouter.ts","../src/ServerModule.ts"],"sourcesContent":["// HTTP Server component for RCC Server Module\n\nimport express, { Application as ExpressApplication, Request, Response } from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport { createServer, Server as HttpServer } from 'http';\nimport { BaseModule, ModuleInfo } from 'rcc-basemodule';\nimport { IHttpServer } from '../interfaces/IServerModule';\nimport { ServerConfig, ClientRequest, ClientResponse } from '../types/ServerTypes';\n\nexport class HttpServerComponent extends BaseModule implements IHttpServer {\n  private app: ExpressApplication;\n  private server: HttpServer | null = null;\n  private config: ServerConfig | null = null;\n  private isRunning: boolean = false;\n\n  constructor() {\n    const moduleInfo: ModuleInfo = {\n      id: 'HttpServer',\n      name: 'HTTP Server Component',\n      version: '1.0.0',\n      description: 'HTTP server component for RCC Server Module',\n      type: 'component',\n      capabilities: ['http-server', 'middleware', 'security'],\n      dependencies: ['express', 'cors', 'helmet'],\n      config: {},\n      metadata: {\n        author: 'RCC Development Team',\n        license: 'MIT'\n      }\n    };\n    \n    super(moduleInfo);\n    this.app = express();\n  }\n\n  /**\n   * Initialize the HTTP server with configuration\n   */\n  public override configure(config: ServerConfig): void {\n    super.configure(config);\n    this.config = config;\n  }\n\n  public override async initialize(): Promise<void> {\n    this.log('Initializing HTTP server component');\n    \n    if (!this.config) {\n      throw new Error('HTTP server not configured');\n    }\n    \n    // Apply security middleware\n    if (this.config.helmet) {\n      this.app.use(helmet());\n    }\n    \n    // Enable CORS\n    this.app.use(cors(this.config.cors));\n    \n    // Enable compression\n    if (this.config.compression) {\n      this.app.use(compression());\n    }\n    \n    // Parse request bodies\n    this.app.use(bodyParser.json({ limit: this.config.bodyLimit }));\n    this.app.use(bodyParser.urlencoded({ extended: true, limit: this.config.bodyLimit }));\n    \n    // Add request logging middleware\n    this.app.use(this.requestLogger.bind(this));\n    \n    // Add error handling middleware\n    this.app.use(this.errorHandler.bind(this));\n    \n    // Add health check endpoint\n    this.app.get('/health', this.healthCheck.bind(this));\n    \n    // Add metrics endpoint\n    this.app.get('/metrics', this.getMetrics.bind(this));\n    \n    this.log('HTTP server component initialized successfully', { method: 'initialize' });\n  }\n\n  /**\n   * Start the HTTP server\n   */\n  public async listen(port: number, host: string = 'localhost'): Promise<void> {\n    if (this.isRunning) {\n      this.warn('HTTP server is already running', { method: 'listen' });\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      this.server = createServer(this.app);\n      \n      this.server.listen(port, host, () => {\n        this.isRunning = true;\n        this.log(`HTTP server listening on ${host}:${port}`, { method: 'listen' });\n        resolve();\n      });\n      \n      this.server.on('error', (error) => {\n        this.error('HTTP server error', { method: 'listen' });\n        reject(error);\n      });\n      \n      this.server.on('connection', (socket) => {\n        this.log(`New connection established from ${socket.remoteAddress}`, { method: 'listen' });\n        \n        socket.on('close', () => {\n          this.log(`Connection closed from ${socket.remoteAddress}`, { method: 'listen' });\n        });\n        \n        socket.on('error', () => {\n          this.warn('Connection error', { method: 'listen' });\n        });\n      });\n    });\n  }\n\n  /**\n   * Stop the HTTP server\n   */\n  public async close(): Promise<void> {\n    if (!this.isRunning || !this.server) {\n      this.warn('HTTP server is not running', { method: 'close' });\n      return;\n    }\n\n    return new Promise((resolve) => {\n      this.server!.close(() => {\n        this.isRunning = false;\n        this.server = null;\n        this.log('HTTP server stopped', { method: 'close' });\n        resolve();\n      });\n    });\n  }\n\n  /**\n   * Add event listener\n   */\n  public on(event: string, callback: (...args: any[]) => void): void {\n    if (this.server) {\n      this.server.on(event, callback);\n    }\n  }\n\n  /**\n   * Remove event listener\n   */\n  public off(event: string, callback: (...args: any[]) => void): void {\n    if (this.server) {\n      this.server.off(event, callback);\n    }\n  }\n\n  /**\n   * Get active connections count\n   */\n  public getConnections(callback: (err: Error | null, count: number) => void): void {\n    if (this.server) {\n      this.server.getConnections(callback);\n    } else {\n      callback(new Error('Server not running'), 0);\n    }\n  }\n\n  /**\n   * Get the Express application instance\n   */\n  public getApp(): ExpressApplication {\n    return this.app;\n  }\n\n  /**\n   * Check if server is running\n   */\n  public isServerRunning(): boolean {\n    return this.isRunning;\n  }\n\n  /**\n   * Request logging middleware\n   */\n  private requestLogger(req: express.Request, res: express.Response, next: express.NextFunction): void {\n    const start = Date.now();\n    \n    res.on('finish', () => {\n      const duration = Date.now() - start;\n      const status = res.statusCode;\n      const method = req.method;\n      const url = req.originalUrl;\n      const userAgent = req.get('User-Agent') || 'Unknown';\n      const ip = req.ip || req.connection.remoteAddress || 'Unknown';\n      \n      this.log(`${method} ${url} - ${status} - ${duration}ms - ${ip} - ${userAgent}`, { method: 'requestLogger' });\n    });\n    \n    next();\n  }\n\n  /**\n   * Error handling middleware\n   */\n  private errorHandler(error: Error, req: express.Request, res: express.Response, next: express.NextFunction): void {\n    this.error('Request error', { method: 'errorHandler' });\n\n    const status = (error as any).status || 500;\n    const message = process.env.NODE_ENV === 'production' ? 'Internal Server Error' : error.message;\n\n    res.status(status).json({\n      error: {\n        message,\n        status,\n        timestamp: Date.now(),\n        requestId: (req as any).requestId\n      }\n    });\n  }\n\n  /**\n   * Health check endpoint\n   */\n  private healthCheck(_req: express.Request, res: express.Response): void {\n    const health = {\n      status: this.isRunning ? 'healthy' : 'unhealthy',\n      timestamp: Date.now(),\n      uptime: process.uptime(),\n      version: process.env.npm_package_version || 'unknown',\n      node: process.version,\n      memory: process.memoryUsage(),\n      connections: 0\n    };\n\n    if (this.server) {\n      this.getConnections((_err, count) => {\n        health.connections = count;\n        res.status(health.status === 'healthy' ? 200 : 503).json(health);\n      });\n    } else {\n      res.status(health.status === 'healthy' ? 200 : 503).json(health);\n    }\n  }\n\n  /**\n   * Get server metrics\n   */\n  private getMetrics(_req: express.Request, res: express.Response): void {\n    const metrics = {\n      timestamp: Date.now(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      cpu: process.cpuUsage(),\n      isRunning: this.isRunning,\n      connections: 0\n    };\n\n    if (this.server) {\n      this.getConnections((_err, count) => {\n        metrics.connections = count;\n        res.json(metrics);\n      });\n    } else {\n      res.json(metrics);\n    }\n  }\n\n  /**\n   * Convert Express request to ClientRequest\n   */\n  public expressToClientRequest(req: Request): ClientRequest {\n    return {\n      id: this.generateRequestId(),\n      method: req.method as ClientRequest['method'],\n      path: req.path,\n      headers: this.sanitizeHeaders(req.headers),\n      body: req.body,\n      query: req.query as Record<string, string>,\n      timestamp: Date.now(),\n      clientId: req.get('X-Client-ID') || undefined,\n      virtualModel: req.get('X-Virtual-Model') || undefined\n    };\n  }\n\n  /**\n   * Convert ClientResponse to Express response\n   */\n  public clientResponseToExpress(response: ClientResponse, res: Response): void {\n    res.status(response.status);\n    \n    // Set headers\n    Object.entries(response.headers).forEach(([key, value]) => {\n      res.setHeader(key, value);\n    });\n    \n    // Set default headers if not present\n    if (!response.headers['Content-Type']) {\n      res.setHeader('Content-Type', 'application/json');\n    }\n    if (!response.headers['X-Request-ID']) {\n      res.setHeader('X-Request-ID', response.id);\n    }\n    if (!response.headers['X-Processing-Time']) {\n      res.setHeader('X-Processing-Time', response.processingTime.toString());\n    }\n    \n    // Send response\n    if (response.body !== undefined) {\n      res.json(response.body);\n    } else {\n      res.end();\n    }\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Sanitize headers for logging\n   */\n  private sanitizeHeaders(headers: any): Record<string, string> {\n    const sanitized: Record<string, string> = {};\n    const sensitiveHeaders = ['authorization', 'cookie', 'set-cookie'];\n    \n    Object.keys(headers).forEach(key => {\n      if (sensitiveHeaders.includes(key.toLowerCase())) {\n        sanitized[key] = '[REDACTED]';\n      } else {\n        sanitized[key] = headers[key] as string;\n      }\n    });\n    \n    return sanitized;\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public override async destroy(): Promise<void> {\n    this.log('Cleaning up HTTP server component', { method: 'destroy' });\n    \n    if (this.server) {\n      await this.close();\n    }\n    \n    this.app = express();\n    this.config = null;\n    \n    super.destroy();\n  }\n}","// Virtual Model Router component for RCC Server Module\n\nimport { BaseModule, ModuleInfo } from 'rcc-basemodule';\nimport { IVirtualModelRouter } from '../interfaces/IServerModule';\nimport { VirtualModelConfig, ClientRequest, RoutingRule } from '../types/ServerTypes';\n\nexport interface RoutingDecision {\n  model: VirtualModelConfig;\n  confidence: number;\n  reason: string;\n  alternativeModels?: VirtualModelConfig[];\n}\n\nexport interface ModelMetrics {\n  modelId: string;\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  lastUsed: number;\n  uptime: number;\n  errorRate: number;\n  throughput: number;\n}\n\nexport class VirtualModelRouter extends BaseModule implements IVirtualModelRouter {\n  private virtualModels: Map<string, VirtualModelConfig> = new Map();\n  private routingRules: Map<string, RoutingRule[]> = new Map();\n  private modelMetrics: Map<string, ModelMetrics> = new Map();\n\n  constructor() {\n    const moduleInfo: ModuleInfo = {\n      id: 'VirtualModelRouter',\n      name: 'Virtual Model Router',\n      version: '1.0.0',\n      description: 'Virtual model routing with rule evaluation',\n      type: 'component',\n      capabilities: ['virtual-model-routing', 'rule-evaluation'],\n      dependencies: ['rcc-basemodule'],\n      config: {},\n      metadata: {\n        author: 'RCC Development Team',\n        license: 'MIT'\n      }\n    };\n    \n    super(moduleInfo);\n  }\n\n  /**\n   * Route a request to the appropriate virtual model\n   */\n  public async routeRequest(request: ClientRequest): Promise<VirtualModelConfig> {\n    const requestId = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    console.log('=== VirtualModelRouter.routeRequest called ===');\n    console.log(`[${requestId}] Request details:`, {\n      method: request.method,\n      path: request.path,\n      virtualModel: request.virtualModel,\n      headers: request.headers,\n      bodyLength: request.body ? JSON.stringify(request.body).length : 0\n    });\n    console.log(`[${requestId}] Available virtual models:`, Array.from(this.virtualModels.keys()));\n    console.log(`[${requestId}] Enabled virtual models:`, this.getEnabledModels().map(m => m.id));\n\n    this.log('Routing request', {\n      method: 'routeRequest',\n      requestId,\n      path: request.path,\n      virtualModel: request.virtualModel\n    });\n\n    // If specific virtual model is requested, use it\n    if (request.virtualModel) {\n      console.log(`[${requestId}] Specific virtual model requested:`, request.virtualModel);\n      const model = this.virtualModels.get(request.virtualModel);\n      console.log(`[${requestId}] Model found:`, model ? {\n        id: model.id,\n        name: model.name,\n        enabled: model.enabled ?? true,\n        capabilities: model.capabilities\n      } : null);\n\n      if (model && (model.enabled ?? true)) {\n        this.log('Using specified virtual model', {\n          method: 'routeRequest',\n          requestId,\n          modelId: model.id\n        });\n\n        await this.recordRequestMetrics(model.id, true);\n\n        console.log(`[${requestId}] === VirtualModelRouter.routeRequest completed (specific model) ===`);\n        return model;\n      }\n\n      this.warn('Requested virtual model not found or disabled', {\n        method: 'routeRequest',\n        requestId,\n        requestedModel: request.virtualModel,\n        availableModels: Array.from(this.virtualModels.keys())\n      });\n\n      console.log(`[${requestId}] === VirtualModelRouter.routeRequest failed (model not found or disabled) ===`);\n      throw new Error(`Virtual model '${request.virtualModel}' not found or disabled`);\n    }\n\n    // Use intelligent routing to determine the best model\n    console.log(`[${requestId}] Using intelligent routing to determine best model`);\n\n    try {\n      const decision = await this.makeRoutingDecision(request);\n\n      this.log('Routing decision made', {\n        method: 'routeRequest',\n        requestId,\n        selectedModel: decision.model.id,\n        confidence: decision.confidence,\n        reason: decision.reason\n      });\n\n      await this.recordRequestMetrics(decision.model.id, true);\n\n      console.log(`[${requestId}] === VirtualModelRouter.routeRequest completed (intelligent routing) ===`);\n      console.log(`[${requestId}] Selected model: ${decision.model.id} (confidence: ${decision.confidence.toFixed(2)})`);\n\n      return decision.model;\n    } catch (error) {\n      console.error(`[${requestId}] Routing decision failed:`, error);\n\n      // 如果智能路由失败，尝试使用第一个可用的模型作为后备\n      const enabledModels = this.getEnabledModels();\n      if (enabledModels.length > 0) {\n    const fallbackModel = enabledModels[0];\n    if (!fallbackModel) {\n      throw error;\n    }\n    console.log(`[${requestId}] Using fallback model: ${fallbackModel.id}`);\n\n    this.warn('Using fallback model due to routing failure', {\n      method: 'routeRequest',\n      requestId,\n      fallbackModel: fallbackModel.id,\n      error: error instanceof Error ? error.message : String(error)\n    });\n\n    await this.recordRequestMetrics(fallbackModel.id, true);\n    return fallbackModel;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new virtual model\n   */\n  public async registerModel(model: VirtualModelConfig): Promise<void> {\n    this.log('Registering virtual model', { method: 'registerModel' });\n\n    // Validate model configuration\n    this.validateModelConfig(model);\n\n    // Check if model already exists\n    if (this.virtualModels.has(model.id)) {\n      throw new Error(`Virtual model '${model.id}' already exists`);\n    }\n\n    // Process targets array if present (convert from configuration format)\n    const processedModel = this.processTargets(model);\n\n    // Add model to registry\n    this.virtualModels.set(model.id, processedModel);\n\n    // Initialize routing rules\n    this.routingRules.set(model.id, processedModel.routingRules || []);\n\n    // Initialize metrics\n    this.modelMetrics.set(model.id, {\n      modelId: model.id,\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      averageResponseTime: 0,\n      lastUsed: Date.now(),\n      uptime: Date.now(),\n      errorRate: 0,\n      throughput: 0\n    });\n\n    this.log('Virtual model registered successfully', {\n      method: 'registerModel',\n      modelId: model.id,\n      capabilities: processedModel.capabilities,\n      targetsCount: processedModel.targets?.length || 0\n    });\n  }\n\n  /**\n   * Process targets array and convert to model configuration\n   */\n  private processTargets(model: VirtualModelConfig): VirtualModelConfig {\n    const processedModel = { ...model };\n\n    // 如果有targets数组，从中推断模型能力\n    if (model.targets && model.targets.length > 0) {\n      // 从目标推断能力\n      const inferredCapabilities = this.inferCapabilitiesFromTargets(model.targets);\n      if (inferredCapabilities.length > 0) {\n        processedModel.capabilities = [...new Set([...(model.capabilities || []), ...inferredCapabilities])];\n      }\n\n      // 从目标生成模型信息\n      const firstTarget = model.targets[0];\n      if (firstTarget && !processedModel.model) {\n        processedModel.model = firstTarget.modelId;\n      }\n\n      // 生成端点URL（如果没有明确指定）\n      if (firstTarget && !processedModel.endpoint) {\n        processedModel.endpoint = this.generateEndpointFromProvider(firstTarget.providerId);\n      }\n    }\n\n    return processedModel;\n  }\n\n  /**\n   * Infer capabilities from targets configuration\n   */\n  private inferCapabilitiesFromTargets(targets: any[]): string[] {\n    const capabilities: string[] = [];\n\n    for (const target of targets) {\n      // 基于模型ID推断能力\n      const modelId = target.modelId.toLowerCase();\n\n      if (modelId.includes('long') || modelId.includes('context')) {\n        capabilities.push('long-context');\n      }\n\n      if (modelId.includes('think') || modelId.includes('reason') || modelId.includes('r1')) {\n        capabilities.push('thinking');\n      }\n\n      if (modelId.includes('code') || modelId.includes('coder')) {\n        capabilities.push('coding');\n      }\n\n      if (modelId.includes('vision') || modelId.includes('image')) {\n        capabilities.push('vision');\n      }\n\n      // 基于提供商推断能力\n      const providerId = target.providerId.toLowerCase();\n      if (providerId.includes('qwen') || providerId.includes('iflow')) {\n        capabilities.push('chat', 'streaming', 'tools');\n      }\n    }\n\n    // 确保有基础能力\n    const baseCapabilities = ['chat', 'streaming'];\n    return [...new Set([...baseCapabilities, ...capabilities])];\n  }\n\n  /**\n   * Generate endpoint URL from provider ID\n   */\n  private generateEndpointFromProvider(providerId: string): string {\n    // 常见提供商的默认端点\n    const providerEndpoints: Record<string, string> = {\n      'qwen': 'https://dashscope.aliyuncs.com/api/v1',\n      'iflow': 'https://apis.iflow.cn/v1',\n      'openai': 'https://api.openai.com/v1',\n      'anthropic': 'https://api.anthropic.com/v1',\n      'lmstudio': 'http://localhost:1234/v1'\n    };\n\n    return providerEndpoints[providerId.toLowerCase()] || 'http://localhost:8000/v1';\n  }\n\n  /**\n   * Unregister a virtual model\n   */\n  public async unregisterModel(modelId: string): Promise<void> {\n    this.log('Unregistering virtual model', { method: 'unregisterModel' });\n    \n    if (!this.virtualModels.has(modelId)) {\n      throw new Error(`Virtual model '${modelId}' not found`);\n    }\n    \n    // Remove from registries\n    this.virtualModels.delete(modelId);\n    this.routingRules.delete(modelId);\n    this.modelMetrics.delete(modelId);\n    \n    this.log('Virtual model unregistered successfully', { method: 'unregisterModel' });\n  }\n\n  /**\n   * Update routing rules for a model\n   */\n  public async updateRoutingRules(modelId: string, rules: RoutingRule[]): Promise<void> {\n    this.log('Updating routing rules for model', { method: 'updateRoutingRules' });\n    \n    if (!this.virtualModels.has(modelId)) {\n      throw new Error(`Virtual model '${modelId}' not found`);\n    }\n    \n    // Validate rules\n    rules.forEach(rule => this.validateRoutingRule(rule));\n    \n    this.routingRules.set(modelId, rules);\n    this.log('Routing rules updated for model', { method: 'updateRoutingRules' });\n  }\n\n  /**\n   * Get model metrics\n   */\n  public async getModelMetrics(modelId: string): Promise<ModelMetrics> {\n    const metrics = this.modelMetrics.get(modelId);\n    \n    if (!metrics) {\n      throw new Error(`Metrics for model '${modelId}' not found`);\n    }\n    \n    // Calculate dynamic metrics\n    const now = Date.now();\n    const uptime = now - metrics.uptime;\n    const throughput = metrics.totalRequests / (uptime / 1000); // requests per second\n    \n    return {\n      ...metrics,\n      uptime,\n      throughput\n    };\n  }\n\n  /**\n   * Get all registered models\n   */\n  public getModels(): VirtualModelConfig[] {\n    return Array.from(this.virtualModels.values());\n  }\n\n  /**\n   * Get enabled models only\n   */\n  public getEnabledModels(): VirtualModelConfig[] {\n    const enabledModels = Array.from(this.virtualModels.values()).filter(model => model.enabled ?? true);\n\n    console.log('=== VirtualModelRouter.getEnabledModels called ===');\n    console.log('Total models registered:', this.virtualModels.size);\n    console.log('Enabled models count:', enabledModels.length);\n    console.log('Enabled models details:', enabledModels.map(m => ({\n      id: m.id,\n      name: m.name,\n      provider: m.provider,\n      capabilities: m.capabilities,\n      enabled: m.enabled,\n      targetsCount: m.targets?.length || 0\n    })));\n\n    return enabledModels;\n  }\n\n  /**\n   * Get model by ID\n   */\n  public getModel(modelId: string): VirtualModelConfig | undefined {\n    return this.virtualModels.get(modelId);\n  }\n\n  \n  /**\n   * Make routing decision based on rules\n   */\n  private async makeRoutingDecision(request: ClientRequest): Promise<RoutingDecision> {\n    console.log('=== makeRoutingDecision called ===');\n    const enabledModels = this.getEnabledModels();\n    console.log('Enabled models count:', enabledModels.length);\n    console.log('Enabled models:', enabledModels.map(m => m.id));\n\n    if (enabledModels.length === 0) {\n      console.log('❌ No enabled virtual models available - throwing error');\n      throw new Error('No enabled virtual models available');\n    }\n\n    // 智能路由：分析请求特征\n    const requestFeatures = this.analyzeRequestFeatures(request);\n    console.log('Request features:', requestFeatures);\n\n    // 基于特征匹配候选模型\n    const candidates = await this.intelligentModelSelection(request, enabledModels, requestFeatures);\n    console.log('Candidates count:', candidates.length);\n    console.log('Candidates:', candidates.map(m => m.id));\n\n    if (candidates.length === 0) {\n      console.log('❌ No suitable virtual models found for this request - throwing error');\n      throw new Error('No suitable virtual models found for this request');\n    }\n\n    // 选择最佳候选模型\n    const selected = this.selectBestCandidate(candidates, requestFeatures);\n    console.log('Selected model:', selected?.id);\n\n    if (!selected) {\n      console.log('❌ No suitable model found - throwing error');\n      throw new Error('No suitable model found');\n    }\n\n    console.log('=== makeRoutingDecision completed ===');\n    return {\n      model: selected,\n      confidence: this.calculateConfidence(selected, request),\n      reason: this.generateRoutingReason(selected, requestFeatures),\n      alternativeModels: candidates.filter(m => m.id !== selected.id)\n    };\n  }\n\n  /**\n   * Apply routing rules to filter candidate models\n   */\n  private async applyRoutingRules(request: ClientRequest, models: VirtualModelConfig[]): Promise<VirtualModelConfig[]> {\n    const candidates: VirtualModelConfig[] = [];\n    \n    for (const model of models) {\n      const rules = this.routingRules.get(model.id) || [];\n      \n      // Check if model supports required capabilities\n      const requiredCapabilities = this.extractRequiredCapabilities(request);\n      const hasRequiredCapabilities = requiredCapabilities.every(cap => \n        model.capabilities.includes(cap)\n      );\n      \n      if (!hasRequiredCapabilities) {\n        this.log('Model lacks required capabilities', { method: 'routeRequest' });\n        continue;\n      }\n      \n      // Apply custom routing rules\n      const rulesMatch = await this.evaluateRoutingRules(request, rules);\n      \n      if (rulesMatch) {\n        candidates.push(model);\n      }\n    }\n    \n    return candidates;\n  }\n\n  /**\n   * Evaluate routing rules for a request\n   */\n  private async evaluateRoutingRules(request: ClientRequest, rules: RoutingRule[]): Promise<boolean> {\n    if (rules.length === 0) {\n      return true; // No rules means model is eligible for all requests\n    }\n    \n    // Sort rules by priority\n    const sortedRules = rules\n      .filter(rule => rule.enabled)\n      .sort((a, b) => b.priority - a.priority);\n    \n    for (const rule of sortedRules) {\n      try {\n        const matches = await this.evaluateRuleCondition(rule.condition, request);\n        if (matches) {\n          this.log('Routing rule matched', { method: 'routeRequest' });\n          return true;\n        }\n      } catch (error) {\n        this.warn('Error evaluating routing rule', { method: 'routeRequest' });\n        continue;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Evaluate a single rule condition\n   */\n  private async evaluateRuleCondition(condition: string, request: ClientRequest): Promise<boolean> {\n    // Simple condition evaluation (can be extended with more complex logic)\n    if (condition.startsWith('path:')) {\n      const expectedPath = condition.substring(5);\n      return request.path === expectedPath;\n    }\n    \n    if (condition.startsWith('method:')) {\n      const expectedMethod = condition.substring(7);\n      return request.method === expectedMethod;\n    }\n    \n    if (condition.startsWith('header:')) {\n      const [headerName, expectedValue] = condition.substring(7).split('=');\n      const actualValue = request.headers[headerName as keyof typeof request.headers];\n      return actualValue === expectedValue;\n    }\n    \n    // Add more condition types as needed\n    return false;\n  }\n\n  \n  /**\n   * Analyze request features for intelligent routing\n   */\n  private analyzeRequestFeatures(request: ClientRequest): {\n    capabilities: string[];\n    contextLength: number;\n    complexity: 'simple' | 'medium' | 'complex';\n    priority: 'low' | 'medium' | 'high';\n    specialRequirements: string[];\n  } {\n    const capabilities = this.extractRequiredCapabilities(request);\n\n    // 计算上下文长度\n    const content = JSON.stringify(request.body || {});\n    const contextLength = content.length;\n\n    // 计算复杂度\n    let complexity: 'simple' | 'medium' | 'complex' = 'simple';\n    if (contextLength > 8000) {\n      complexity = 'complex';\n    } else if (contextLength > 2000) {\n      complexity = 'medium';\n    }\n\n    // 检测优先级\n    let priority: 'low' | 'medium' | 'high' = 'medium';\n    if (request.headers['x-rcc-priority'] === 'high' || request.path.includes('urgent')) {\n      priority = 'high';\n    } else if (request.headers['x-rcc-priority'] === 'low') {\n      priority = 'low';\n    }\n\n    // 特殊需求\n    const specialRequirements: string[] = [];\n    if (request.headers['x-rcc-preferred-model']) {\n      specialRequirements.push('preferred-model:' + request.headers['x-rcc-preferred-model']);\n    }\n    if (request.headers['x-rcc-exclude-models']) {\n      specialRequirements.push('exclude-models:' + request.headers['x-rcc-exclude-models']);\n    }\n\n    return {\n      capabilities,\n      contextLength,\n      complexity,\n      priority,\n      specialRequirements\n    };\n  }\n\n  /**\n   * Intelligent model selection based on request features\n   */\n  private async intelligentModelSelection(\n    request: ClientRequest,\n    models: VirtualModelConfig[],\n    features: ReturnType<typeof this.analyzeRequestFeatures>\n  ): Promise<VirtualModelConfig[]> {\n    const candidates: VirtualModelConfig[] = [];\n\n    for (const model of models) {\n      let score = 0;\n      let reasons: string[] = [];\n\n      // 能力匹配评分\n      const capabilityMatches = features.capabilities.filter(cap =>\n        model.capabilities.includes(cap)\n      );\n      score += (capabilityMatches.length / features.capabilities.length) * 40;\n      reasons.push(`capability-match: ${capabilityMatches.length}/${features.capabilities.length}`);\n\n      // 上下文长度匹配\n      if (features.contextLength > 4000 && model.capabilities.includes('long-context')) {\n        score += 30;\n        reasons.push('long-context-support');\n      }\n\n      // 复杂度匹配\n      if (features.complexity === 'complex' && model.capabilities.includes('thinking')) {\n        score += 20;\n        reasons.push('thinking-mode-support');\n      }\n\n      // 优先级匹配\n      if (features.priority === 'high' && model.capabilities.includes('high-performance')) {\n        score += 10;\n        reasons.push('high-performance-support');\n      }\n\n      // 模型健康度\n      const metrics = this.modelMetrics.get(model.id);\n      if (metrics) {\n        const healthScore = (1 - metrics.errorRate) * 100;\n        score += healthScore * 0.1;\n        reasons.push(`health-score: ${healthScore.toFixed(1)}`);\n      }\n\n      // 特殊需求检查\n      const hasSpecialRequirement = features.specialRequirements.some(req => {\n        if (req.startsWith('preferred-model:') && req.includes(model.id)) {\n          score += 25;\n          reasons.push('preferred-model');\n          return true;\n        }\n        if (req.startsWith('exclude-models:') && req.includes(model.id)) {\n          score = 0;\n          reasons.push('excluded-model');\n          return true;\n        }\n        return false;\n      });\n\n      // 只有分数大于0才作为候选\n      if (score > 0) {\n        candidates.push({\n          ...model,\n          // 临时存储分数用于后续排序\n          routingScore: score\n        } as any);\n        console.log(`Model ${model.id} scored ${score.toFixed(1)}: ${reasons.join(', ')}`);\n      }\n    }\n\n    // 按分数排序\n    candidates.sort((a: any, b: any) => (b.routingScore || 0) - (a.routingScore || 0));\n\n    // 移除临时分数属性\n    return candidates.map(model => {\n      const { routingScore, ...cleanModel } = model as any;\n      return cleanModel;\n    });\n  }\n\n  /**\n   * Select the best candidate from the list\n   */\n  private selectBestCandidate(candidates: VirtualModelConfig[], features: any): VirtualModelConfig {\n    // 简单策略：选择第一个候选（已按分数排序）\n    // 可以根据需要实现更复杂的策略\n    const candidate = candidates[0];\n    if (!candidate) {\n      throw new Error('No candidates available for selection');\n    }\n    return candidate;\n  }\n\n  /**\n   * Generate routing reason for logging\n   */\n  private generateRoutingReason(model: VirtualModelConfig, features: any): string {\n    const reasons: string[] = [];\n\n    // 基于能力匹配\n    const matches = features.capabilities.filter((cap: string) =>\n      model.capabilities.includes(cap)\n    );\n    if (matches.length > 0) {\n      reasons.push(`matched capabilities: ${matches.join(', ')}`);\n    }\n\n    // 基于上下文长度\n    if (features.contextLength > 4000 && model.capabilities.includes('long-context')) {\n      reasons.push('long context support');\n    }\n\n    // 基于复杂度\n    if (features.complexity === 'complex' && model.capabilities.includes('thinking')) {\n      reasons.push('thinking mode support');\n    }\n\n    // 基于优先级\n    if (features.priority === 'high' && model.capabilities.includes('high-performance')) {\n      reasons.push('high performance support');\n    }\n\n    return reasons.length > 0 ? reasons.join(', ') : 'default selection';\n  }\n\n  /**\n   * Calculate confidence score for model selection\n   */\n  private calculateConfidence(model: VirtualModelConfig, request: ClientRequest): number {\n    // Enhanced confidence calculation\n    const capabilities = this.extractRequiredCapabilities(request);\n    const capabilityMatch = capabilities.filter(cap => model.capabilities.includes(cap)).length;\n    const capabilityScore = capabilities.length > 0 ? capabilityMatch / capabilities.length : 1;\n\n    // Consider model health (error rate)\n    const metrics = this.modelMetrics.get(model.id);\n    const healthScore = metrics ? (1 - metrics.errorRate) : 1;\n\n    // Consider recent performance\n    const recentPerformance = metrics ?\n      (metrics.successfulRequests / Math.max(metrics.totalRequests, 1)) : 1;\n\n    return (capabilityScore * 0.6 + healthScore * 0.25 + recentPerformance * 0.15);\n  }\n\n  /**\n   * Extract required capabilities from request\n   */\n  private extractRequiredCapabilities(request: ClientRequest): string[] {\n    const capabilities: string[] = [];\n\n    // Basic capability detection based on request characteristics\n    if (request.method === 'POST' && request.body) {\n      capabilities.push('chat');\n    }\n\n    if (request.path.includes('stream')) {\n      capabilities.push('streaming');\n    }\n\n    if (request.path.includes('function') || request.path.includes('tool')) {\n      capabilities.push('tools');\n    }\n\n    // 智能检测：根据请求内容推断所需能力\n    if (request.body && typeof request.body === 'object') {\n      const content = JSON.stringify(request.body).toLowerCase();\n\n      // 检测长上下文需求\n      if (content.length > 4000 || content.includes('long') || content.includes('context')) {\n        capabilities.push('long-context');\n      }\n\n      // 检测思考模式需求\n      if (content.includes('think') || content.includes('reason') || content.includes('step')) {\n        capabilities.push('thinking');\n      }\n\n      // 检测代码生成需求\n      if (content.includes('code') || content.includes('program') || content.includes('function')) {\n        capabilities.push('coding');\n      }\n\n      // 检测多语言需求\n      if (content.includes('translate') || content.includes('language') || content.includes('中文')) {\n        capabilities.push('multilingual');\n      }\n    }\n\n    // 检测特殊请求头\n    if (request.headers) {\n      if (request.headers['x-rcc-capabilities']) {\n        const headerCaps = request.headers['x-rcc-capabilities'].split(',').map((cap: string) => cap.trim());\n        capabilities.push(...headerCaps);\n      }\n\n      // 检测用户代理模式\n      if (request.headers['user-agent']) {\n        const userAgent = request.headers['user-agent'].toLowerCase();\n        if (userAgent.includes('claude') || userAgent.includes('ai')) {\n          capabilities.push('ai-assistant');\n        }\n      }\n    }\n\n    // 去重并返回\n    return [...new Set(capabilities)];\n  }\n\n  /**\n   * Record request metrics\n   */\n  private async recordRequestMetrics(modelId: string, success: boolean): Promise<void> {\n    const metrics = this.modelMetrics.get(modelId);\n    \n    if (metrics) {\n      metrics.totalRequests++;\n      metrics.lastUsed = Date.now();\n      \n      if (success) {\n        metrics.successfulRequests++;\n      } else {\n        metrics.failedRequests++;\n      }\n      \n      // Update error rate\n      metrics.errorRate = metrics.failedRequests / metrics.totalRequests;\n      \n      // Update throughput\n      const uptime = Date.now() - metrics.uptime;\n      metrics.throughput = metrics.totalRequests / (uptime / 1000);\n    }\n  }\n\n  /**\n   * Validate model configuration\n   */\n  private validateModelConfig(model: VirtualModelConfig): void {\n    // 只验证核心字段，使配置更加灵活\n    if (!model.id || !model.name || !model.provider) {\n      throw new Error('Model configuration missing required fields: id, name, provider');\n    }\n\n    // 为可选字段提供默认值\n    if (!model.endpoint) {\n      this.warn(`Model ${model.id} missing endpoint, using default`, { method: 'validateModelConfig' });\n      model.endpoint = 'http://localhost:8000/v1';\n    }\n\n    if (!model.capabilities || model.capabilities.length === 0) {\n      this.warn(`Model ${model.id} missing capabilities, using defaults`, { method: 'validateModelConfig' });\n      model.capabilities = ['chat', 'streaming', 'tools'];\n    }\n\n    // 为数值字段提供默认值和验证\n    if (typeof model.maxTokens !== 'number' || model.maxTokens < 1) {\n      this.warn(`Model ${model.id} invalid maxTokens, using default`, { method: 'validateModelConfig' });\n      model.maxTokens = 4000;\n    }\n\n    if (typeof model.temperature !== 'number' || model.temperature < 0 || model.temperature > 2) {\n      this.warn(`Model ${model.id} invalid temperature, using default`, { method: 'validateModelConfig' });\n      model.temperature = 0.7;\n    }\n\n    if (typeof model.topP !== 'number' || model.topP < 0 || model.topP > 1) {\n      this.warn(`Model ${model.id} invalid topP, using default`, { method: 'validateModelConfig' });\n      model.topP = 0.9;\n    }\n\n    // 确保enabled字段存在\n    if (typeof model.enabled !== 'boolean') {\n      model.enabled = true;\n    }\n\n    // 确保routingRules字段存在\n    if (!model.routingRules) {\n      model.routingRules = [];\n    }\n\n    this.log(`Model ${model.id} validation completed`, { method: 'validateModelConfig' });\n  }\n\n  /**\n   * Validate routing rule\n   */\n  private validateRoutingRule(rule: RoutingRule): void {\n    if (!rule.id || !rule.name || !rule.condition) {\n      throw new Error('Routing rule missing required fields');\n    }\n    \n    if (rule.weight < 0 || rule.weight > 1) {\n      throw new Error('Routing rule weight must be between 0 and 1');\n    }\n    \n    if (rule.priority < 1 || rule.priority > 10) {\n      throw new Error('Routing rule priority must be between 1 and 10');\n    }\n  }\n\n  /**\n   * Get detailed model status for debugging\n   */\n  public getModelStatus(): {\n    totalModels: number;\n    enabledModels: number;\n    disabledModels: number;\n    modelDetails: Array<{\n      id: string;\n      name: string;\n      enabled: boolean;\n      capabilities: string[];\n      health: number;\n      lastUsed?: number;\n    }>;\n  } {\n    const allModels = Array.from(this.virtualModels.values());\n    const enabledModels = allModels.filter(m => m.enabled);\n    const disabledModels = allModels.filter(m => !m.enabled);\n\n    const modelDetails = allModels.map(model => {\n      const metrics = this.modelMetrics.get(model.id);\n      const health = metrics ? (1 - metrics.errorRate) * 100 : 100;\n\n      const result = {\n        id: model.id,\n        name: model.name,\n        enabled: model.enabled ?? true,\n        capabilities: model.capabilities,\n        health: Math.round(health * 100) / 100\n      };\n\n      // Only add lastUsed if it exists\n      if (metrics?.lastUsed) {\n        (result as any).lastUsed = metrics.lastUsed;\n      }\n\n      return result;\n    });\n\n    return {\n      totalModels: allModels.length,\n      enabledModels: enabledModels.length,\n      disabledModels: disabledModels.length,\n      modelDetails\n    };\n  }\n\n  /**\n   * Perform health check on all models\n   */\n  public async performHealthCheck(): Promise<void> {\n    this.log('Performing health check on all virtual models', { method: 'performHealthCheck' });\n\n    for (const [modelId, model] of this.virtualModels.entries()) {\n      const metrics = this.modelMetrics.get(modelId);\n      if (!metrics) continue;\n\n      // 简单的健康检查逻辑\n      const isHealthy = metrics.errorRate < 0.1 && metrics.totalRequests > 0;\n      const healthStatus = isHealthy ? 'healthy' : 'unhealthy';\n\n      this.log(`Health check for model ${modelId}: ${healthStatus}`, {\n        method: 'performHealthCheck',\n        modelId,\n        healthStatus,\n        errorRate: metrics.errorRate,\n        totalRequests: metrics.totalRequests\n      });\n\n      // 如果模型不健康，可以考虑禁用它\n      if (!isHealthy && metrics.errorRate > 0.5 && metrics.totalRequests > 10) {\n        this.warn(`Disabling model ${modelId} due to high error rate`, {\n          method: 'performHealthCheck',\n          modelId,\n          errorRate: metrics.errorRate\n        });\n\n        model.enabled = false;\n      }\n    }\n\n    this.log('Health check completed', { method: 'performHealthCheck' });\n  }\n\n  /**\n   * Cleanup resources\n   */\n  public override async destroy(): Promise<void> {\n    this.log('Cleaning up Virtual Model Router', { method: 'destroy' });\n\n    this.virtualModels.clear();\n    this.routingRules.clear();\n    this.modelMetrics.clear();\n\n    await super.destroy();\n  }\n}","// Main Server Module for RCC\n\nimport { BaseModule } from 'rcc-basemodule';\nimport { ModuleInfo } from 'rcc-basemodule';\nimport { IServerModule } from './interfaces/IServerModule';\nimport { HttpServerComponent } from './components/HttpServer';\nimport { VirtualModelRouter } from './components/VirtualModelRouter';\nimport { \n  ServerConfig, \n  ClientRequest, \n  ClientResponse, \n  VirtualModelConfig, \n  RouteConfig, \n  ServerStatus, \n  RequestMetrics, \n  ConnectionInfo, \n  MiddlewareConfig,\n  PipelineIntegrationConfig,\n  PipelineRequestContext,\n  PipelineResponseContext,\n  PipelineExecutionResult,\n  PipelineExecutionStatus\n  } from './types/ServerTypes';\n\nimport { UnderConstruction } from 'rcc-underconstruction';\nimport { VirtualModelRulesModule } from 'rcc-virtual-model-rules';\nimport { PipelineScheduler, IPipelineScheduler } from 'rcc-pipeline';\n\nexport class ServerModule extends BaseModule implements IServerModule {\n  private httpServer: HttpServerComponent;\n  private virtualModelRouter: VirtualModelRouter;\n  private underConstruction: UnderConstruction | null = null;\n  private pipelineIntegrationConfig: PipelineIntegrationConfig;\n  private config: ServerConfig | null = null;\n  private isInitialized: boolean = false;\n  private isRunning: boolean = false;\n  private messageHandlers: Map<string, (message: any) => Promise<void>> = new Map();\n  \n  // Pipeline Scheduler Integration\n  private pipelineScheduler: IPipelineScheduler | null = null;\n  \n  // Virtual Model Rules Integration\n  private virtualModelRulesModule: VirtualModelRulesModule | null = null;\n  \n  // Internal state\n  private routes: Map<string, RouteConfig> = new Map();\n  private middlewares: Map<string, MiddlewareConfig> = new Map();\n  private requestMetrics: RequestMetrics[] = [];\n  private connections: Map<string, ConnectionInfo> = new Map();\n  private startTime: number = 0;\n  \n    \n  constructor() {\n    const moduleInfo: ModuleInfo = {\n      id: 'ServerModule',\n      name: 'RCC Server Module',\n      version: '1.0.0',\n      description: 'HTTP server with virtual model routing and rule evaluation for RCC framework',\n      type: 'server',\n      capabilities: ['http-server', 'virtual-model-routing', 'websocket', 'configuration-integration', 'pipeline-integration'] as string[],\n      dependencies: ['rcc-basemodule', 'rcc-configuration', 'rcc-pipeline'],\n      config: {},\n      metadata: {\n        author: 'RCC Development Team',\n        license: 'MIT',\n        repository: 'https://github.com/rcc/rcc-server'\n      }\n    };\n    \n    super(moduleInfo);\n    this.httpServer = new HttpServerComponent();\n    this.virtualModelRouter = new VirtualModelRouter();\n    this.underConstruction = null;\n    this.pipelineIntegrationConfig = this.getDefaultPipelineIntegrationConfig();\n  }\n\n  /**\n   * Configure the server module\n   */\n  public override async configure(config: Record<string, any>): Promise<void> {\n    console.error('=== ServerModule.configure called ===');\n    this.log('ServerModule.configure method called', { method: 'configure' });\n    console.log('Config keys:', Object.keys(config));\n    console.log('Config:', JSON.stringify(config, null, 2));\n\n    super.configure(config);\n    this.config = config as ServerConfig;\n\n    console.log('=== ServerModule.configure - checking parsedConfig ===');\n    console.log('config.parsedConfig:', config.parsedConfig);\n    console.log('config.parsedConfig type:', typeof config.parsedConfig);\n    console.log('config.parsedConfig exists:', !!config.parsedConfig);\n\n    if (config.parsedConfig) {\n      console.log('config.parsedConfig.keys:', Object.keys(config.parsedConfig));\n      console.log('config.parsedConfig.virtualModels:', config.parsedConfig.virtualModels);\n      console.log('config.parsedConfig.virtualModels exists:', !!config.parsedConfig.virtualModels);\n      if (config.parsedConfig.virtualModels) {\n        console.log('config.parsedConfig.virtualModels type:', typeof config.parsedConfig.virtualModels);\n        console.log('config.parsedConfig.virtualModels keys:', Object.keys(config.parsedConfig.virtualModels));\n      }\n    }\n\n    this.log('ServerModule.configure called', { hasParsedConfig: !!config.parsedConfig, configKeys: Object.keys(config) });\n\n    // Load virtual models from parsed configuration if available\n    console.log('=== Checking condition for loading virtual models ===');\n    console.log('config.parsedConfig exists:', !!config.parsedConfig);\n    console.log('config.parsedConfig.virtualModels exists:', !!(config.parsedConfig && config.parsedConfig.virtualModels));\n    console.log('Full config object keys:', Object.keys(config));\n\n    if (config.parsedConfig && config.parsedConfig.virtualModels) {\n      this.log('Loading virtual models from parsedConfig', {\n        virtualModelsCount: Object.keys(config.parsedConfig.virtualModels).length,\n        virtualModelsKeys: Object.keys(config.parsedConfig.virtualModels)\n      });\n      console.log('=== Calling loadVirtualModelsFromConfig ===');\n      console.log('Virtual models to load:', config.parsedConfig.virtualModels);\n      await this.loadVirtualModelsFromConfig(config.parsedConfig.virtualModels);\n      console.log('=== loadVirtualModelsFromConfig call completed ===');\n    } else {\n      this.log('No parsedConfig or virtualModels found', {\n        hasParsedConfig: !!config.parsedConfig,\n        hasVirtualModels: !!(config.parsedConfig && config.parsedConfig.virtualModels),\n        parsedConfigType: typeof config.parsedConfig,\n        parsedConfigKeys: config.parsedConfig ? Object.keys(config.parsedConfig) : 'null'\n      });\n      console.log('=== NOT calling loadVirtualModelsFromConfig - condition not met ===');\n    }\n\n    console.log('=== ServerModule.configure completed ===');\n  }\n\n  /**\n   * Initialize the server module\n   */\n  public override async initialize(): Promise<void> {\n    console.log('=== STARTING SERVER MODULE INITIALIZATION ===');\n    if (this.isInitialized) {\n      this.warn('Server module is already initialized');\n      return;\n    }\n\n    this.log('Initializing Server Module');\n\n    try {\n      // Call parent initialize first\n      await super.initialize();\n\n      // Initialize Pipeline Scheduler\n      await this.initializePipelineScheduler();\n\n      // Validate configuration\n      if (this.config) {\n        this.validateConfig(this.config);\n      }\n\n      // Initialize HTTP server\n      if (this.config) {\n        this.httpServer.configure(this.config);\n        await this.httpServer.initialize();\n      }\n\n      // Initialize UnderConstruction module\n      if (this.underConstruction) {\n        await this.underConstruction.initialize();\n      }\n\n      // Initialize Virtual Model Rules Module\n      await this.initializeVirtualModelRulesIntegration();\n\n      // Set up request handling\n      this.setupRequestHandling();\n\n      // Set up event handlers\n      this.setupEventHandlers();\n\n      this.isInitialized = true;\n      this.logInfo('Server Module initialized successfully');\n\n      // Notify initialization complete\n      (this as any).sendMessage('server-initialized', { config: this.config || {} });\n\n    } catch (error) {\n      this.error('Failed to initialize Server Module', { method: 'initialize' });\n      throw error;\n    }\n  }\n\n  /**\n   * Start the server\n   */\n  public async start(): Promise<void> {\n    if (!this.isInitialized) {\n      throw new Error('Server module must be initialized before starting');\n    }\n    \n    if (this.isRunning) {\n      this.warn('Server is already running');\n      return;\n    }\n\n    this.log('Starting Server Module');\n    \n    try {\n      // Start HTTP server\n      await this.httpServer.listen(this.config!.port, this.config!.host);\n      \n      this.isRunning = true;\n      this.startTime = Date.now();\n      \n      this.logInfo(`Server started on ${this.config!.host}:${this.config!.port}`);\n      \n      // Notify server started\n      (this as any).sendMessage('server-started', { \n        host: this.config?.host || '',\n        port: this.config?.port || 0,\n        startTime: this.startTime\n      });\n      \n    } catch (error) {\n      this.error('Failed to start Server Module', { method: 'start' });\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the server\n   */\n  public async stop(): Promise<void> {\n    if (!this.isRunning) {\n      this.warn('Server is not running');\n      return;\n    }\n\n    this.log('Stopping Server Module');\n    \n    try {\n      // Stop HTTP server\n      await this.httpServer.close();\n      \n      this.isRunning = false;\n      \n      this.logInfo('Server stopped successfully');\n      \n      // Notify server stopped\n      (this as any).sendMessage('server-stopped', { \n        uptime: Date.now() - this.startTime,\n        totalRequests: this.requestMetrics.length\n      });\n      \n    } catch (error) {\n      this.error('Failed to stop Server Module', { method: 'stop' });\n      throw error;\n    }\n  }\n\n  /**\n   * Restart the server\n   */\n  public async restart(): Promise<void> {\n    this.log('Restarting Server Module');\n    \n    await this.stop();\n    await this.start();\n    \n    this.logInfo('Server restarted successfully');\n  }\n\n  /**\n   * Handle client request\n   */\n  public async handleRequest(request: ClientRequest): Promise<ClientResponse> {\n    if (!this.isRunning) {\n      throw new Error('Server is not running');\n    }\n\n    const startTime = Date.now();\n    \n    try {\n      this.log('Handling request');\n      \n      // Route to virtual model\n      const virtualModel = await this.virtualModelRouter.routeRequest(request);\n      \n      // Process the request through the virtual model\n      const response = await this.processVirtualModelRequest(request, virtualModel);\n      \n      // Record metrics\n      const processingTime = Date.now() - startTime;\n      await this.recordRequestMetrics({\n        requestId: request.id,\n        method: request.method,\n        path: request.path,\n        timestamp: startTime,\n        virtualModel: virtualModel.id,\n        processingTime,\n        status: response.status,\n        bytesSent: 0,\n        bytesReceived: 0\n      });\n      \n      this.logInfo('Request processed successfully');\n      \n      return response;\n      \n    } catch (error) {\n      this.error('Failed to handle request');\n      \n      // Record error metrics\n      const processingTime = Date.now() - startTime;\n      await this.recordRequestMetrics({\n        requestId: request.id,\n        method: request.method,\n        path: request.path,\n        timestamp: startTime,\n        virtualModel: request.virtualModel || '',\n        processingTime,\n        status: 500,\n        bytesSent: 0,\n        bytesReceived: 0,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      \n      // Create standardized error response using Pipeline error handling if available\n      const errorResponse = this.createErrorResponse(error, request);\n      \n      return {\n        id: request.id,\n        status: errorResponse.httpStatus || 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Error': errorResponse.error.code,\n          'X-Error-Category': errorResponse.error.category,\n          'X-Processing-Method': 'server'\n        },\n        body: errorResponse,\n        timestamp: Date.now(),\n        processingTime,\n        requestId: request.id\n      };\n    }\n  }\n\n  /**\n   * Handle WebSocket connection\n   */\n  public async handleWebSocket(connection: ConnectionInfo): Promise<void> {\n    this.log('Handling WebSocket connection');\n    \n    // Add to connections registry\n    this.connections.set(connection.id, connection);\n    \n    // Set up connection event handlers\n    this.setupConnectionHandlers(connection);\n    \n    // Notify connection established\n    (this as any).sendMessage('websocket-connected', { connectionId: connection.id });\n  }\n\n  /**\n   * Register a route\n   */\n  public async registerRoute(route: RouteConfig): Promise<void> {\n    this.log('Registering route');\n    \n    // Validate route configuration\n    this.validateRouteConfig(route);\n    \n    // Add to routes registry\n    this.routes.set(route.id, route);\n    \n    // Add to HTTP server\n    this.addRouteToHttpServer(route);\n    \n    this.logInfo('Route registered successfully');\n  }\n\n  /**\n   * Unregister a route\n   */\n  public async unregisterRoute(routeId: string): Promise<void> {\n    this.log('Unregistering route');\n    \n    if (!this.routes.has(routeId)) {\n      throw new Error(`Route '${routeId}' not found`);\n    }\n    \n    // Remove from registries\n    this.routes.delete(routeId);\n    \n    this.logInfo('Route unregistered successfully');\n  }\n\n  /**\n   * Get all registered routes\n   */\n  public getRoutes(): RouteConfig[] {\n    return Array.from(this.routes.values());\n  }\n\n  /**\n   * Register a virtual model\n   */\n  public async registerVirtualModel(model: VirtualModelConfig): Promise<void> {\n    this.log('Registering virtual model');\n    \n    await this.virtualModelRouter.registerModel(model);\n    \n    this.logInfo('Virtual model registered successfully');\n  }\n\n  /**\n   * Unregister a virtual model\n   */\n  public async unregisterVirtualModel(modelId: string): Promise<void> {\n    this.log('Unregistering virtual model');\n    \n    await this.virtualModelRouter.unregisterModel(modelId);\n    \n    this.logInfo('Virtual model unregistered successfully');\n  }\n\n  /**\n   * Load virtual models from configuration\n   */\n  private async loadVirtualModelsFromConfig(virtualModels: any): Promise<void> {\n    console.log('=== loadVirtualModelsFromConfig called ===');\n    console.log('virtualModels:', virtualModels);\n    console.log('virtualModels type:', typeof virtualModels);\n\n    this.log('Loading virtual models from configuration', {\n      virtualModelsType: typeof virtualModels,\n      virtualModelsKeys: virtualModels ? Object.keys(virtualModels) : 'null'\n    });\n\n    try {\n      // Check if virtualModels is valid\n      if (!virtualModels || typeof virtualModels !== 'object') {\n        this.warn('Invalid virtualModels data provided to loadVirtualModelsFromConfig', {\n          virtualModelsType: typeof virtualModels,\n          virtualModelsValue: virtualModels\n        });\n        return;\n      }\n\n      const virtualModelsKeys = Object.keys(virtualModels);\n      console.log('Virtual models keys:', virtualModelsKeys);\n      this.log('Processing virtual models', {\n        virtualModelsCount: virtualModelsKeys.length,\n        virtualModelsKeys: virtualModelsKeys\n      });\n\n      // Convert configuration virtual models to ServerModule format\n      for (const [modelId, vmConfig] of Object.entries(virtualModels)) {\n        const typedVmConfig = vmConfig as any;\n        console.log(`Processing virtual model: ${modelId}`, vmConfig);\n        this.log(`Processing virtual model: ${modelId}`, {\n          vmConfigType: typeof vmConfig,\n          vmConfigKeys: vmConfig ? Object.keys(vmConfig) : 'null'\n        });\n\n        if (typedVmConfig.enabled !== false) {\n          try {\n            // Get the first target for basic configuration\n            const firstTarget = typedVmConfig.targets && typedVmConfig.targets.length > 0 ? typedVmConfig.targets[0] : null;\n            console.log(`First target for ${modelId}:`, firstTarget);\n\n            if (firstTarget) {\n              this.log(`Registering virtual model with first target: ${modelId}`, {\n                firstTargetProviderId: firstTarget.providerId,\n                firstTargetModelId: firstTarget.modelId,\n                firstTargetKeyIndex: firstTarget.keyIndex\n              });\n\n              const virtualModelConfig: VirtualModelConfig = {\n                id: modelId,\n                name: modelId,\n                provider: firstTarget.providerId,\n                endpoint: '', // Will be set based on provider configuration\n                model: firstTarget.modelId,\n                capabilities: ['chat'], // Default capabilities\n                maxTokens: 4096, // Default value\n                temperature: 0.7, // Default value\n                topP: 1.0, // Default value\n                enabled: typedVmConfig.enabled !== false,\n                routingRules: [] // No custom routing rules by default\n              };\n\n              console.log(`Virtual model config for ${modelId}:`, virtualModelConfig);\n\n              // Register the virtual model synchronously\n              await this.virtualModelRouter.registerModel(virtualModelConfig);\n              this.logInfo(`Virtual model registered successfully: ${modelId}`, {\n                modelId: modelId,\n                provider: virtualModelConfig.provider,\n                model: virtualModelConfig.model\n              });\n              console.log(`✅ Virtual model registered successfully: ${modelId}`);\n            } else {\n              this.warn(`No targets found for virtual model: ${modelId}`, {\n                vmConfigTargets: typedVmConfig.targets,\n                targetsLength: typedVmConfig.targets ? typedVmConfig.targets.length : 0\n              });\n              console.log(`⚠️ No targets found for virtual model: ${modelId}`);\n            }\n          } catch (error) {\n            this.warn(`Error processing virtual model ${modelId}:`, error instanceof Error ? error.message : String(error));\n            console.log(`❌ Error processing virtual model ${modelId}:`, error instanceof Error ? error.message : String(error));\n          }\n        } else {\n          this.log(`Virtual model is disabled: ${modelId}`);\n          console.log(`Virtual model is disabled: ${modelId}`);\n        }\n      }\n\n      this.logInfo('Virtual models loaded from configuration successfully', {\n        totalModelsProcessed: virtualModelsKeys.length\n      });\n      console.log('=== loadVirtualModelsFromConfig completed ===');\n    } catch (error) {\n      this.error('Failed to load virtual models from configuration', error instanceof Error ? error.message : String(error));\n      console.log('❌ Failed to load virtual models from configuration:', error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  /**\n   * Get virtual model by ID\n   */\n  public getVirtualModel(modelId: string): VirtualModelConfig | undefined {\n    return this.virtualModelRouter.getModel(modelId);\n  }\n\n  /**\n   * Get all virtual models\n   */\n  public getVirtualModels(): VirtualModelConfig[] {\n    return this.virtualModelRouter.getModels();\n  }\n\n  /**\n   * Register middleware\n   */\n  public async registerMiddleware(middleware: MiddlewareConfig): Promise<void> {\n    this.log('Registering middleware');\n    \n    this.middlewares.set(middleware.name, middleware);\n    \n    this.logInfo('Middleware registered successfully');\n  }\n\n  /**\n   * Unregister middleware\n   */\n  public async unregisterMiddleware(middlewareId: string): Promise<void> {\n    this.log('Unregistering middleware');\n    \n    if (!this.middlewares.has(middlewareId)) {\n      throw new Error(`Middleware '${middlewareId}' not found`);\n    }\n    \n    this.middlewares.delete(middlewareId);\n    \n    this.logInfo('Middleware unregistered successfully');\n  }\n\n  /**\n   * Get server status with unified monitoring\n   */\n  public getStatus(): ServerStatus {\n    const uptime = this.isRunning ? Date.now() - this.startTime : 0;\n    const virtualModels = this.virtualModelRouter.getModels();\n    \n    return {\n      status: this.getServerStatus(),\n      uptime,\n      port: this.config?.port || 0,\n      host: this.config?.host || '',\n      connections: this.connections.size,\n      requestsHandled: this.requestMetrics.length,\n      errors: this.requestMetrics.filter(m => m.status >= 400).length,\n      lastHeartbeat: Date.now(),\n      virtualModels: {\n        total: virtualModels.length,\n        active: virtualModels.filter(m => m.enabled).length,\n        inactive: virtualModels.filter(m => !m.enabled).length\n      },\n      pipelineIntegration: {\n        enabled: this.pipelineIntegrationConfig.enabled,\n        schedulerAvailable: false,\n        processingMethod: this.underConstruction && this.pipelineIntegrationConfig.enabled ? 'underconstruction' : 'direct',\n        fallbackEnabled: false,\n        unifiedErrorHandling: this.pipelineIntegrationConfig.unifiedErrorHandling || false,\n        unifiedMonitoring: this.pipelineIntegrationConfig.unifiedMonitoring || false,\n        errorMapping: this.pipelineIntegrationConfig.errorMapping || {}\n      },\n      monitoring: {\n        enabled: this.pipelineIntegrationConfig.unifiedMonitoring || false,\n        detailedMetrics: this.pipelineIntegrationConfig.monitoringConfig?.enableDetailedMetrics || false,\n        requestTracing: this.pipelineIntegrationConfig.monitoringConfig?.enableRequestTracing || false,\n        performanceMonitoring: this.pipelineIntegrationConfig.monitoringConfig?.enablePerformanceMonitoring || false\n      }\n    };\n  }\n\n  /**\n   * Get request metrics\n   */\n  public getMetrics(): RequestMetrics[] {\n    return [...this.requestMetrics];\n  }\n\n  /**\n   * Get active connections\n   */\n  public getConnections(): ConnectionInfo[] {\n    return Array.from(this.connections.values());\n  }\n\n  /**\n   * Get health status with unified monitoring\n   */\n  public async getHealth(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    checks: Record<string, boolean>;\n    timestamp: number;\n    underConstructionModule?: boolean;\n    errorHandling?: boolean;\n    monitoring?: boolean;\n  }> {\n    const checks: Record<string, boolean> = {};\n    \n    // Check HTTP server\n    checks['http_server'] = this.isRunning;\n    \n    // Check virtual models\n    const virtualModels = this.virtualModelRouter.getEnabledModels();\n    checks['virtual_models'] = virtualModels.length > 0;\n    \n    // Check memory usage\n    const memoryUsage = process.memoryUsage();\n    const memoryThreshold = 500 * 1024 * 1024; // 500MB\n    checks['memory'] = memoryUsage.heapUsed < memoryThreshold;\n    \n    // Check error rate\n    const errorRate = this.calculateErrorRate();\n    checks['error_rate'] = errorRate < 0.05; // 5% threshold\n    \n    // Check underconstruction module if available\n    let underConstructionHealth = true;\n    if (this.underConstruction) {\n      underConstructionHealth = true; // UnderConstruction module is always healthy\n      checks['underconstruction_module'] = underConstructionHealth;\n    }\n    \n    // Check virtual model rules integration\n    checks['virtual_model_rules_integration'] = this.virtualModelRulesModule !== null;\n    \n    // Check unified error handling\n    checks['unified_error_handling'] = this.pipelineIntegrationConfig.unifiedErrorHandling || false;\n    \n    // Check unified monitoring\n    checks['unified_monitoring'] = this.pipelineIntegrationConfig.unifiedMonitoring || false;\n    \n    // Determine overall status\n    let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    const failedChecks = Object.values(checks).filter(check => !check).length;\n    \n    if (failedChecks === 0) {\n      status = 'healthy';\n    } else if (failedChecks <= 2) {\n      status = 'degraded';\n    } else {\n      status = 'unhealthy';\n    }\n    \n    return {\n      status,\n      checks,\n      timestamp: Date.now(),\n      underConstructionModule: underConstructionHealth,\n      errorHandling: this.pipelineIntegrationConfig.unifiedErrorHandling || false,\n      monitoring: this.pipelineIntegrationConfig.unifiedMonitoring || false\n    };\n  }\n\n  /**\n   * Update server configuration\n   */\n  public async updateConfig(config: Partial<ServerConfig>): Promise<void> {\n    this.log('Updating server configuration');\n    \n    if (!this.config) {\n      throw new Error('Server not initialized');\n    }\n    \n    // Merge configuration\n    this.config = { ...this.config, ...config };\n    \n    this.logInfo('Server configuration updated successfully');\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): ServerConfig {\n    if (!this.config) {\n      throw new Error('Server not configured');\n    }\n    \n    return { ...this.config };\n  }\n\n  /**\n   * Register message handler\n   */\n  private registerMessageHandler(type: string, handler: (message: any) => Promise<void>): void {\n    this.messageHandlers.set(type, handler);\n    this.log('Registered message handler');\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  public async handleMessage(message: any): Promise<any> {\n    this.log('Handling message');\n    \n    if (this.messageHandlers.has(message.type)) {\n      const handler = this.messageHandlers.get(message.type)!;\n      await handler(message);\n    }\n    \n    return;\n  }\n\n  \n  /**\n   * Initialize Pipeline Scheduler\n   */\n  private async initializePipelineScheduler(): Promise<void> {\n    this.log('Initializing Pipeline Scheduler');\n    \n    try {\n      // Initialize Pipeline Scheduler\n      this.pipelineScheduler = new PipelineScheduler();\n      await this.pipelineScheduler.initialize();\n      \n      this.logInfo('Pipeline Scheduler initialized successfully');\n      \n    } catch (error) {\n      this.error('Failed to initialize Pipeline Scheduler');\n      // Don't throw error - allow server to start without pipeline scheduler\n      this.warn('Pipeline Scheduler initialization failed, continuing without it');\n    }\n  }\n  \n  /**\n   * Initialize Virtual Model Rules Integration\n   */\n  private async initializeVirtualModelRulesIntegration(): Promise<void> {\n    this.log('Initializing Virtual Model Rules Integration');\n    \n    try {\n      // Initialize Virtual Model Rules Module\n      this.virtualModelRulesModule = new VirtualModelRulesModule();\n      await this.virtualModelRulesModule.initialize();\n      \n      this.logInfo('Virtual Model Rules Integration initialized successfully');\n      \n    } catch (error) {\n      this.error('Failed to initialize Virtual Model Rules Integration');\n      // Don't throw error - allow server to start without virtual model rules integration\n      this.warn('Virtual Model Rules Integration failed, continuing without it');\n    }\n  }\n\n  /**\n   * Get Virtual Model Configuration\n   */\n  private async _getVirtualModelConfig(virtualModelId: string): Promise<any> {\n    // Check if pipeline scheduler is available\n    if (this.pipelineScheduler) {\n      try {\n        // Get pipeline configuration for the virtual model\n        const pipelineConfig = await this.pipelineScheduler.getPipelineConfig(virtualModelId);\n        return {\n          id: virtualModelId,\n          name: virtualModelId,\n          provider: pipelineConfig?.provider || 'default',\n          endpoint: pipelineConfig?.endpoint || '',\n          model: pipelineConfig?.model || virtualModelId,\n          capabilities: pipelineConfig?.capabilities || [],\n          enabled: pipelineConfig?.enabled !== undefined ? pipelineConfig.enabled : true,\n          priority: pipelineConfig?.priority || 'medium',\n          config: pipelineConfig\n        };\n      } catch (error) {\n        this.warn(`Failed to get pipeline config for virtual model ${virtualModelId}, using default`);\n      }\n    }\n    \n    // Mark as under construction feature if pipeline scheduler is not available\n    if (this.underConstruction) {\n      this.underConstruction.callUnderConstructionFeature('get-virtual-model-config', {\n        caller: 'ServerModule.getVirtualModelConfig',\n        parameters: { virtualModelId },\n        purpose: '获取虚拟模型配置'\n      });\n    }\n    \n    // Fallback implementation\n    return {\n      id: virtualModelId,\n      name: virtualModelId,\n      provider: 'under-construction',\n      endpoint: '',\n      model: virtualModelId,\n      capabilities: [],\n      enabled: true,\n      priority: 'medium'\n    };\n  }\n\n  /**\n   * Process request through virtual model\n   */\n  public async processVirtualModelRequest(request: ClientRequest, model: VirtualModelConfig): Promise<ClientResponse> {\n    this.log('Processing request with virtual model');\n    \n    // Check if pipeline scheduler is available\n    if (this.pipelineScheduler) {\n      try {\n        // Process request through pipeline scheduler\n        const executionContext = {\n          requestId: request.id,\n          method: request.method,\n          path: request.path,\n          headers: request.headers,\n          body: request.body,\n          query: request.query,\n          timestamp: request.timestamp,\n          clientId: request.clientId,\n          virtualModelId: model.id,\n          metadata: {\n            source: 'server-module'\n          }\n        };\n        \n        const executionResult = await this.pipelineScheduler.executePipeline(model.id, executionContext);\n        \n        // Convert execution result to client response\n        return {\n          id: request.id,\n          status: executionResult.error ? 500 : 200,\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Virtual-Model': model.id,\n            'X-Provider': model.provider,\n            'X-Processing-Method': 'pipeline',\n            'X-Pipeline-Execution-Id': executionResult.executionId || 'unknown',\n            'X-Integration-Status': 'rcc-v4-unified'\n          },\n          body: executionResult.result || executionResult.error || { message: 'Request processed successfully' },\n          timestamp: Date.now(),\n          processingTime: executionResult.duration || 0,\n          requestId: request.id\n        };\n      } catch (error) {\n        this.error('Pipeline processing failed', {\n          modelId: model.id,\n          error: error instanceof Error ? error.message : String(error),\n          method: 'processVirtualModelRequest'\n        });\n        \n        // Pipeline processing failed - throw error to indicate system issue\n        throw new Error(`Pipeline processing failed for model ${model.id}: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    }\n\n    // Pipeline scheduler not available - throw error to indicate system issue\n    throw new Error('Pipeline scheduler not available - system configuration issue');\n  }\n\n  /**\n   * Process request via Pipeline Scheduler\n   */\n  private async _processViaPipelineScheduler(request: ClientRequest, model: VirtualModelConfig): Promise<ClientResponse> {\n    this.log('Processing via Pipeline Scheduler');\n    \n    if (!this.pipelineScheduler) {\n      throw new Error('Pipeline Scheduler not available');\n    }\n    \n    try {\n      // Process request through pipeline scheduler\n      const executionContext = {\n        requestId: request.id,\n        method: request.method,\n        path: request.path,\n        headers: request.headers,\n        body: request.body,\n        query: request.query,\n        timestamp: request.timestamp,\n        clientId: request.clientId,\n        virtualModelId: model.id,\n        metadata: {\n          source: 'server-module-internal'\n        }\n      };\n      \n      const executionResult = await this.pipelineScheduler.executePipeline(model.id, executionContext);\n      \n      // Return pipeline processing response\n      return {\n        id: request.id,\n        status: executionResult.error ? 500 : 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Virtual-Model': model.id,\n          'X-Provider': model.provider,\n          'X-Processing-Method': 'pipeline-scheduler',\n          'X-Pipeline-Execution-Id': executionResult.executionId || 'unknown',\n          'X-Integration-Status': 'rcc-v4-unified'\n        },\n        body: {\n          message: 'Request processed via Pipeline Scheduler',\n          model: model.id,\n          provider: model.provider,\n          processingMethod: 'pipeline-scheduler',\n          originalRequest: {\n            method: request.method,\n            path: request.path,\n            timestamp: request.timestamp\n          },\n          executionResult: executionResult,\n          timestamp: Date.now(),\n          integration: {\n            unified: true,\n            version: 'v4',\n            errorHandler: 'unified-pipeline-error-handling'\n          }\n        },\n        timestamp: Date.now(),\n        processingTime: executionResult.duration || 0,\n        requestId: request.id\n      };\n      \n    } catch (error) {\n      this.error('Pipeline Scheduler processing failed', {\n        modelId: model.id,\n        error: error instanceof Error ? error.message : String(error),\n        method: 'processViaPipelineScheduler'\n      });\n      \n      // Re-throw to trigger fallback mechanism\n      throw error;\n    }\n  }\n\n  \n  /**\n   * Set UnderConstruction Module\n   */\n  public async setUnderConstructionModule(underConstructionModule: UnderConstruction): Promise<void> {\n    this.log('Setting UnderConstruction Module');\n    \n    try {\n      // Initialize the module if not already initialized\n      if (typeof underConstructionModule.initialize === 'function') {\n        await underConstructionModule.initialize();\n      }\n      \n      // Check if features exist (simple check)\n      const hasFeatures = typeof underConstructionModule.callUnderConstructionFeature === 'function';\n      \n      if (!hasFeatures) {\n        this.warn('UnderConstruction module may not be properly initialized');\n      }\n      \n      this.underConstruction = underConstructionModule;\n      \n      this.logInfo('UnderConstruction Module set successfully');\n      \n      // Broadcast module integration event\n      (this as any).sendMessage('underconstruction-integrated', {\n        enabled: true,\n        config: this.pipelineIntegrationConfig\n      });\n      \n    } catch (error) {\n      this.error('Failed to set UnderConstruction Module');\n      throw error;\n    }\n  }\n\n  /**\n   * Get Pipeline Integration Configuration\n   */\n  public getPipelineIntegrationConfig(): PipelineIntegrationConfig {\n    return { ...this.pipelineIntegrationConfig };\n  }\n\n  \n  /**\n   * Create standardized error response using unified error handling\n   */\n  private createErrorResponse(error: any, request?: ClientRequest): any {\n    let pipelineError;\n    \n    // Convert error to PipelineError format if possible\n    if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n      pipelineError = error;\n    } else {\n      // Map common server errors to PipelineError format\n      const errorMap: Record<string, string> = {\n        'Server is not running': 'SERVER_NOT_RUNNING',\n        'Pipeline execution failed': 'PIPELINE_EXECUTION_FAILED',\n        'Internal Server Error': 'INTERNAL_SERVER_ERROR',\n        'Not Found': 'RESOURCE_NOT_FOUND',\n        'Unauthorized': 'AUTHORIZATION_FAILED',\n        'Forbidden': 'ACCESS_DENIED'\n      };\n      \n      const errorMessage = error instanceof Error ? error.message : String(error);\n      const errorCode = errorMap[errorMessage] || 'UNKNOWN_ERROR';\n      \n      pipelineError = {\n        code: errorCode,\n        message: errorMessage,\n        category: 'server',\n        severity: 'high',\n        recoverability: 'recoverable',\n        impact: 'single_module',\n        source: 'server',\n        timestamp: Date.now()\n      };\n    }\n    \n    // Map error code to HTTP status\n    const statusMap: Record<string, number> = {\n      'SERVER_NOT_RUNNING': 503,\n      'PIPELINE_EXECUTION_FAILED': 500,\n      'DIRECT_PROCESSING_FAILED': 500,\n      'INTERNAL_SERVER_ERROR': 500,\n      'RESOURCE_NOT_FOUND': 404,\n      'AUTHORIZATION_FAILED': 401,\n      'ACCESS_DENIED': 403,\n      'NO_AVAILABLE_PIPELINES': 503,\n      'PIPELINE_SELECTION_FAILED': 500,\n      'EXECUTION_FAILED': 500,\n      'EXECUTION_TIMEOUT': 504\n    };\n    \n    const httpStatus = statusMap[pipelineError.code] || 500;\n    \n    return {\n      success: false,\n      error: {\n        code: pipelineError.code,\n        message: pipelineError.message,\n        category: pipelineError.category || 'server',\n        severity: pipelineError.severity || 'medium',\n        timestamp: pipelineError.timestamp || Date.now(),\n        details: pipelineError.details || {}\n      },\n      context: request ? {\n        requestId: request.id,\n        method: request.method,\n        path: request.path,\n        virtualModel: request.virtualModel,\n        timestamp: request.timestamp\n      } : undefined,\n      httpStatus,\n      integration: {\n        unified: true,\n        version: 'v4',\n        errorHandler: 'unified-pipeline-error-handling'\n      }\n    };\n  }\n\n  /**\n   * Get default Pipeline Integration Configuration\n   */\n  private getDefaultPipelineIntegrationConfig(): PipelineIntegrationConfig {\n    return {\n      enabled: false,\n      defaultTimeout: 30000,\n      maxRetries: 3,\n      retryDelay: 1000,\n      fallbackToDirect: false,\n      enableMetrics: true,\n      enableHealthCheck: true,\n      pipelineSelectionStrategy: 'round-robin',\n      customHeaders: {\n        'X-Pipeline-Integration': 'RCC-Server',\n        'X-Integration-Status': 'rcc-v4-unified'\n      },\n      errorMapping: {\n        'NO_AVAILABLE_PIPELINES': 503,\n        'PIPELINE_SELECTION_FAILED': 500,\n        'EXECUTION_FAILED': 500,\n        'EXECUTION_TIMEOUT': 504,\n        'SERVER_ERROR': 500,\n        'DIRECT_PROCESSING_FAILED': 500\n      },\n      unifiedErrorHandling: true,\n      unifiedMonitoring: true\n    };\n  }\n\n  /**\n   * Setup request handling with unified logging\n   */\n  private setupRequestHandling(): void {\n    const app = this.httpServer.getApp();\n\n    // Add default route for all requests\n    app.all('*', async (req: any, res: any, next: any) => {\n      const requestStartTime = Date.now();\n      const requestId = req.headers['x-request-id'] || `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      \n      try {\n        // Add request ID to headers for tracing\n        res.setHeader('X-Request-ID', requestId);\n        res.setHeader('X-Integration-Status', 'rcc-v4-unified');\n        \n        // Convert Express request to ClientRequest\n        const clientRequest = this.httpServer.expressToClientRequest(req);\n        clientRequest.id = requestId;\n        \n        // Handle request\n        const clientResponse = await this.handleRequest(clientRequest);\n        \n        // Add unified monitoring headers\n        const processingTime = Date.now() - requestStartTime;\n        res.setHeader('X-Processing-Time', processingTime.toString());\n        res.setHeader('X-Processing-Method', clientResponse.headers['X-Processing-Method'] || 'server');\n        res.setHeader('X-Monitoring-Enabled', this.pipelineIntegrationConfig.unifiedMonitoring ? 'true' : 'false');\n        \n        // Convert ClientResponse to Express response\n        this.httpServer.clientResponseToExpress(clientResponse, res);\n        \n        // Log request completion with unified monitoring\n        if (this.pipelineIntegrationConfig.unifiedMonitoring) {\n          this.log('Request completed', {\n            requestId,\n            method: req.method,\n            path: req.path,\n            status: clientResponse.status,\n            processingTime,\n            processingMethod: clientResponse.headers['X-Processing-Method'] || 'server',\n            logMethod: 'requestMonitoring'\n          });\n        }\n        \n      } catch (error) {\n        const processingTime = Date.now() - requestStartTime;\n        \n        this.error('Error handling request', {\n          requestId,\n          method: req.method,\n          path: req.path,\n          processingTime,\n          error: error instanceof Error ? error.message : String(error),\n          logMethod: 'requestHandling'\n        });\n        \n        // Create standardized error response\n        const errorResponse = this.createErrorResponse(error);\n        \n        res.status(errorResponse.httpStatus || 500).json({\n          ...errorResponse,\n          requestId,\n          processingTime,\n          timestamp: Date.now()\n        });\n      }\n    });\n  }\n\n  /**\n   * Setup event handlers\n   */\n  private setupEventHandlers(): void {\n    // Handle system messages through message handler\n    this.registerMessageHandler('shutdown-request', async () => {\n      this.log('Received shutdown request', { method: 'setupEventHandlers' });\n      await this.stop();\n    });\n    \n    // Handle HTTP server events (if EventEmitter is available)\n    if (typeof this.httpServer.on === 'function') {\n      this.httpServer.on('error', () => {\n        this.error('HTTP server error', { method: 'setupEventHandlers' });\n      });\n    }\n    \n    // Handle process events\n    process.on('SIGTERM', async () => {\n      this.log('Received SIGTERM signal', { method: 'setupEventHandlers' });\n      await this.stop();\n      process.exit(0);\n    });\n    \n    process.on('SIGINT', async () => {\n      this.log('Received SIGINT signal', { method: 'setupEventHandlers' });\n      await this.stop();\n      process.exit(0);\n    });\n  }\n\n  /**\n   * Setup connection handlers\n   */\n  private setupConnectionHandlers(connection: ConnectionInfo): void {\n    // Handle connection events if available\n    if (typeof connection.on === 'function') {\n      connection.on('close', () => {\n        this.connections.delete(connection.id);\n        this.log('Connection closed:', connection.id);\n      });\n      \n      connection.on('error', () => {\n        this.connections.delete(connection.id);\n        this.warn('Connection error', { method: 'setupConnectionHandlers' });\n      });\n    }\n  }\n\n  /**\n   * Add route to HTTP server\n   */\n  private addRouteToHttpServer(route: RouteConfig): void {\n    const app = this.httpServer.getApp();\n    \n    // Add route based on method\n    switch (route.method.toLowerCase()) {\n      case 'get':\n        app.get(route.path, this.createRouteHandler(route));\n        break;\n      case 'post':\n        app.post(route.path, this.createRouteHandler(route));\n        break;\n      case 'put':\n        app.put(route.path, this.createRouteHandler(route));\n        break;\n      case 'delete':\n        app.delete(route.path, this.createRouteHandler(route));\n        break;\n      case 'patch':\n        app.patch(route.path, this.createRouteHandler(route));\n        break;\n      default:\n        throw new Error(`Unsupported HTTP method: ${route.method}`);\n    }\n  }\n\n  /**\n   * Create route handler\n   */\n  private createRouteHandler(_route: RouteConfig) {\n    return async (req: any, res: any) => {\n      try {\n        const clientRequest = this.httpServer.expressToClientRequest(req);\n        const clientResponse = await this.handleRequest(clientRequest);\n        this.httpServer.clientResponseToExpress(clientResponse, res);\n      } catch (error) {\n        this.error('Route handler error', { method: 'createRouteHandler' });\n        const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred';\n        res.status(500).json({\n          error: 'Internal Server Error',\n          message: process.env.NODE_ENV === 'development' ? errorMessage : 'An unexpected error occurred'\n        });\n      }\n    };\n  }\n\n  /**\n   * Record request metrics\n   */\n  private async recordRequestMetrics(metrics: RequestMetrics): Promise<void> {\n    this.requestMetrics.push(metrics);\n    \n    // Keep only last 1000 metrics\n    if (this.requestMetrics.length > 1000) {\n      this.requestMetrics = this.requestMetrics.slice(-1000);\n    }\n  }\n\n  /**\n   * Calculate error rate\n   */\n  private calculateErrorRate(): number {\n    if (this.requestMetrics.length === 0) {\n      return 0;\n    }\n    \n    const errors = this.requestMetrics.filter(m => m.status >= 400).length;\n    return errors / this.requestMetrics.length;\n  }\n\n  /**\n   * Get server status\n   */\n  private getServerStatus(): ServerStatus['status'] {\n    if (!this.isInitialized) {\n      return 'stopped';\n    }\n    \n    if (!this.isRunning) {\n      return 'stopped';\n    }\n    \n    return 'running';\n  }\n\n  /**\n   * Validate server configuration\n   */\n  private validateConfig(config: ServerConfig): void {\n    if (!config.port || config.port < 1 || config.port > 65535) {\n      throw new Error('Invalid port number');\n    }\n    \n    if (!config.host) {\n      throw new Error('Host is required');\n    }\n    \n    if (config.timeout < 1000 || config.timeout > 60000) {\n      throw new Error('Timeout must be between 1000 and 60000ms');\n    }\n  }\n\n  /**\n   * Validate route configuration\n   */\n  private validateRouteConfig(route: RouteConfig): void {\n    if (!route.id || !route.path || !route.method || !route.handler) {\n      throw new Error('Route configuration missing required fields');\n    }\n    \n    const validMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'];\n    if (!validMethods.includes(route.method)) {\n      throw new Error(`Invalid HTTP method: ${route.method}`);\n    }\n  }\n\n  /**\n   * Cleanup resources with unified logging\n   */\n  public override async destroy(): Promise<void> {\n    this.log('Cleaning up Server Module with unified cleanup', { method: 'destroy' });\n    \n    try {\n      // Stop server if running\n      if (this.isRunning) {\n        await this.stop();\n      }\n      \n            \n      if (this.virtualModelRulesModule) {\n        await this.virtualModelRulesModule.destroy();\n        this.virtualModelRulesModule = null;\n      }\n      \n      // Cleanup components\n      if (typeof this.httpServer.destroy === 'function') {\n        await this.httpServer.destroy();\n      }\n      if (typeof this.virtualModelRouter.destroy === 'function') {\n        await this.virtualModelRouter.destroy();\n      }\n      \n      // Clear registries\n      this.routes.clear();\n      this.middlewares.clear();\n      this.requestMetrics.length = 0;\n      this.connections.clear();\n      this.messageHandlers.clear();\n            \n      this.config = null;\n      this.isInitialized = false;\n      \n      this.logInfo('Server Module cleanup completed successfully');\n      \n      await super.destroy();\n      \n    } catch (error) {\n      this.error('Error during unified cleanup', { method: 'destroy' });\n      throw error;\n    }\n  }\n}\n\nexport default ServerModule;"],"names":[],"mappings":"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"}